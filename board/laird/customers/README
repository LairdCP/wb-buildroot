HowTo add custom customer repositories
======================================

Customer builds need to be handled in a special manner and thus utilize separate repositories.
The basic requirement is that no customer files nor meta-information show in any repository
that we give out as source. Specifically `wb.git` and `wb-buildroot.git` must be devoid of
customer information.

The process of adding a customer build can be summarized:

1. Add a customer board repository.
2. Add a customer build support repository.
3. Create a customer manifest.
4. Add the customer manifest information to the `default.xml` manifest for developers.


Building an existing customer build
-----------------------------------

A properly done customer build is driven by a customer-specific makefile in the base `wb/`
directory.  Simply use that file:

		make -f customer-sample.mk


Repositories
------------

Customer builds require two repositories. The first one is a board repository with the
configuration, patches and root-fs overlays. This repository will be hooked in by Repo into
the `wb/buildroot/board/laird/customers` directory. The second repository is a build-support
repository with the various makefiles and that hooks into `wb/images`.

### board repository ###

The board repository should be located on our server in the `/home/git/customer` directory.
It will have a name such as `wb_customer.git`

At a minimum the repository must contain the `post_build.sh`, `post_image.sh` and the buildroot
config. Most likely it will also require a `patches` directory and a `rootfs-additions` directory.

The general layout is thus:

		sample/
		|-- configs
		|   |-- buildroot.config
		|   +-- busybox-1.21.x.config
		|-- patches
		|-- post_build.sh
		|-- post_image.sh
		+-- rootfs-additions

The `configs/buildroot.config` file will be automatically copied to `wb/buildroot/configs` and
the name adjusted as necessary.

### build-support repository ###

The build-support repository contains the top level makefiles and the images makefile.

The build-support repository should be located on our server in the `/home/git/customer`
directory. It will have a name such as `wb_customer-buildsupport.git`

Typically it will contain just the following three files:

* `root.mk` - This file is the top-level makefile and will get copied to `wb/` as `customer.mk`
* `images.mk` - This file is the images-level makefile and will get copied to `wb/images/` as `customer.mk`
* `Makefile` - This file is already at the correct level and handles the customer image build

The basic tree layout looks like:

		sample
		|-- images.mk
		|-- Makefile
		+-- root.mk

The `images.mk` and the `root.mk` files will be copied by Repo to the proper places as instructed
by the manifest file.

The `root.mk` file looks similar to the normal `Makefile` except it is customer specific. See
`customer/wb_sample.git/root.mk` for details.

The `images.mk` file makes `customer.mk` and is a very thin layer to call the proper customer
directory `Makefile`.  It generally always looks like:

		# Do not edit sample.mk
		# Copied by repo from images/sample/images.mk

		sample:
			make -C $@


Customer Manifests
------------------

The customer manifest needs to be based on the correct manifest for the base board. This is
something the developer will have to decide. Copy the manifest file and then add the two
new customer repositories to the bottom.  It will look like:

	  <project path="wb/buildroot/board/laird/customers/wb_sample"
			   name="customer/wb_sample.git"
			   remote="origin" revision="master" >
		<copyfile src="configs/buildroot.config" dest="wb/buildroot/configs/wb_sample_defconfig" />
	  </project>

	  <project path="wb/images/wb_sample"
			   name="customer/wb_sample-buildsupport.git"
			   remote="origin" revision="master" >
		<copyfile src="root.mk" dest="wb/wb_sample.mk" />
		<copyfile src="images.mk" dest="wb/images/wb_sample.mk" />
	  </project>

The `copyfile` Repo command copies a file from the imported repository and places it in the
destination location with the specified name. This is the magic that allows the customer
builds to work as expected without polluting the main repositories



default.xml Manifest
--------------------

The `default.xml` manifest is the primary manifest from which Laird Connectivity developers work with
the WB codebase. As such, it should be able to build all types of builds, including customer
builds, out-of-the-box. The customer repositories are listed last. Simply copy the two
`project` definitions for the two customer repositories to the bottom of the manifest and
all should work next time a developer syncs the repository.
