diff -urN a/Config.in b/Config.in
--- a/Config.in	2012-11-20 17:40:26.000000000 -0500
+++ b/Config.in	2012-12-02 15:55:36.073502554 -0500
@@ -150,7 +150,7 @@
 	string "The External Ram Address to Load U-Boot Image"
 	default "0x73F00000" if CONFIG_AT91SAM9M10G45EK
 	default "0x26F00000" if CONFIG_AT91SAM9X5EK || CONFIG_AT91SAM9N12EK || CONFIG_AT91SAMA5D3XEK
-	default "0x21F00000" if CONFIG_AT91SAM9260EK || CONFIG_AT91SAM9261EK || CONFIG_AT91SAM9263EK || CONFIG_AT91SAM9G10EK || CONFIG_AT91SAM9G20EK || CONFIG_AT91SAM9RLEK
+	default "0x21F00000" if CONFIG_AT91SAM9260EK || CONFIG_AT91SAM9261EK || CONFIG_AT91SAM9263EK || CONFIG_AT91SAM9G10EK || CONFIG_AT91SAM9G20EK || CONFIG_AT91SAM9RLEK || CONFIG_WB40N
 	default "0x23F00000"
 	help
 	  The entry point to which the bootstrap will pass control.
diff -urN a/board/Config.in b/board/Config.in
--- a/board/Config.in	2012-11-20 17:40:26.000000000 -0500
+++ b/board/Config.in	2012-12-02 15:55:36.074502554 -0500
@@ -188,6 +188,16 @@
 	help
 	  Use the AT91SAM9N12EK Development board
 
+config	CONFIG_WB40N
+	bool "wb40n"
+	select CONFIG_SDRAM
+	select ALLOW_NANDFLASH
+	select ALLOW_CPU_CLK_400MHZ
+	select ALLOW_CRYSTAL_18_432MHZ
+	select ALLOW_SDRAM_16BIT
+	help
+	  Use the Laird Technoligies WB40N Wireless Bridge module
+
 endchoice
 
 config CONFIG_CHIP
@@ -199,6 +209,7 @@
 	default "AT91SAM9XE"	if CONFIG_AT91SAM9XEEK
 	default "AT91SAM9G10"	if CONFIG_AT91SAM9G10EK
 	default "AT91SAM9G20"	if CONFIG_AT91SAM9G20EK
+	default "AT91SAM9G20"	if CONFIG_WB40N
 	default "AT91SAM9G45"	if CONFIG_AT91SAM9M10G45EK
 	default "AT91SAM9X5"	if CONFIG_AT91SAM9X5EK
 	default "AT91SAM9N12"	if CONFIG_AT91SAM9N12EK
@@ -216,6 +227,7 @@
 	default "at91sam9xeek"	if CONFIG_AT91SAM9XEEK
 	default "at91sam9g10ek"	if CONFIG_AT91SAM9G10EK
 	default "at91sam9g20ek"	if CONFIG_AT91SAM9G20EK
+	default "wb40n"	if CONFIG_WB40N
 	default "at91sam9x5ek"	if CONFIG_AT91SAM9X5EK
 	default "at91sam9n12ek"	if CONFIG_AT91SAM9N12EK
 	default "at91sam9m10g45ek"	if CONFIG_AT91SAM9M10G45EK
@@ -233,6 +245,7 @@
 	default "0x44B"	if CONFIG_AT91SAM9XEEK
 	default "0x86F"	if CONFIG_AT91SAM9G10EK		
 	default "0x658"	if CONFIG_AT91SAM9G20EK
+	default "0xC0B"	if CONFIG_WB40N
 	default "1830"	if CONFIG_AT91SAM9M10G45EK	# 1830
 	default "3373"	if CONFIG_AT91SAM9X5EK		# 3373
 	default "9999"	if CONFIG_AT91SAM9N12EK
@@ -258,6 +271,7 @@
 	default "0x306000"	if CONFIG_AT91SAM9XEEK
 	default "0x304000"	if CONFIG_AT91SAM9G10EK
 	default "0x304000"	if CONFIG_AT91SAM9G20EK
+	default "0x304000"	if CONFIG_WB40N
 	default "0x30A000"	if CONFIG_AT91SAM9M10G45EK
 	default "0x308000"	if CONFIG_AT91SAM9X5EK
 	default "0x308000"	if CONFIG_AT91SAM9N12EK
diff -urN a/board/wb40n/board.mk b/board/wb40n/board.mk
--- a/board/wb40n/board.mk	1969-12-31 19:00:00.000000000 -0500
+++ b/board/wb40n/board.mk	2012-12-02 15:55:36.074502554 -0500
@@ -0,0 +1,7 @@
+CPPFLAGS += \
+	-DCONFIG_WB40N \
+	-mcpu=arm926ej-s
+
+ASFLAGS += \
+	-DCONFIG_WB40N \
+	-mcpu=arm926ej-s
diff -urN a/board/wb40n/wb40n.c b/board/wb40n/wb40n.c
--- a/board/wb40n/wb40n.c	1969-12-31 19:00:00.000000000 -0500
+++ b/board/wb40n/wb40n.c	2012-12-03 21:35:08.424893704 -0500
@@ -0,0 +1,338 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2008, Atmel Corporation
+
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#include "common.h"
+#include "hardware.h"
+#include "arch/at91_ccfg.h"
+#include "arch/at91_matrix.h"
+#include "arch/at91_wdt.h"
+#include "arch/at91_rstc.h"
+#include "arch/at91_pmc.h"
+#include "arch/at91_smc.h"
+#include "arch/at91_pio.h"
+#include "arch/at91_sdramc.h"
+#include "spi.h"
+#include "gpio.h"
+#include "pmc.h"
+#include "dbgu.h"
+#include "debug.h"
+#include "sdramc.h"
+#include "pit_timer.h"
+#include "wb40n.h"
+
+#ifdef CONFIG_USER_HW_INIT
+extern void hw_init_hook(void);
+#endif
+
+#ifdef CONFIG_DEBUG
+static void at91_dbgu_hw_init(void)
+{
+	/* Configure DBGU pin */
+	const struct pio_desc dbgu_pins[] = {
+		{"RXD", AT91C_PIN_PB(14), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"TXD", AT91C_PIN_PB(15), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pio_configure(dbgu_pins);
+
+	/*  Configure the dbgu pins */
+	writel((1 << AT91C_ID_PIOB), (PMC_PCER + AT91C_BASE_PMC));
+}
+
+static void initialize_dbgu(void)
+{
+	at91_dbgu_hw_init();
+
+	dbgu_init(BAUDRATE(MASTER_CLOCK, 115200));
+}
+#endif /* #ifdef CONFIG_DEBUG */
+
+#ifdef CONFIG_SDRAM
+static void sdramc_hw_init(void)
+{
+	/* Configure sdramc pins */
+	const struct pio_desc sdramc_pins[] = {
+/*
+		{"D16", AT91C_PIN_PC(16), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D17", AT91C_PIN_PC(17), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D18", AT91C_PIN_PC(18), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D19", AT91C_PIN_PC(19), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D20", AT91C_PIN_PC(20), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D21", AT91C_PIN_PC(21), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D22", AT91C_PIN_PC(22), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D23", AT91C_PIN_PC(23), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D24", AT91C_PIN_PC(24), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D25", AT91C_PIN_PC(25), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D26", AT91C_PIN_PC(26), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D27", AT91C_PIN_PC(27), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D28", AT91C_PIN_PC(28), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D29", AT91C_PIN_PC(29), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D30", AT91C_PIN_PC(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D31", AT91C_PIN_PC(31), 0, PIO_DEFAULT, PIO_PERIPH_A},
+*/
+		{(char *) 0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the SDRAMC PINs */
+	writel((1 << AT91C_ID_PIOC), (PMC_PCER + AT91C_BASE_PMC));
+	pio_configure(sdramc_pins);
+}
+
+static void sdramc_init(void)
+{
+	struct sdramc_register sdramc_config;
+
+	sdramc_config.cr = AT91C_SDRAMC_NC_9 | AT91C_SDRAMC_NR_13 | AT91C_SDRAMC_CAS_3
+				| AT91C_SDRAMC_NB_4_BANKS | AT91C_SDRAMC_DBW_16_BITS
+				| AT91C_SDRAMC_TWR_3 | AT91C_SDRAMC_TRC_9
+				| AT91C_SDRAMC_TRP_3 | AT91C_SDRAMC_TRCD_3
+				| AT91C_SDRAMC_TRAS_6 | AT91C_SDRAMC_TXSR_10;
+
+	sdramc_config.tr = (MASTER_CLOCK * 7) / 1000000;
+	sdramc_config.mdr = AT91C_SDRAMC_MD_SDRAM;
+
+	sdramc_hw_init();
+
+	/* Initialize the matrix (memory voltage = 3.3) */
+	writel((readl(AT91C_BASE_CCFG + CCFG_EBICSA))
+		| AT91C_EBI_CS1A_SDRAMC | AT91C_VDDIOM_SEL_33V
+		| (0x01 << 17), /*  set I/O slew selection */
+		AT91C_BASE_CCFG + CCFG_EBICSA);
+
+	sdramc_initialize(&sdramc_config, AT91C_BASE_CS1);
+
+	/* The SDRAM is put in self-refresh mode to reduce current draw AND reduce EMI. */
+	writel(((readl(AT91C_BASE_SDRAMC + SDRAMC_LPR)) & ~AT91C_SDRAMC_LPCB )| AT91C_SDRAMC_LPCB_SELF_REFRESH, AT91C_BASE_SDRAMC + SDRAMC_LPR);
+}
+#endif /* #ifdef CONFIG_SDRAM */
+
+#if defined(CONFIG_NANDFLASH_RECOVERY) || defined(CONFIG_DATAFLASH_RECOVERY)
+static void recovery_buttons_hw_init(void)
+{
+	/* Configure recovery button PINs */
+	const struct pio_desc recovery_button_pins[] = {
+		{"RECOVERY_BUTTON", CONFIG_SYS_RECOVERY_BUTTON_PIN, 0, PIO_PULLUP, PIO_INPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	writel((1 << AT91C_ID_PIOA), PMC_PCER + AT91C_BASE_PMC);
+	pio_configure(recovery_button_pins);
+}
+#endif /* #if defined(CONFIG_NANDFLASH_RECOVERY) || defined(CONFIG_DATAFLASH_RECOVERY) */
+
+void eth0_phy_init(void)
+{
+	const struct pio_desc eth0_phy_pins[] = {
+		{"ETX0",	AT91C_PIN_PA(12),	0, PIO_DEFAULT, PIO_OUTPUT},
+		{"ETX1",	AT91C_PIN_PA(13),	0, PIO_DEFAULT, PIO_OUTPUT},
+		{"ERX0",	AT91C_PIN_PA(14),	0, PIO_DEFAULT, PIO_OUTPUT},
+		{"ERX1",	AT91C_PIN_PA(15),	0, PIO_DEFAULT, PIO_OUTPUT},
+		{"ETXEN",	AT91C_PIN_PA(16),	0, PIO_DEFAULT, PIO_INPUT},
+		{"ERXDV",	AT91C_PIN_PA(17),	0, PIO_DEFAULT, PIO_INPUT},
+		{"ERXER",	AT91C_PIN_PA(18),	0, PIO_DEFAULT, PIO_INPUT},
+		{"ETXCK",	AT91C_PIN_PA(19),	0, PIO_DEFAULT, PIO_INPUT},
+		{"EMDC",	AT91C_PIN_PA(20),	0, PIO_DEFAULT, PIO_OUTPUT},
+		{"EMDIO",	AT91C_PIN_PA(21),	0, PIO_DEFAULT, PIO_OUTPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pio_configure(eth0_phy_pins);
+	writel((1 << AT91C_ID_PIOA) | (1 << AT91C_ID_EMAC), (PMC_PCER + AT91C_BASE_PMC));
+}
+
+#ifdef CONFIG_HW_INIT
+void hw_init(void)
+{
+	/* Disable watchdog */
+	/* writel(AT91C_WDTC_WDDIS, AT91C_BASE_WDT + WDTC_MR); */
+
+	/*
+	 * At this stage the main oscillator is supposed to be enabled
+	 * PCK = MCK = MOSC
+	 */
+	writel(0x00, AT91C_BASE_PMC + PMC_PLLICPR);
+
+	/* Configure PLLA = MOSC * (PLL_MULA + 1) / PLL_DIVA */
+	pmc_cfg_plla(PLLA_SETTINGS, PLL_LOCK_TIMEOUT);
+
+	/* PCK = PLLA/2 = 3 * MCK */
+	pmc_cfg_mck(MCKR_SETTINGS, PLL_LOCK_TIMEOUT);
+
+	/* Switch MCK on PLLA output */
+	pmc_cfg_mck(MCKR_CSS_SETTINGS, PLL_LOCK_TIMEOUT);
+
+	/* Configure PLLB  */
+	pmc_cfg_pllb(PLLB_SETTINGS, PLL_LOCK_TIMEOUT);
+
+	/* Enable External Reset */
+	writel(((0xA5 << 24) | AT91C_RSTC_URSTEN), AT91C_BASE_RSTC + RSTC_RMR);
+
+	/* Configure the EBI Slave Slot Cycle to 64 */
+	writel((readl((AT91C_BASE_MATRIX + MATRIX_SCFG3)) & ~0xFF) | 0x40,
+		(AT91C_BASE_MATRIX + MATRIX_SCFG3));
+
+	/* This is required for the H+W breakout board, which does not have 
+	 * the phyaddr pins pulled properly at reset. */
+	eth0_phy_init();
+
+	/* Init timer */
+	timer_init();
+
+#ifdef CONFIG_DEBUG
+	/* Initialize dbgu */
+	initialize_dbgu();
+#endif
+
+#ifdef CONFIG_SDRAM
+	/* Initlialize sdram controller */
+	sdramc_init();
+#endif
+
+#ifdef CONFIG_USER_HW_INIT
+	hw_init_hook();
+#endif
+
+#if defined(CONFIG_NANDFLASH_RECOVERY) || defined(CONFIG_DATAFLASH_RECOVERY)
+	/* Init the recovery buttons pins */
+	recovery_buttons_hw_init();
+#endif
+}
+#endif /* #ifdef CONFIG_HW_INIT */
+
+#ifdef CONFIG_DATAFLASH
+void at91_spi0_hw_init(void)
+{
+	/* Configure spi0 PINs */
+	const struct pio_desc spi0_pins[] = {
+		{"MISO",	AT91C_PIN_PA(0),	0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"MOSI",	AT91C_PIN_PA(1),	0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"SPCK",	AT91C_PIN_PA(2),	0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"NPCS",	CONFIG_SYS_SPI_PCS,	1, PIO_PULLUP, PIO_OUTPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the spi0 pins */
+	pio_configure(spi0_pins);
+#if (AT91C_SPI_PCS_DATAFLASH == AT91C_SPI_PCS0_DATAFLASH)
+	writel((1 << AT91C_ID_PIOA), (PMC_PCER + AT91C_BASE_PMC));
+#endif
+
+#if (AT91C_SPI_PCS_DATAFLASH == AT91C_SPI_PCS1_DATAFLASH)
+	writel(((1 << AT91C_ID_PIOA) | (1 << AT91C_ID_PIOC)), (PMC_PCER + AT91C_BASE_PMC));
+#endif
+
+	/* Enable the spi0 clock */
+	writel((1 << AT91C_ID_SPI0), (PMC_PCER + AT91C_BASE_PMC));
+}
+#endif /* #ifdef CONFIG_DATAFLASH */
+
+#ifdef CONFIG_SDCARD
+void at91_mci0_hw_init(void)
+{
+	const struct pio_desc mci_pins[] = {
+		{"MCCK",	AT91C_PIN_PA(8), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCCDA",	AT91C_PIN_PA(7), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCDA0",	AT91C_PIN_PA(6), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCDA1",	AT91C_PIN_PA(9), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCDA2",	AT91C_PIN_PA(10), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCDA3",	AT91C_PIN_PA(11), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+
+	};
+
+	/* Configure the PIO controller */
+	writel((1 << AT91C_ID_PIOA), (PMC_PCER + AT91C_BASE_PMC));
+	pio_configure(mci_pins);
+
+	/* Enable the clock */
+	writel((1 << AT91C_ID_MCI), (PMC_PCER + AT91C_BASE_PMC));
+}
+#endif /* #ifdef CONFIG_SDCARD */
+
+#ifdef CONFIG_NANDFLASH
+void nandflash_hw_init(void)
+{
+	unsigned int reg;
+
+	/* Configure PIOs */
+	const struct pio_desc nand_pins[] = {
+		{"RDY_BSY", AT91C_PIN_PC(13), 0, PIO_PULLUP, PIO_INPUT},
+		{"NANDCS",	CONFIG_SYS_NAND_ENABLE_PIN,	1, PIO_PULLUP, PIO_OUTPUT},
+		{(char *)0, 	0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Setup Smart Media, first enable the address range of CS3 in HMATRIX user interface  */
+	reg = readl(AT91C_BASE_CCFG + CCFG_EBICSA);
+	reg |= AT91C_EBI_CS3A_SM;
+
+	writel(reg, AT91C_BASE_CCFG + CCFG_EBICSA);
+
+	/* Configure SMC CS3 */
+	writel((AT91C_SMC_NWESETUP_(2)
+		| AT91C_SMC_NCS_WRSETUP_(0)
+		| AT91C_SMC_NRDSETUP_(2)
+		| AT91C_SMC_NCS_RDSETUP_(0)),
+		AT91C_BASE_SMC + SMC_SETUP3);
+
+	writel((AT91C_SMC_NWEPULSE_(4)
+		| AT91C_SMC_NCS_WRPULSE_(4)
+		| AT91C_SMC_NRDPULSE_(4)
+		| AT91C_SMC_NCS_RDPULSE_(4)),
+		AT91C_BASE_SMC + SMC_PULSE3);
+
+	writel((AT91C_SMC_NWECYCLE_(7)
+		|  AT91C_SMC_NRDCYCLE_(7)),
+		AT91C_BASE_SMC + SMC_CYCLE3);
+
+	writel((AT91C_SMC_READMODE
+		| AT91C_SMC_WRITEMODE
+		| AT91C_SMC_NWAITM_NWAIT_DISABLE
+		| AT91C_SMC_DBW_WIDTH_BITS_16
+		| AT91_SMC_TDF_(3)),
+		AT91C_BASE_SMC + SMC_CTRL3);
+
+	/* Configure the PIO controller */
+	pio_configure(nand_pins);
+	writel((1 << AT91C_ID_PIOC), PMC_PCER + AT91C_BASE_PMC);
+}
+
+void nandflash_config_buswidth(unsigned char busw)
+{
+	unsigned long csa;
+
+	csa = readl(AT91C_BASE_SMC + SMC_CTRL3);
+
+	if (busw == 0)
+		csa |= AT91C_SMC_DBW_WIDTH_BITS_8;
+	else
+		csa |= AT91C_SMC_DBW_WIDTH_BITS_16;
+
+	writel(csa, AT91C_BASE_SMC + SMC_CTRL3);
+}
+#endif /* #ifdef CONFIG_NANDFLASH */
+
diff -urN a/board/wb40n/wb40n.h b/board/wb40n/wb40n.h
--- a/board/wb40n/wb40n.h	1969-12-31 19:00:00.000000000 -0500
+++ b/board/wb40n/wb40n.h	2012-12-02 15:55:36.074502554 -0500
@@ -0,0 +1,99 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2008, Atmel Corporation
+
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef __WB40N_H__
+#define __WB40N_H__
+
+/*
+ * PMC Setting
+ *
+ * The main oscillator is enabled as soon as possible in the c_startup
+ * and MCK is switched on the main oscillator.
+ * PLL initialization is done later in the hw_init() function
+ */
+#define MASTER_CLOCK		132096000
+#define PLL_LOCK_TIMEOUT	1000000
+
+#define PLLA_SETTINGS		0x202A3F01
+#define PLLB_SETTINGS		0x10193F05
+
+/* Switch MCK on PLLA output PCK = PLLA/2 = 3 * MCK */
+#define MCKR_SETTINGS		0x1300
+#define MCKR_CSS_SETTINGS	(AT91C_PMC_CSS_PLLA_CLK | MCKR_SETTINGS)
+
+/*
+* DataFlash Settings
+*/
+#define CONFIG_SYS_SPI_CLOCK	AT91C_SPI_CLK
+#define CONFIG_SYS_SPI_BUS	0
+#define CONFIG_SYS_SPI_MODE	SPI_MODE0
+
+#if CONFIG_SYS_SPI_BUS == 0
+#define CONFIG_SYS_BASE_SPI	AT91C_BASE_SPI0
+#elif CONFIG_SYS_SPI_BUS == 1
+#define CONFIG_SYS_BASE_SPI	AT91C_BASE_SPI1
+#endif
+
+#if (AT91C_SPI_PCS_DATAFLASH == AT91C_SPI_PCS0_DATAFLASH)
+#define CONFIG_SYS_SPI_CS	0
+#define CONFIG_SYS_SPI_PCS	AT91C_PIN_PA(3)
+#elif (AT91C_SPI_PCS_DATAFLASH == AT91C_SPI_PCS1_DATAFLASH)
+#define CONFIG_SYS_SPI_CS	1
+#define CONFIG_SYS_SPI_PCS	AT91C_PIN_PC(11)
+#endif
+
+/*
+ * NandFlash Settings
+ */
+#define CONFIG_SYS_NAND_BASE		AT91C_BASE_CS3
+#define CONFIG_SYS_NAND_MASK_ALE	(1 << 21)
+#define CONFIG_SYS_NAND_MASK_CLE	(1 << 22)
+
+#define CONFIG_SYS_NAND_ENABLE_PIN	AT91C_PIN_PC(14)
+
+/*
+ * MCI Settings
+ */
+#define CONFIG_SYS_BASE_MCI	AT91C_BASE_MCI
+
+/*
+ * Recovery
+ */
+#define CONFIG_SYS_RECOVERY_BUTTON_PIN	AT91C_PIN_PA(31)
+#define RECOVERY_BUTTON_NAME	"BP4"
+
+/* function */
+extern void hw_init(void);
+
+extern void nandflash_hw_init(void);
+extern void nandflash_config_buswidth(unsigned char busw);
+
+extern void at91_spi0_hw_init(void);
+
+extern void at91_mci0_hw_init(void);
+
+#endif	/* #ifndef __WB40N_H__ */
diff -urN a/board/wb40n/wb40n_defconfig b/board/wb40n/wb40n_defconfig
--- a/board/wb40n/wb40n_defconfig	1969-12-31 19:00:00.000000000 -0500
+++ b/board/wb40n/wb40n_defconfig	2012-12-02 18:28:34.221616021 -0500
@@ -0,0 +1,100 @@
+#
+# Automatically generated make config: don't edit
+# Sun Dec  2 13:23:41 2012
+#
+HAVE_DOT_CONFIG=y
+CONFIG_BOARDNAME="wb40n"
+# CONFIG_AT91SAM9260EK is not set
+# CONFIG_AT91SAM9261EK is not set
+# CONFIG_AT91SAM9263EK is not set
+# CONFIG_AT91SAM9RLEK is not set
+# CONFIG_AT91SAM9XEEK is not set
+# CONFIG_AT91SAM9G10EK is not set
+# CONFIG_AT91SAM9G20EK is not set
+# CONFIG_AT91SAM9M10G45EK is not set
+# CONFIG_AT91SAM9X5EK is not set
+# CONFIG_AT91SAM9N12EK is not set
+# CONFIG_AT91SAMA5D3XEK is not set
+CONFIG_WB40N=y
+CONFIG_CHIP="AT91SAM9G20"
+CONFIG_BOARD="wb40n"
+CONFIG_MACH_TYPE="0xC0B"
+CONFIG_LINK_ADDR="0x000000"
+CONFIG_TOP_OF_MEMORY="0x304000"
+# CONFIG_CRYSTAL_12_000MHZ is not set
+# CONFIG_CRYSTAL_16_000MHZ is not set
+# CONFIG_CRYSTAL_16_36766MHZ is not set
+CONFIG_CRYSTAL_18_432MHZ=y
+ALLOW_CRYSTAL_18_432MHZ=y
+CONFIG_CRYSTAL="CRYSTAL_18_432MHZ"
+# CONFIG_CPU_CLK_166MHZ is not set
+# CONFIG_CPU_CLK_180MHZ is not set
+# CONFIG_CPU_CLK_200MHZ is not set
+# CONFIG_CPU_CLK_240MHZ is not set
+# CONFIG_CPU_CLK_266MHZ is not set
+CONFIG_CPU_CLK_400MHZ=y
+# CONFIG_CPU_CLK_533MHZ is not set
+ALLOW_CPU_CLK_400MHZ=y
+# DISABLE_CPU_CLK_240MHZ is not set
+# CONFIG_BUS_SPEED_83MHZ is not set
+# CONFIG_BUS_SPEED_90MHZ is not set
+# CONFIG_BUS_SPEED_100MHZ is not set
+CONFIG_BUS_SPEED_133MHZ=y
+# ALLOW_PIO3 is not set
+# CPU_HAS_PMECC is not set
+
+#
+# Memory selection
+#
+CONFIG_SDRAM=y
+# CONFIG_SDDRC is not set
+# CONFIG_DDR2 is not set
+# ALLOW_DATAFLASH is not set
+# ALLOW_FLASH is not set
+ALLOW_NANDFLASH=y
+# ALLOW_SDCARD is not set
+# ALLOW_HSMCI is not set
+# ALLOW_PSRAM is not set
+ALLOW_SDRAM_16BIT=y
+CONFIG_RAM_32MB=y
+# CONFIG_RAM_64MB is not set
+# CONFIG_RAM_128MB is not set
+# CONFIG_RAM_256MB is not set
+# CONFIG_RAM_512MB is not set
+CONFIG_SDRAM_16BIT=y
+# CONFIG_DATAFLASH is not set
+# CONFIG_FLASH is not set
+CONFIG_NANDFLASH=y
+# CONFIG_SDCARD is not set
+CONFIG_MEMORY="nandflash"
+# CONFIG_SDCARD_HS is not set
+
+#
+# NAND Flash configuration
+#
+# CONFIG_ENABLE_SW_ECC is not set
+CONFIG_NANDFLASH_SMALL_BLOCKS=y
+# ALLOW_NANDFLASH_RECOVERY is not set
+CONFIG_BOOTSTRAP_MAXSIZE="23000"
+CONFIG_PROJECT="nandflash"
+CONFIG_LOAD_UBOOT=y
+# CONFIG_LOAD_LINUX is not set
+# CONFIG_LOAD_1MB is not set
+# CONFIG_LOAD_4MB is not set
+# CONFIG_LOAD_64KB is not set
+CONFIG_IMG_ADDRESS="0x00020000"
+CONFIG_IMG_SIZE="0x00060000"
+CONFIG_JUMP_ADDR="0x21F00000"
+
+#
+# U-Boot Image Storage Setup
+#
+CONFIG_IMAGE_NAME="uboot"
+# CONFIG_LONG_TEST is not set
+CONFIG_DEBUG=y
+CONFIG_DEBUG_INFO=y
+# CONFIG_DEBUG_LOUD is not set
+# CONFIG_DEBUG_VERY_LOUD is not set
+CONFIG_HW_INIT=y
+# CONFIG_USER_HW_INIT is not set
+CONFIG_THUMB=y
diff -urN a/driver/Config.in.memory b/driver/Config.in.memory
--- a/driver/Config.in.memory	2012-11-20 17:40:26.000000000 -0500
+++ b/driver/Config.in.memory	2012-12-02 15:55:36.075502553 -0500
@@ -44,7 +44,7 @@
 
 config	ALLOW_SDRAM_16BIT
 	bool
-	default n
+	default y
 
 choice
 	prompt "RAM size"
diff -urN a/driver/Config.in.nandflash b/driver/Config.in.nandflash
--- a/driver/Config.in.nandflash	2012-11-20 17:40:26.000000000 -0500
+++ b/driver/Config.in.nandflash	2012-12-02 15:55:36.075502553 -0500
@@ -3,7 +3,7 @@
 
 config	CONFIG_ENABLE_SW_ECC
 	bool
-	default y
+	default n
 	depends on CONFIG_NANDFLASH && !CPU_HAS_PMECC
 
 config	CONFIG_ENABLE_SW_ECC
diff -urN a/driver/nandflash.c b/driver/nandflash.c
--- a/driver/nandflash.c	2012-11-20 17:40:26.000000000 -0500
+++ b/driver/nandflash.c	2012-12-02 15:55:36.075502553 -0500
@@ -857,7 +857,7 @@
 	for (page = 0; page < 2; page++) {
 		nand_read_sector(nand, row_address + page, buffer, ZONE_INFO);
 		if (*(buffer + nand->pagesize + nand->ecclayout->badblockpos) != 0xff)
-			return -1;
+			return 0; // -1;
 	}
 
 	return 0;
diff -urN a/include/board.h b/include/board.h
--- a/include/board.h	2012-11-20 17:40:26.000000000 -0500
+++ b/include/board.h	2012-12-02 15:55:36.075502553 -0500
@@ -72,4 +72,8 @@
 #include "at91sama5d3xek.h"
 #endif
 
+#ifdef CONFIG_WB40N
+#include "wb40n.h"
+#endif
+
 #endif /* #ifndef __BOARD_H__ */
diff -urN a/main.c b/main.c
--- a/main.c	2012-11-20 17:40:26.000000000 -0500
+++ b/main.c	2012-12-03 19:30:15.692691080 -0500
@@ -59,10 +59,13 @@
 	return 0;
 }
 
+const char version_string[]="Version: 20121203";
+
 static void display_banner (void)
 {
 	dbg_log(1, "\n\nAT91Bootstrap %s\n\n\r",
 			AT91BOOTSTRAP_VERSION" ( "COMPILE_TIME" )");
+	dbg_log(1, "%s\n\r", version_string);
 }
 
 int main(void)
