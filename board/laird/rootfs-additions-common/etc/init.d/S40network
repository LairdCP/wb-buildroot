#!/bin/ash

# Copyright (c) 2015, Laird
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# contact: ews-support@lairdtech.com

# network - init script for all network interface devices
# 20120522
#
# This init-script serves to stop/start/restart all "auto" enabled interfaces
# by checking the '/etc/network/interfaces' (/e/n/i) file.
#
# The /e/n/i file is parsed for '^auto <iface>' at each interface stanza. 
# Alternately, this script can be invoked with a specific interface to act on. 
#
# Other setup-scripts in '/etc/network' and in '/etc/init.d/opt' may be called,
# as necessary to create/remove an interface.  Most operations backgrounded.
#
# Some additional checks are made to determine whether a wired interface-phy
# is really available to work with. This can be an issue with some hw setups.
#
# If available, ifrc.sh (interface-run-config) handles the configuration work.
#
# A testmode is invoked by appending ' -x' in the 1st line of the /e/n/i file.

eni=/etc/network/interfaces

# Interface phy init-scripts.
wifi=/etc/network/wireless.sh
bridge=/etc/network/bridge.sh
pppd=/etc/init.d/opt/S??pppd
g_ether=/etc/init.d/opt/S??g_ether

# Interface activation.
ifconfig='ip link set dev'

# Interface config.
ifrc=/usr/sbin/ifrc

# Logfile rotation.
log=/var/log/nis.log
lf=${rcS_log:-$log}
test -z $rcS_ \
  && { test 0`wc -c < $log` -le 2048 || mv -f $log $log.0; } 2>/dev/null

# Ensure /e/n/i exists and is not empty.
# Fallback to a backup edit, or default copy.
# If all else fails, just create a loopback entry.
test -s $eni \
  || { test -s $eni~ && mv -f $eni~ $eni; } \
  || { rm -f $eni~ && gzip -fdc $eni~.gz >$eni; } \
  || { printf "# $eni - nis\n\nauto lo\niface lo inet loopback\n\n\n" >$eni; }

# Suppress recursive network-init-script messages
{ read -rs pp < /proc/$PPID/comm; } 2>/dev/null
[ "$pp" != "${0##*/}" ] && msg=echo\ -e || msg=:

# Check /e/n/i option for testmode.
{ read -r nopt < $eni; } 2>/dev/null
if [ ${nopt##*${eni}}"" == -x ]
then
  # the 1st line contained the testmode flag
  tm=echo && $tm \ \ $0 $@ [TESTMODE ACTIVE]
fi

# An optionally specified iface is shifted into the device-list to act on, or..
# Parse the /e/n/i for '^auto <iface>' enabled stanzas, in lieu of given iface.
# The device-list order is as in /e/n/i for 'start', and reversed for 'stop'.
case $1 in
  stop|start) ## check /e/n/i 
    ls=; devls=$( sed -n 's/^auto \([a-z][a-z0-9]*\).*$/\1/p' $eni )
    test $1 != start && for dev in $devls; do ls=$dev\ $ls; done && devls=$ls
    ;;
  restart) ## bypass device-list step
    ;;
  *) ## <iface> assumed
    test -n "$1" && devls=$1 && shift
    ;;
esac


iface() {
  # args: <dev> <up/down> <start/stop> [method]
  # bring 'up' -or- 'down' an interface phy
  #
  # report process id for this iface init
  pid=$( sh -c 'echo $PPID' )
  logger -pinfo -s -tnetwork\[$pid\] -- $* 2>&1

  up=false
  dn=false
  case $2 in
    u*) up=true;;
    d*) dn=true;;
  esac
  case $1 in
    lo) ## loopback support
      $tm $ifrc $1 $2 &
      $dn && wait && $tm $ifconfig $1 $2
      ;;
    
    eth*) ## ethernet device support
      # must re-exec using alias for non-wired-ethernet devices; exit if tm
      [ -d /sys/class/net/$1/wireless ] \
      && { $tm exec $0 wl $3; exit 0; }

      # check if wired-interface-phy is really there, when doing 'up'
      if [ ! -f /sys/class/net/$1/uevent ] \
      || grep -q Generic /sys/class/net/$1/*/uevent 2>/dev/null
      then
        # the phy should be identified... (or probably floating hw)
        echo \ \ interface-phy $1 is not available
      else
        # ifrc script handles eth* up, config, or deconfig
        $tm $ifrc $1 $2 $4 &
      fi
      $dn && wait && $tm $ifconfig $1 $2
      ;;

    ppp*) ## point-to-point protocol support 
      $dn && $tm $ifrc $1 $2
      $tm $pppd $3
      $up && $tm $ifrc $1 $2 &
      ;;

    usb*) ## usb-g_ether support
      $dn && $tm $ifrc $1 $2
      $tm $g_ether $3
      $up && $tm $ifrc $1 $2 $4 &
      ;;

    wl*) ## wireless device support
      # maybe using 'wl' as alias for wireless
      # the wireless script handles device up/down
      # and the ifrc script will handle configuration
      $dn && $tm $ifrc -x $1 $2
      $tm $wifi $3
      $up && $tm $ifrc $1 $2 $4 &
      $dn && wait
      ;;

    br*) ## bridge-mode support
      $dn && $tm $ifrc $1 $2
      $tm $bridge $3 $1
      $up && $tm $ifrc $1 $2 $4 &
      ;;

    *) ## unhandled interface name
      echo \ \ ...unhandled interface name
      ;;
  esac
  logger -pinfo -s -tnetwork\[$pid\] -- done 2>&1
}

save_log_of() {
  echo "network: $1 available" >>$lf
  sed 's/\(.*\)network\[[0-9]*\]:.* [rs][et].*/\1\n&\2/' $log.$1 >>$log
  rm -f $log.$1
} 2>/dev/null

check_ifrc() {
  alert= # warn if the ifrc utility is disabled/missing
  if [ -x $ifrc ]
  then
    if [ -f /etc/default/ifrc.disable ]
    then
      alert="/etc/default/ifrc.disable exists"
      ifrc=:
      return 1
    fi
  else
    alert="$ifrc missing - not using ifrc to configure"
    ifrc=:
    return 1
  fi
}


# Set wait or no-wait behavior.
# (may only be required for stops)
wnw=wait

# Act on interfaces in device-list.
act=$1 && shift
case $act in
  stop)
    $msg -n Stopping network interfaces...\ ;
    #
    check_ifrc
    for dev in $devls
    do
      $msg -n $dev\ ;
      iface $dev down $act >>$log; $wnw
    done
    $msg ${alert:+\\\n \ $alert}
    ;;

  start)
    $msg -n Starting network interfaces... $devls
    #
    # option for skipping configuration
    [ "$1" == "manual" ] && { meth=manual; shift; }
    #
    # check bridge-mode
    case $devls in *br*)
      # get bridge ports list if bridge_setup is not manual
      bpls=$( sed -n '/^iface br.* inet/,/^$/\
          {/^[ \t]\+bridge_ports/h;/^[ \t]\+bridge_setup manual/q};$x;$p' $eni )
      #
      test -n "$bpls" \
        && echo -n \ \[${bpls##*ports }\]
    esac
    check_ifrc
    for dev in $devls
    do
      # skip auto starting for bridge-mode ports
      case ${bpls##*ports } in *${dev:-X}*) continue;; esac
      #
      ( iface $dev up $act $meth >>$log.$dev; save_log_of $dev )&
    done
    $msg ${alert:+\\\n \ $alert}
    ;;

  restart)
    $msg -n Restarting network interface... $devls
    $0 $devls stop $@
    $0 $devls start $@
    $msg ${alert:+\\\n \ $alert}
    ;;

  status)
    iface ${devls%% *} xx $act
    ;;

  *)
    echo "This script handles all interface-phy-hw init."
    echo "Calls on other network init-scripts as necessary."
    echo "The /e/n/i file is checked for \"auto <iface>\" stanzas."
    echo "Or, you may specify an <iface> to act on, and <args...>."
    echo "Usage:"
    echo "  ${0##*/} [<iface>] {stop|start|restart|status} [<args...>]"
    exit 1
esac

exit 0

