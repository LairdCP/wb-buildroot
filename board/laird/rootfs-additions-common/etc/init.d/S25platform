#!/bin/sh
# S??platform - an init-script for supporting firmware updates
# Check and pre-configure the wbNNxxx platform for the remote-update-process.
# Optionally handles post-fw_update/select operations.
#
# The process is triggered w/flagfile: /tmp/platform_update_request 
#
# Upon detecting an invalid Ethernet MAC, a temporary address is assigned and
# the flagfile is set.
#
# jon.hefling@lairdtech.com 3-July,2012


do_platform_bootfile_option() {
  cat >$1<<-	\
	platform_bootfile_option
	## $1 - sourced by dhcp configuration script
	## if fw_update not-running and bootfile-flag then begin remote update
	## requested bootfile option should contain url-to-firmware-md5sums-ls
	if [ -n "\$bootfile" ]
	then
	  if ps |grep -q -v "[ ].*update" \
	  && [ -f /tmp/bootfile_ ]
	  then
	    rm -f /tmp/bootfile_
	    fw_update -- 2>/dev/null \
	    && ( fw_update --url \$bootfile 2>&1 \
	        |tee /var/log/update.log >/dev/console )&
	  fi
	fi
	platform_bootfile_option
  touch /tmp/bootfile_
}

do_platform_update_notify() {
  cat >$1<<-	\
	platform_update_notify
	## $1 - wait for network, then notify server of status
	let tries=3
	while sleep 7
	do
	  if ifconfig eth0 2>/dev/null |grep -q "inet addr:[1-9]"
	  then
	    fw_update --ns $2 update_success && break
	    let --tries || break
	  fi
	done
	rm -f $1
	platform_update_notify
  ( /bin/sh $1 )&
}

# Ethernet phy (eth0_linux and macb0_u-boot):
# The MAC address is normally stored in u-boot:env as ethaddr, with a default
# value of 00:17:23:00:00:00, or a later assigned value.  Without this value,
# a totally random address is generated by u-boot, and is apparently written
# to the phy.  In either case, Linux reads the address from the phy.
# Our default value:
MAC=00:17:23:00:00:00

# Extract wb-platform-specific information:
# The wb-version string should be last word in a /etc/*-release file.
# The wb-type and wb-image values come from the kernel cmdline:  wbNNxxx=ab/ab
[ -f /etc/laird-release ] && rfn=laird || rfn=summit
if read -r x </etc/$rfn-release 2>/dev/null
then
  wbv=${x##* }
  read -r x </proc/cmdline
  for xi in $x
  do 
    case $xi in wb[0-9][0-9]*) wbt=${xi%%=*}_; wbi=\ ~${xi##*=};; esac
  done
fi

# Command: 
case $1 in
  
  start)
    echo "Checking platform... ${wbt}${wbv}${wbi}"

    ## determine if the mac address is valid
    read -r mac </sys/class/net/eth0/address
    if [ "$mac" == "$MAC" -o "${mac:0:8}" != "${MAC:0:8}" ]
    then
      echo "  invalid/null Ethernet MAC address detected: $mac"
      random_mac=`dd if=/dev/urandom bs=1 count=3 2>/dev/null \
        |/usr/bin/od -t x1 -N 3 \
        |/bin/sed -n '1s/^....... \(..\) \(..\) \(..\)/00:17:23:\1:\2:\3/p'`

      echo "    storing temporary (randomized) mac address: $random_mac"
      ifconfig eth0 hw ether $random_mac
      #fw_setenv ethaddr $random_mac
      touch /tmp/eth0_has_random_mac
      touch /tmp/platform_update_request
    fi

    ## request dhcp bootfile-string if set
    if [ -f /tmp/platform_update_request ]
    then
      echo "  enabling platform-bootfile-option request (dhcp activated)"
      do_platform_bootfile_option /tmp/platform_bootfile_option
    fi

    ## check for updated platform and settings
    if ups=$( fw_printenv -n updated_% 2>/dev/null )
    then
      mac=
      eval $ups
      fw_setenv updated_%
      # process updated-platform-settings . . .

      if [ -n "$nsap" ]
      then
        echo "  pending server notification of update-status"
        do_platform_update_notify /tmp/platform_update_notify $nsap
      fi

      if [ -n "$at91bs" ]
      then
        md5=$( fw_printenv -n md5_bootstrap 2>/dev/null )
        echo "  updated bootstrap: (${md5:--?-})"
      fi
      
      if [ -n "$u_boot" ]
      then
        md5=$( fw_printenv -n md5_u-boot 2>/dev/null )
        echo "  updated u-boot: (${md5:--?-})"
      fi
      
      if [ -n "$kernel" ]
      then
        md5=$( fw_printenv -n md5_kernel-${kernel} 2>/dev/null )
        echo "  updated kernel-$kernel (${md5:--?-})"
      fi
      
      if [ -n "$rootfs" ]
      then
        md5=$( fw_printenv -n md5_rootfs-${kernel} 2>/dev/null )
        echo "  updated rootfs-$rootfs (${md5:--?-})"
        # probably not necessary, but left here for reference
        : echo -en "    calculating module dependencies..."
        : depmod -a && echo || echo ERROR
      fi
        
      if [ -n "$mac" ]
      then
        echo "  storing newly assigned mac address: $mac"
        fw_setenv ethaddr $mac
        ifconfig eth0 hw ether $mac
      fi

      if [ -n "$fwts" ]
      then
        echo "  transferring system settings from other rootfs"
        fw_select --transfer-system-settings || echo "    ERROR"
      fi
    
      # post-operations cleanup
      #for x in "$rmls"; do rm $x; done  
    fi
    ;;
    
  stop)
    ;;
  
  *)
    echo "Supports automated pre/post firmware-updating for production."
    echo "Process may be triggered w/flagfile: /tmp/platform_update_request."
    echo "Usage: $0 {start|stop}"
    exit 1
esac

exit 0
