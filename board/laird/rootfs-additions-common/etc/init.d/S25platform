#!/bin/sh

# Copyright (c) 2015, Laird Connectivity
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# contact: support@lairdconnect.com

# S??platform - an init-script for supporting firmware updates
# Check and pre-configure the wbNNxxx platform for the remote-update-process.
# Optionally handles post-fw_update/select operations.
#
# The process is triggered w/flagfile: /tmp/platform_update_request
#
# Upon detecting an invalid Ethernet MAC, a temporary address is assigned and
# the flagfile is set.

do_platform_update_notify() {
  cat >$1 <<- EOF \
	## $1 - wait for network, then notify server of status
	let tries=3
	while sleep 7
	do
	  if ifconfig eth0 2>/dev/null |grep -q "inet addr:[1-9]"
	  then
	    fw_update --ns $2 update_success && break
	    let --tries || break
	  fi
	done
	rm -f $1
	EOF

  ( /bin/sh $1 )&
}

do_platform_ethernet_mac_address_check() {
  # The PHY is R/O; MAC address is stored in u-boot:env as 'ethaddr',
  # with a default value like 00:17:23:00:00:00, or an assigned value.
  # A totally random value may be created by the kernel, if it is missing.
  # If the value has a wrong OUI or zero'd, then a new address is generated.
  # The valid OUIs are:

  # determine if ethernet device exist
  [ -f /sys/class/net/eth0/address ] || return

  boot_mac=$(fw_printenv -n ethaddr | tr '[:upper:]' '[:lower:]')

  if [ -n "$boot_mac" ] && [ "$boot_mac" != "c0:ee:40:00:00:00" ]
  then
    read -r mac </sys/class/net/eth0/address
    [ "$mac" != "$boot_mac" ] || return
  fi

  random_mac="$(grep -om1 ethaddr=..:..:.. /dev/mtd1)"
  random_mac=${random_mac#ethaddr=}

  [ -n "$random_mac" ] || random_mac="c0:ee:40"

  oui=$(dd status=none if=/dev/urandom bs=1 count=3 | /usr/bin/od -t x1 -A n)
  random_mac="$random_mac${oui// /:}"

  ip link set address $random_mac dev eth0
  fw_setenv ethaddr $random_mac

  echo "    setting randomized mac address: $random_mac"
}

# Command:
case "$1" in

  start)
    echo -e "Checking platform... \c"
    . /etc/os-release
    echo "${ID} ${BUILD_ID}"
    do_platform_ethernet_mac_address_check

    ## check for updated platform and settings
    if ups=$( fw_printenv -n updated_% 2>/dev/null )
    then
      eval $ups
      fw_setenv updated_%
      # process updated-platform-settings . . .

      if [ -n "$nsap" ]
      then
        echo "  pending server notification of update-status"
        do_platform_update_notify /tmp/platform_update_notify $nsap
      fi

      if [ -n "$at91bs" ]
      then
        md5=$( fw_printenv -n md5_at91bs 2>/dev/null )
        echo "  updated bootstrap: (${md5:--?-})"
      fi

      if [ -n "$u_boot" ]
      then
        md5=$( fw_printenv -n md5_u-boot 2>/dev/null )
        echo "  updated u-boot: (${md5:--?-})"
      fi

      if [ -n "$kernel" ]
      then
        md5=$( fw_printenv -n md5_kernel-${kernel} 2>/dev/null )
        echo "  updated kernel-$kernel (${md5:--?-})"
      fi

      if [ -n "$rootfs" ]
      then
        md5=$( fw_printenv -n md5_rootfs-${kernel} 2>/dev/null )
        echo "  updated rootfs-$rootfs (${md5:--?-})"
      fi

      if [ -n "$fwts" ]
      then
        echo "  transferring system settings from other rootfs"
        fw_select --transfer-system-settings || echo "    ERROR"
      fi
    fi
    ;;

  stop)
    ;;

  *)
    echo "Check ethernet mac address is valid or set a random address."
    echo "Supports automated pre/post firmware-updating for production."
    echo "Process may be triggered w/flagfile: /tmp/platform_update_request."
    echo "Usage: $0 {start|stop}"
    exit 1
esac

exit 0
