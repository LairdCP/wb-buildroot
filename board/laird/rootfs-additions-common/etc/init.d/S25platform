#!/bin/sh

# Copyright (c) 2015, Laird Connectivity
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# contact: support@lairdconnect.com

# S??platform - an init-script for supporting firmware updates
# Check and pre-configure the wbNNxxx platform for the remote-update-process.
# Optionally handles post-fw_update/select operations.
#
# The process is triggered w/flagfile: /tmp/platform_update_request 
#
# Upon detecting an invalid Ethernet MAC, a temporary address is assigned and
# the flagfile is set.
#
# 3-July,2012


do_platform_bootfile_option() {
  cat >$1<<-	\
	platform_bootfile_option
	## $1 - sourced by dhcp configuration script
	## if fw_update not-running and bootfile-flag then begin remote update
	## requested bootfile option should contain url-to-firmware-md5sums-ls
	if [ -n "\$bootfile" ]
	then
	  if ps |grep -q -v "[ ].*update" \
	  && [ -f /tmp/bootfile_ ]
	  then
	    rm -f /tmp/bootfile_
	    fw_update -- 2>/dev/null \
	    && ( fw_update --url \$bootfile 2>&1 \
	        |tee /var/log/update.log >/dev/console )&
	  fi
	fi
	platform_bootfile_option
  touch /tmp/bootfile_
}

do_platform_update_notify() {
  cat >$1<<-	\
	platform_update_notify
	## $1 - wait for network, then notify server of status
	let tries=3
	while sleep 7
	do
	  if ifconfig eth0 2>/dev/null |grep -q "inet addr:[1-9]"
	  then
	    fw_update --ns $2 update_success && break
	    let --tries || break
	  fi
	done
	rm -f $1
	platform_update_notify
  ( /bin/sh $1 )&
}

do_platform_ethernet_mac_address_check() {
  # The PHY is R/O; MAC address is stored in u-boot:env as 'ethaddr',
  # with a default value like 00:17:23:00:00:00, or an assigned value.
  # A totally random value may be created by the kernel, if it is missing.
  # If the value has a wrong OUI or zero'd, then a new address is generated.
  # The valid OUIs are:
  OUI_summit=00:17:23
  OUI_laird=c0:ee:40

  # determine if the mac address is valid
  read -r mac </sys/class/net/eth0/address
  if [ "${mac:9}" == "00:00:00" ] \
  || [ "${mac:0:8}" != "${OUI_summit}" -a "${mac:0:8}" != "${OUI_laird}" ]
  then
    echo "  invalid/null Ethernet MAC address detected: $mac"
    # get this device's OUI via u-boot default or assume via /etc/*-release
    oui=$( grep -om1 ethaddr=..:..:.. /dev/mtd1 || eval echo \$OUI_${rfn} )
    oui=${oui#*=}
    random_mac=`dd if=/dev/urandom bs=1 count=3 2>/dev/null \
      |/usr/bin/od -t x1 -N 3 \
      |/bin/sed -n "1s/^....... \(..\) \(..\) \(..\)/$oui:\1:\2:\3/p"`

    echo "    setting temporary (randomized) mac address: $random_mac"
    ip link set address $random_mac dev eth0
    #fw_setenv ethaddr $random_mac
    touch /tmp/eth0_has_random_mac
    touch /tmp/platform_update_request
  fi
}

# Command:
case $1 in

  start)
    echo -e "Checking platform... \c"
    # Determine *-release file name.
    [ -f /etc/laird-release ] && rfn=laird || rfn=summit
    # Extract wb-platform-specific information:
    # The wb-version string should be last word in a /etc/*-release file.
    # The wb-type=image values read via kernel cmdline as:  wbNNxxx=ab/ab
    if read -r x </etc/$rfn-release 2>/dev/null
    then
      wbv=${x##* }
      read -r x </proc/cmdline
      for xi in $x
      do
        case $xi in wb[0-9][0-9]*) wbt=${xi%%=*}_; wbi=\ ~${xi##*=};; esac
      done
    fi
    echo "${wbt}${wbv}${wbi}"
    do_platform_ethernet_mac_address_check

    ## request dhcp bootfile-string if set
    if [ -f /tmp/platform_update_request ]
    then
      echo "  enabling platform-bootfile-option request (dhcp activated)"
      do_platform_bootfile_option /tmp/platform_bootfile_option
    fi

    ## check for updated platform and settings
    if ups=$( fw_printenv -n updated_% 2>/dev/null )
    then
      mac=
      eval $ups
      fw_setenv updated_%
      # process updated-platform-settings . . .

      if [ -n "$nsap" ]
      then
        echo "  pending server notification of update-status"
        do_platform_update_notify /tmp/platform_update_notify $nsap
      fi

      if [ -n "$at91bs" ]
      then
        md5=$( fw_printenv -n md5_bootstrap 2>/dev/null )
        echo "  updated bootstrap: (${md5:--?-})"
      fi

      if [ -n "$u_boot" ]
      then
        md5=$( fw_printenv -n md5_u-boot 2>/dev/null )
        echo "  updated u-boot: (${md5:--?-})"
      fi

      if [ -n "$kernel" ]
      then
        md5=$( fw_printenv -n md5_kernel-${kernel} 2>/dev/null )
        echo "  updated kernel-$kernel (${md5:--?-})"
      fi

      if [ -n "$rootfs" ]
      then
        md5=$( fw_printenv -n md5_rootfs-${kernel} 2>/dev/null )
        echo "  updated rootfs-$rootfs (${md5:--?-})"
        # probably not necessary, but left here for reference
        : echo -en "    calculating module dependencies..."
        : depmod -a && echo || echo ERROR
      fi

      if [ -n "$mac" ]
      then
        echo "  storing newly assigned mac address: $mac"
        fw_setenv ethaddr $mac
        ifconfig eth0 hw ether $mac
      fi

      if [ -n "$fwts" ]
      then
        echo "  transferring system settings from other rootfs"
        fw_select --transfer-system-settings || echo "    ERROR"
      fi

      # post-operations cleanup
      #for x in "$rmls"; do rm $x; done
    fi
    ;;

  stop)
    ;;

  *)
    echo "Check ethernet mac address is valid or set a random address."
    echo "Supports automated pre/post firmware-updating for production."
    echo "Process may be triggered w/flagfile: /tmp/platform_update_request."
    echo "Usage: $0 {start|stop}"
    exit 1
esac

exit 0
