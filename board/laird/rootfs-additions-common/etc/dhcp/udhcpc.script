#!/usr/bin/env ash
# /etc/dhcp/udhcpc.script
# An event action script for udhcpc.
# jon.hefling@lairdtech.com,20120521,20130113,20131217

eval $udhcpc_Settings 2>/dev/null
test -f /etc/dhcp/udhcpc.conf && . /etc/dhcp/udhcpc.conf
test -f /etc/dhcp/udhcpc.$interface.conf && . /etc/dhcp/udhcpc.$interface.conf
# For the global variables below, values from the exported udhcpc_settings will
# overwrite those from the udhcpc[.<iface>].conf files.  Otherwise, the default
# values will be used from the expanded right-most string.

# Debug support.
LOG_FILE=${log_file:-${LOG_FILE:-'/dev/null'}}
VERBOSE=${vb:-${VERBOSE:-''}}

# Extensions.
VENDORINFO_HOOK=${vendorinfo_hook:-${VENDORINFO_HOOK:-''}}
BOOTFILE_HOOK=${bootfile_hook:-${BOOTFILE_HOOK:-''}}
ONEVENT_HOOK=${onevent_hook:-${ONEVENT_HOOK:-''}}

# DNS resolvconf handling.
RESOLV_CONF=${resolv_conf:-${RESOLV_CONF:-'/etc/resolv.conf'}}
RESOLV_HOOK=${resolv_hook:-${RESOLV_HOOK:-''}}

# The leases file is maintained in a 'dhclient' compatible format, w/last
# event action state, plus the previous lease info and current lease info.
# Assign a file name per interface, and ensure it exists.
# Also create a /tmp destination for the leases file, if necessary.
LEASES_FILE=${leases_file:-${LEASES_FILE:-'/var/lib/dhcp/dhclient.leases'}}
LEASES_FILE=${LEASES_FILE/leases/$interface.leases}
test -d ${LEASES_FILE%/*} || ln -s /tmp ${LEASES_FILE%/*}
test -s ${LEASES_FILE} || printf "# via: $0\n#\n\n" >${LEASES_FILE}

write_lease_info() {
  # calculate expiry info: renew=50%, rebind=87.5%, and expire=100%
  # expiry format is UTC: DayOfWeek Year/Month/Day Hour:Minute:Second [TZ]
  let dateT1=$dateRT+${lease:-0}/2
  let dateT2=$dateRT+${lease:-0}*875/1000
  let dateT3=$dateRT+${lease:-0}

  # default DHCPACK and trim leading zero
  opt53=${opt53:-5} && opt53=${opt53##*0}

  # make new copy of leases file, while retaining other non-lease info,
  # get just the previous lease-entry and then append current lease-entry
  sed '/^leas/,$!p;/^leas/h;/^leas/!H;$!b;x;/^leas/,$p' -n $1 >$1~

  cat >>$1~<<-	\
	lease-entry
	lease {
	  interface "$interface";
	  option fixed-address $ip;
	  option broadcast-address $broadcast;
	  option subnet-mask $subnet;
	  option routers $router;
	  option domain-name "$domain";
	  option domain-name-servers $dns;
	  option dhcp-server-identifier $serverid;
	  option dhcp-message-type $opt53;
	  option dhcp-lease-time $lease;
	   renew `date +%u\ %Y/%m/%d\ %H:%M:%S -d @$dateT1`;
	  rebind `date +%u\ %Y/%m/%d\ %H:%M:%S -d @$dateT2`;
	  expire `date +%u\ %Y/%m/%d\ %H:%M:%S -d @$dateT3`;
	}
	lease-entry
  mv -f $1~ $1
}

do_source() {
  if [ -n "$1" ]
  then
    $vecho "$@" >>$LOG_FILE
    ( source "$@" >>$LOG_FILE 2>&1 ) \
    || $vecho "$1 - error $?" >>$LOG_FILE
  fi
}

fn() { $vecho $@ >>$LOG_FILE; $@; }

exit_err() { echo "__${0} - error: $@" >>$LOG_FILE; exit 1; }

# Event
action=$1
dateRT=`date +%s`
dateT0=`date +%u\ %Y/%m/%d\ %H:%M:%S -d @$dateRT`

# Repair leases file as necessary.
sed '/^ *$/{$!d};1,/^leas/{/^leas/{s/^/\n&/}}' -i $LEASES_FILE

# Update leases file w/ this event action state.
esa=$( printf "# esa: %10.10s - %s" "$action" "$dateT0" )
sed "/^${esa:0:17}/d;/^#/h;/^ *$/{s,^,${esa}\n,}" -i $LEASES_FILE

# Limit log_file size.
if [ -f "$LOG_FILE" ]
then
  let sz=$( { wc -c < $LOG_FILE; } 2>/dev/null )+0
  if [ $sz -le 102400 ]
  then
    read -rs us is </proc/uptime
    printf "% 13.2f __$0 $@\n" $us >>$LOG_FILE
  else
    LOG_FILE=/dev/null
  fi
fi

# Check verbose-mode.
if test -n "$VERBOSE"
then
  #[ -z "${action/bound}" ] \
  #&& export \
  # |sed -n -e "1i\ \ udhcpc: $action" -e '/_/d;s/^export \([a-z].*\)/  \1/p' \
  #  >>$LOG_FILE
  vecho='eval echo \ \ '
else
  vecho=:
fi

case $action in
  deconfig)
    fn ifconfig $interface 0.0.0.0 \
    || exit_err ${interface:-<interface>}?
    # This de-configures the interface, so packets can't use it...
    # And removes (flushes) all relative entries from the routing table.
    # It is still (up) and accessible to the IP layer (kernel-resident).
    ;;

  renew|bound)
    # Ensure the <interface> is set.
    [ -n "$interface" ] || exit_err ${interface:-<interface>?}

    # Copy value to a 'variable_set-value'.
    [ -n "$subnet" ] && netmask_sv="netmask $subnet"
    [ -n "$broadcast" ] && broadcast_sv="broadcast $broadcast"
    [ -n "$bootfile" ] && bootfile_sv="bootfile $bootfile"

    # Call a bootfile-option-handler if set and it exists.
    if [ -f "$BOOTFILE_HOOK" -a -n "$bootfile" ]
    then
      do_source $BOOTFILE_HOOK
    fi

    # Call a vendorinfo-handler if set and it exists.
    if [ -f "$VENDORINFO_HOOK" -a -n "$opt43" ]
    then
      do_source $VENDORINFO_HOOK
    fi

    # Configure the interface.
    fn ifconfig $interface ${ip:-up} $broadcast_sv $netmask_sv \
    || exit_err args: $interface ${ip:-up} $broadcast_sv $netmask_sv

    # Re-write entries in routing table, only for this interface, if set.
    # A metric value may be passed in via settings, or is zero by default.
    if [ -n "$router" ]
    then
      while :
      do
        fn route del default gw 0.0.0.0 dev $interface 2>/dev/null || break
      done
      for x in $router
      do
        fn route add default gw $x dev $interface metric ${metric:-0}
        let metric++
      done
    fi

    # Call on a resolv-conf-handler if setup, or write resolv-conf directly.
    if [ -f "$RESOLV_HOOK" ]
    then
      do_source $RESOLV_HOOK
    elif [ -n "$RESOLV_CONF" ]
    then
      if : >$RESOLV_CONF
      then
        test -n "$domain" && echo search $domain >>$RESOLV_CONF
        for x in $dns; do echo nameserver $x >>$RESOLV_CONF; done
      fi
    fi

    # Update the leases file.
    write_lease_info $LEASES_FILE
    ;;

  leasefail)
    ;;

  nak)
    ;;

esac

# Call an on-event-action-handler if set and it exists.
if [ -f "$ONEVENT_HOOK" ]
then
  do_source $ONEVENT_HOOK
fi

exit 0
