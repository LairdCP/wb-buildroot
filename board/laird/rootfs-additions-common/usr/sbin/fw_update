#!/bin/ash

# Copyright (c) 2015, Laird
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# contact: ews-support@lairdtech.com

# Firmware Update Utility for WB40n/WB45n/WB50n
#
VERSION=2.18
SELF=${0##*/}
X=/dev/null
M=\-\>\|\<\-

# testmode flag/file
TMF=/etc/default/$SELF.test

# binary image files
AT91BS_IMG=at91bs.bin
U_BOOT_IMG=u-boot.bin
KERNEL_IMG=kernel.bin
ROOTFS_IMG=rootfs.bin

# update-list file
FWUL=/tmp/fw.txt

# ucs dgram sendto port
# format is xml or json
NS_PORT=2012
NS_FORMAT=xml


show_usage_info() {
  [ -z "$1" ] && cat << --Usage-Info--
This utility performs flash memory updates of WB firmware using:
  a) locally attached USB Flash Drive or other mounted media, via file copy
  b) anonymous remote server via wget:  (https:// -or- http:// -or- ftp://)

Optionally, the 'fw_select' utility can be used to:
  a) show current settings and image details
  b) switch bootup of kernel-a/b and rootfs-a/b
  c) transfer files from or to the alternate rootfs
  d) restore/recover u-boot_env defaults

Using 'fw_update':
  A firmware-update-list file is used, containing each image md5, name, size.

  Each image source is evaluated to ensure it exists and is of non-zero length.
  And the MD5sum of the image is compared to the stored value in Flash to avoid
  unnecessary updating.  (use '-f' flag to avoid prompt for overwriting)

  Redundant kernel/rootfs-a/b flash partitions are expected to exist, and will
  be alternately targeted for updating, then selected for next bootup.

  If the kernel/rootfs update does not successfully complete, then you should
  be able to re-attempt the update again.  (use 'fw_select' for more options)
  Note: the at91bs and u-boot images should only be updated if very necessary.

  Use the '-c' flag, to also check each flashed image update, for matched md5.

  The '-f' flag will assume image overwrites and avoid pings to the server.

  Using '-d', allows just downloading the update-list, for optional editing.

  The update procedure may be controlled via the firmware-update-list, by also
  including lines with any flag options and an optional shell script-&-args.
                                      (for more info, try '--usage ${FWUL##*/}')
Extended operations:
  Automatic after updating:  notify, transfer, and reboot

  Disable extended operations with the '-x' flag.  For control of a specific
  operation, append first-letter like: '-x[ntr]'.

  If file '/tmp/alt_rootfs.transfer-list' exists,
  then 'fw_select --transfer push' is performed.  (see 'fw_select' for detail)

  If updating remotely, notification is sent back to the serving host:$NS_PORT.
  This UDP datagram is $NS_FORMAT formatted w/ ethaddr, build, status, message.
  The status word is one of: update_(failure|pending|success)

Example usage:                                   (to see options, try '-h')
  fw_update /media/usb0/<path/to>/${FWUL##*/}
           (..use local method)

  fw_update ftp://<server/path/to/>/${FWUL##*/}
           (..use remote ftp method)

  fw_update -xt http://<server/path/to/>/${FWUL##*/}
           (..use remote http method, and skip transfer)

  fw_update -xr --url http://<server/path> /root/fw.txt
           (..use local list w/remote http method, no reboot)

  fw_update -f -c -xnr <path/to>/${FWUL##*/}
           (..force, check, transfer, but dont notify or reboot)

  fw_update -d http://<server/path/to/>/${FWUL##*/}
           (..download the update-list, then can edit $FWUL and re-run )

  fw_update --url http://http://<server/path>
           (..re-run using $FWUL and with applied images server link )
End
--Usage-Info--

  [ -n "$1" ] && cat << --Usage-Info--
A firmware-update-list file '${FWUL##*/}' is always required for operation.
  It may be any name with a '.txt' extension, and is processed as $FWUL.

  The first line of a firmware-update-list may have '# <wb-target-version>'
  and a check is then made to match the WB platform for the firmware-update.

  Each listed image may include the absolute, or a relative, url/path/name.
  Specific images or lines may be commented-out w/'#', and thus skipped over.

  A section for a 'transfer-list' is defined with a comment using this word,
  and ending with a blank line. See 'fw_select --transfer help' for details.

  Flags in the firmware-update-list are used in lieu of any on the cmdline.
  After updating the images, an optional shell invocation plus args, is run.

Format of ${FWUL##*/}:
  # <wb??n-target-version>
  # comment lines begin with '#' char
    <md5sum>  <[url/][path/]image>  [<bytes>]
    shell <invocation and args to run>
    flags <cmdline flags to apply>

Example ${FWUL##*/}:
  # wb45n-laird_fips-3.4.1.105
  # example of a wb45n update with bootstrap disabled
  # ab8d615dac1be37e71b42d1c29f10a9d  at91bs.bin  11444
    0da1ebd394521581857702facf305129  u-boot.bin  359028
    06ea0dfeb5b0d9215ac74c0da2b18af1  kernel.bin  2150318
    6bcea984d8994f7a60ca5ec1d9438413  rootfs.bin  25034752

  # no auto reboot and force updating
    flags -xr -f

  # run a user script on the WB as part of the post-update step
    shell /root/my_script -a -b -c

  # transfer-list
    /etc/summit/profiles.conf
    /etc/network/interfaces
    /root/my_file
    /usr/local/bin/my_app

End
--Usage-Info--
}

xml_notification() {
  name=${wb:-wb}
  [ -n "$1" ] && status="<status>$1</status>"
  [ -n "$2" ] && message="<message>$2</message>"
  cat <<__END-OF-XML-NOTIFICATION-BLOCK
  <$name id=`grep -so ..:. /sys/class/net/eth0/address 2>$X`>
  <version>`grep -m1 -so '[^ ]*$' /etc/\*-release 2>$X`</version>
    $status
    $message
  </$name>
__END-OF-XML-NOTIFICATION-BLOCK
}

json_notification() {
  name=${wb:-wb}
  [ -n "$1" ] && status="\"status\": \"$1\","
  [ -n "$2" ] && message="\"message\": \"$2\""
  cat <<__END-OF-JSON-NOTIFICATION-BLOCK
  {\"$name\": {
    \"mac\": \"`grep -so ..:. /sys/class/net/eth0/address 2>$X`\",
    \"version\": \"`grep -m1 -so '[^ ]*$' /etc/\*-release 2>$X`\",
    $status
    $message
  }
__END-OF-JSON-NOTIFICATION-BLOCK
}

ask() {
  # preset last param for optional expected reply and flush input
  [ "${1:0:2}" == "-e" ] && { e=${1:2}; shift; } || e=
  IFS= read -rst1 -n11
  eval ${@##* }=$e

  # prompt
  read "$@"
  p=${1/*\[/[}
  test -n "$e" \
    && echo -e "${p//?/\b}[${a:-$e}]\033[K"

  # test if reply is/was expected
  eval ans=\$${@##* }
  test "$ans" == "$e"
}

exit_error() {
  let error && $x_notify && $0 --n $nsap update_failure
  echo -e "${1:+  ...$@}"
  if [ -n "$url" ]
  then
    grep -s . /tmp/fwu.err
    mv $FWUL $FWUL~ 2>$X
    rm -f /tmp/fwu.[f]*
  fi
  exit 1
} >&2

verbose() {
  $o_verbose && echo -e "$@" || :
} 2>$X

await() {
  let ax=$1 eto=$2+0
  while [ -f /proc/$ax/comm ] && let eto--
  do
    $o_verbose && printf $3
    usleep 999876
  done &
} 2>$X

# check testmode file/flag
test -f "$TMF" && tm=echo\ -e || tm=
grep -sq verbose "$TMF" && set -x

ls -l /bin/ash |grep -qo busybox || exit_error "busybox-ash required"
# check/parse description-of-machine: <string> and determine settings
x=$( grep -s 'Workgroup Bridge' /proc/device-tree/model \
  || sed -n 's/Hardware[ \t:]*\(.*\)/\1/p' /proc/cpuinfo )
case $x in
  *'Workgroup Bridge 40N'*) ### arch/arm/mach-at91/board-wb40n.c
    wb=wb40n
    NWBPS=1250000
    ;;
  *'Workgroup Bridge 45N'*) ### arch/arm/mach-at91/board-dt.c
    wb=wb45n
    NWBPS=2000000
    ;;
  *'Workgroup Bridge 50N'*) ### arch/arm/boot/dts/wb50n.dts
    wb=wb50n
    NWBPS=4000000
    ;;
  *) ### architecture unknown
    echo -e : ${x:-\\\r\\\c} >&2
    grep -om1 ': ARM' /proc/cpuinfo >&2 \
      || sed -n '/name/{s/model name.*\(: .*\)/\1/p;q}' /proc/cpuinfo >&2
    exit_error "unsupported, must be Laird WB platform"
    ;;
esac

scan_partitions() {
# find settings for imageset a/a, add to get b/b
for x in `grep -ls nand /sys/class/mtd/*/type`
do
  mtd=${x%%/type}
  read -rst1 name < $mtd/name
  read -rst1 size < $mtd/size
  mtd=${mtd##/sys/class/mtd/mtd}
  let mtd || addr=0
  case $name in
    kernel-a) KIA=$( hexify $addr ) KIS=$( hexify $size ) KIP=$mtd;;
    rootfs-a) RIP=$mtd;;
  esac
  let addr+=$size
done
UBM=$( fw_printenv bootcmd |sed 's/.*nand read \(0x[^ ]*\) .*/\1/' )

let ${UBM:-0} ${KIP:-0} ${KIA:-0} ${KIS:-0} ${RIP:-0} \
  || exit_error "cannot determine mapping for kernel/rootfs"
}

parse_flags() {
  case $1 in
  -nv) ## not verbose
    o_verbose=false
    ;;
  -q) ## quiet, no stdout
    o_verbose=false
    o_quiet=true
    exec 1>$X
    ;;
  -f) ## force image overwriting
    o_force=true
    o_ping=false
    ;;
  -c) ## check md5's of the updated images
    o_check=true
    ;;
  -d) ## don't update, just download the update-list
    o_dnload=true
    ;;
  -x*) ## exit after update, disable notify|transfer|reboot '-x[ntr]*'
    [ -z ${1/-x} ] || [ x == ${1/*n*/x} ] && x_notify=false
    [ -z ${1/-x} ] || [ x == ${1/*t*/x} ] && x_transfer=false
    [ -z ${1/-x} ] || [ x == ${1/*r*/x} ] && x_reboot=false
    ;;
  *) # not a flag
    return 1
  esac
}

# flags/options/switches
while [ -n "$1" ]
do
  case $1 in
  --usage) ## see detailed usage info and examples
    show_usage_info $2
    exit 0
    ;;

  --show) ## show the image md5's in flash for comparison
    echo "$wb - md5's" ${tm:+\[testmode\]}
    echo -e "\n  u-boot_env:"
    fw_printenv |sed '/^md5_/!d;s/md5_\(.*\)=\(.*\)/    \2  \1/'
    echo
    echo "  ${2:-$FWUL}:" `test -s "${2:-$FWUL}" || echo n/a` || exit 1
    sed -e '/[0-9a-f]\{32\}/!d;s/\([^ ]\+\)\///' \
        -e 's/\(^[ #]*\)\([^ ].*bin\)[ #]*\([0-9a-f]\{32\}\)/ \3  \2/' \
        -e 's/^[ #]*\(.*bin\)\(.*\)/    \1/' ${2:-$FWUL} 2>$X
    echo
    exit 0
    ;;

  --url) ## specify images server link for a local update-list
    test -n ${isl:=${2%/}}"" && shift \
      || exit_error "specify images server link for a local update-list"
    ;;

  --tm*) ## enable persistent testmode, or disable with '--tm off'
    [ "off" == "$2" ] && rm -fv $TMF || { mkdir -p ${TMF%/*}; echo $2 >$TMF; }
    exec $0 --
    ;;

  --n*) ## notify remote via udp '--n <addr:port> <status> [<message>]'
    if [ $# -gt 2 -a ":" == "${2/*:*/:}" ]
    then
      echo -e "\rNotifying update configuration server: $3"
      busybox nc -u $2 -e echo $( ${NS_FORMAT}_notification $3 "$4" ) && exit 0
      echo "  ...failed tx: $2"
    fi
    exit 1
    ;;

  --|--version) ## affirm executable, version and mode
    echo $SELF v$VERSION ${tm:+\[testmode\]}
    exit 0
    ;;

  --help|-h) # quick help
    echo -e "Flags:  \t\t\t(*asterisk denotes variations of a flag/option)"
    sed -n '/^parse_fla/,/^ esac/s/\(^  -[a-z*]\+\).*) ## \(.*\)/  \1   \2/p' $0
    echo -e "Options:"
    sed -n '/^#.*options/,/^ esac/s/\(^  --[a-z*]*\).*) ## \(.*\)/\1    \2/p' $0
    echo -e "Usage:\n  fw_update [flags..] [option|<path/to/fwul>]\n"
    exit 0
    ;;

  -nv|-[qfcd]|-x*) # stow optional flags
    [ "-q" == "$1" ] && o_verbose=false
    fls=${fls:+$fls }${1}
    ;;

  -*) # invalid option/flag, raise
    exit_error "unknown option/flag or mode specified: [$1]"
    ;;

  *) # remaining arg is url/path/to/fwul
    break
  esac
  shift
done
url=$1
shift $#
rm -f /tmp/fwu.*
set -o pipefail

wget() {
  if [ -z $wget_version ]
  then
    # determine wget version and set appropriate flags
    # ..option --spider is supported by both, but busybox version is crippled
    # ..option -t<retries> is not documented for busybox version
    # ..connect-timeout appears to be unsupported/broken
    # ..error messages are generally different
    case $( command wget --version 2>&1 |sed -n '/^BusyBox\|^GNU/s/\ .*//p' ) in
      BusyBox) wget_version=bb; wget_opt='-T4 -t1';;
      GNU) wget_version=gnu; wget_opt='-T4 -t1 -nv --no-check-certificate';;
      *) exit_error "wget utility is required";;
    esac
  fi
  # workaround for spider mode using gnu version requires verbosity override
  [ "$1" == "--spider" -a "$wget_version" == "gnu" ] && wget_v=-v || wget_v=

  command wget ${wget_opt} ${wget_v} $*
} 2>>/tmp/fwu.err

copy() {
  # args: <src> -O <dst>
  ${3:+${*/* -O */eval >$3 cat $1}}
} 2>>/tmp/fwu.err

ping_server() {
  # extract host from given url
  set -- ${1##*//}
  host=${1%%/*}
  $o_ping \
    || return 0
  ping -W4 -c1 $host >$X
} 2>>/tmp/fwu.err

# assume remote
test -z "$url" \
  && { [ fwul == "${isl/*.txt/fwul}" ] && url=$isl; isl=${isl/*.txt}; }
  ## use the images-server-link as url if contains the fwul, then trim

# assume local
test -z "$url" \
  && { url=`pwd`/${FWUL##*/}; [ -f $url ] || url=${FWUL}; }
  ## attempt to guess local path for the fwul when not given

# download/copy the firmware-update-list
if [ remote == "${url/*:*/remote}" ]
then
  ping_server $url \
    || exit_error "no response from server: $host"

  # an optional notify-server-address-port
  # may be appended to the url as:
  #     ?nsap=<host>[:<port>]
  nsap=${url#*\?nsap=}; nsap=${nsap##*$host*}; nsap=${nsap:-$host:$NS_PORT}

  # cleanup/format the host url[:port]
  url=${url%%\?*}; url=${url%:[^\/]*}
  port=${url#${url%:[^\/]*}}
  url=${url%$port}

  test fwul == "${url/*.txt/fwul}" \
    || exit_error "firmware-update-list required, try '--usage'"

  verbose "Downloading '${url##*/}' from $host to $FWUL"
  rm -f $FWUL
  wget $url$port -O $FWUL \
    || exit_error "could not retrieve \"${url##*/}\""

else
  # assuming fwul path to be of a mounted filesystem
  # look for and copy the fwul to /tmp
  [ -d $url ] && url=${url%/}/${FWUL##*/}
  [ -f $url ] || exit_error "firmware-update-list? ${url##*/}"
  if [ "$url" != "$FWUL" ]
  then
    verbose "Copying '${url##*/}' from ${url%/*}/ to $FWUL"
    copy $url -O $FWUL
  fi
fi
test -s "$FWUL" \
  || exit_error "zero-length file: $FWUL"

# process any flags; given via cmdline preferred over fwul
flags=$( sed -n '/^ *fl[ags]* /{s/.*fl[ags]* //p;q}' $FWUL )
for f in ${fls:-$flags}; do parse_flags $f; done

# bail if set option download for remote fwul
test remote == "${url/*:*/remote}" \
  && ${o_dnload:-false} \
  && exit 0

verbose "Processing firmware-update-list \c"
# convert from older format if necessary
if grep -q ".*\.bin\ \+[0-9a-f]\{32\}" $FWUL
then
  sed -e '/[0-9a-f]\{32\}/{s/ *\([^ #]\+\)\///}' \
      -e '/[0-9a-f]\{32\}/{s/ *\([^ #]\+\) *\([0-9a-f]\{32\}\)/\2  \1/}' \
      -e 's/#\+ */# /;s/^[^ #] */  &/' \
      -i $FWUL && txt="*"
fi

# firmware-update-list
if [ -s "$FWUL" ]
then
  ## confirm target wb?? match to update upon given version-tag
  vt=$( sed -n '1s/^[# ]*\([^ ]*wb[45][05][^ ]\+\)/\1/p' $FWUL )
  if [ -n "$vt" ]
  then
    test yes == "${vt/*$wb*/yes}" \
      || exit_error "aborted, $wb update mismatch: $vt"
    txt=$txt\\\n"  ...updating to $vt"
  fi

  ## parse md5, name, length and check if absolute url/path or convert
  set -- $( sed -n "/^[^#] *[0-9a-f]\{32\}\ .*${AT91BS_IMG}/p" $FWUL )
  eval AT91BS_MD5=$1 AT91BS_URL=$2 AT91BS_LEN=${3:-0}
  test -n "${2}" && [ "${2:0:1}" != "/" -a "${2/*:*/:}" != ":" ] \
    && AT91BS_URL=${isl:-${url%/*}}/${2/^.\/}

  ## parse md5, name, length and check if absolute url/path or convert
  set -- $( sed -n "/^[^#] *[0-9a-f]\{32\}\ .*${U_BOOT_IMG}/p" $FWUL )
  eval U_BOOT_MD5=$1 U_BOOT_URL=$2 U_BOOT_LEN=${3:-0}
  test -n "${2}" && [ "${2:0:1}" != "/" -a "${2/*:*/:}" != ":" ] \
    && U_BOOT_URL=${isl:-${url%/*}}/${2/^.\/}

  ## parse md5, name, length and check if absolute url/path or convert
  set -- $( sed -n "/^[^#] *[0-9a-f]\{32\}\ .*${KERNEL_IMG}/p" $FWUL )
  eval KERNEL_MD5=$1 KERNEL_URL=$2 KERNEL_LEN=${3:-0}
  test -n "${2}" && [ "${2:0:1}" != "/" -a "${2/*:*/:}" != ":" ] \
    && KERNEL_URL=${isl:-${url%/*}}/${2/^.\/}

  ## parse md5, name, length and check if absolute url/path or convert
  set -- $( sed -n "/^[^#] *[0-9a-f]\{32\}\ .*${ROOTFS_IMG}/p" $FWUL )
  eval ROOTFS_MD5=$1 ROOTFS_URL=$2 ROOTFS_LEN=${3:-0}
  test -n "${2}" && [ "${2:0:1}" != "/" -a "${2/*:*/:}" != ":" ] \
    && ROOTFS_URL=${isl:-${url%/*}}/${2/^.\/}

  ## parse other options
  shell=$( sed -n '/^ *sh[ell]* /{s/.*sh[ell]* //p;q}' $FWUL )

  ## parse/copy transfer-list items to file
  sed -n '/transfer-list/,/^$/p' $FWUL >>/tmp/alt_rootfs.transfer-list
else
  exit_error "firmware-update-list error"
fi
mv $FWUL $FWUL~ 2>$X
verbose "$txt"

# foreach set default if unset
o_verbose=${o_verbose:-true}
o_quiet=${o_quiet:-false}
o_force=${o_force:-false}
o_ping=${o_ping:-true}
o_check=${o_check:-false}
x_notify=${x_notify:-true}
x_transfer=${x_transfer:-true}
x_reboot=${x_reboot:-true}

# set/check env tool
fw_printenv=fw_printenv
fw_setenv=$tm\ fw_setenv
if ! $fw_printenv >$X
then
  [ -f /etc/fw_env.config ] \
  || txt="fw_printenv support missing: /etc/fw_env.config"
  exit_error $txt
fi
fw_select=$tm\ fw_select

# check for a previous pending update
eval $( $fw_printenv -n updated_% 2>$X \
      |grep -o 'at91bs=.\|u_boot=.\|kernel=.\|rootfs=.' )
if [ -n "$at91bs$u_boot$kernel$rootfs" ]
then
  echo -e "Previous update (pending) detected:"
  $fw_printenv |sed -e '/md5_/!d' \
                    -e "${at91bs:+;s/at91bs/1&/p}" \
                    -e "${u_boot:+;s/u-boot/2&/p}" \
                    -e "${kernel:+;s/kernel-$kernel/3&/p}" \
                    -e "${rootfs:+;s/rootfs-$rootfs/4&/p}" -n \
               |sort \
               |sed 's/md5_[1234]/      /;s/=/\t/'
  # revert?
  if ! $o_force
  then
    ask -e"n" -p"Proceed? [y/N ..5s]" -rst5 -n1 a
    [ "$a" == "y" ] || exit_error "need to reboot"
  fi
  echo -e "  ...proceeding"
  fw_select -- >$X 2>&1 \
    || exit_error "...fw_select required to revert kernel/rootfs-a/b swap"

  if [ -n "$kernel" ]
  then
    echo -e "Reverting kernel-a/b swap\n  ...\c"
    [ $kernel != a ] && $fw_select kernel-a || $fw_select kernel-b
  fi
  if [ -n "$rootfs" ]
  then
    echo -e "Reverting rootfs-a/b swap\n  ...\c"
    [ $rootfs != a ] && $fw_select rootfs-a || $fw_select rootfs-b
  fi
  eval at91bs= u_boot= kernel= rootfs=
fi

bootcmd_x() {
  [ -z "$UBM" ] && scan_partitions

  # parse formatted kernel-image-address and also copy any boot commands
  eval $( BC_kia=; BC_boot=; F='0x[0-9A-Fa-f]*'; $fw_printenv -n bootcmd \
        |sed -n "s/nand read $F \($F\) $F[; ]*\(.*\)/BC_kia=\1 BC_boot='\2'/p" )

  if [ -z "$BC_kia" ]
  then
    exit_error "incompatible bootcmd set in u-boot_env, use fw_select"
  fi

  BC_kia=$( hexify $BC_kia )
  return 0
}

kernel_x() {
  # report the kernel partition booted from... (pseudo-static)
  if x=0 bootcmd_x
  then
    iszero $BC_kia-$KIA && let x=$KIP || let x=$KIP+1
  fi
  echo $x
}

rootfs_x() {
  # report the rootfs partition being used... (actual)
  sed -n 's/.*ubi.mtd=\(.\).*/\1/p' /proc/cmdline
}

# special functions to evaluate arithmetic expressions
iszero() { ! let ${1:-0} && return 0 || return 1; }
hexify() { let x=${1:-0}; printf "0x%08x" $x; }

assert_image() {
  # args: <image_name_var> <label>
  sz=
  local src md5
  echo -e "${tm:+\n}Checking $2 \c"
  : >/tmp/fwu.err
  eval src=\$${1}_URL
  test -n "$src" \
    || { echo - update n/a; return 1; }

  # determine if image file is accessible
  if [ remote == "${src/*:*/remote}" ]
  then
    ping_server $src \
      || { echo - server n/a; let errors++; return 2; }

    # check image file is really available
    # firstly try to get file info via spider
    # fallback with read/count method on failure
    #
    #==> SIZE kernel.bin ... 1782232 .....ftp method
    #Length: 24133632 (23M) [application/octet-stream] .....http method
    #
    wget --spider $src$port #2>>fwu.err
    sz=$( sed -n 's/.*SIZE.* \([0-9]*\)/\1/p;s/Length: \([0-9]*\)\ .*/\1/p' \
                                                                  /tmp/fwu.err )
    if [ -z "$sz" ] \
    && wget -q -O - $src$port |grep -q .....
    then
      # try reading file when length n/a via spider as a last resort
      eval let sz=\$${1}_LEN || sz=$( wget -q -O - $src$port |wc -c )
    fi
  else
    # method local
    if [ -s $src ]
    then
      # get file info for method local:
      eval let sz=\$${1}_LEN || sz=$( wc -c < $src )
    fi
  fi
  let sz+=0 \
    || { echo -e - file n/a\\\n\\\t\ $src;
         grep -s . /tmp/fwu.err; let errors++; return 3; }

  eval md5=\$${1}_MD5
  test -n "$md5" \
    || { echo - md5sum n/a; let errors++; return 3; }

  # compare the md5_of_image with the md5_in_flash
  if [ "$md5" == "`$fw_printenv -n md5_$image 2>$X`" ]
  then
    if $o_force
    then
      echo - overwriting
    else
      ask -e"n" -p"- overwrite? [y/N ..9s]" -rst9 -n1 a
      [ "$a" == "y" ] || return 1
    fi
  else
    echo
  fi
  unset md5 src

  # estimate time from nand-write-bytes-per-sec
  let et=$sz/$NWBPS+1 && $o_check && let et+=$et/2

  return 0
}

flash_image() {
  # args: <image_url>
  #
  echo -e "Updating $image \c"
  : >/tmp/fwu.err
  mtdinfo /dev/$tp |grep -q 'writabl.*tru' \
    || { echo -e "(protected)\n"; return 1; }
  if ${ubifs:=false}
  then
    verbose "(ubi)"
    ${tm:-:} ubiformat -y /dev/$tp -S $sz -f -
    ${tm:-:} \ \ ^--- $1
    verbose "  (${et}s) erasing/writing\c"
    ${tm:+:} ubiformat -y /dev/$tp -S $sz -f - < /tmp/fwu.fifo 2>&1 \
              |sed 's/.*\r//;s/e  u.*: w/e  \n  w/' >>/tmp/fwu.ubifs &
  else
    verbose ""
    ${tm:-:} flash_erase -q /dev/$tp 0 0
    ${tm:-:} nandwrite -mpq /dev/$tp
    ${tm:-:} \ \ ^--- $1
    verbose "  (${et}s) erasing\c"
    ${tm:+:} flash_erase -q /dev/$tp 0 0
    verbose "/writing\c"
    ${tm:+:} nandwrite -mpq /dev/$tp < /tmp/fwu.fifo &
  fi
  ${tm:+eval wc -c < /tmp/fwu.fifo >>/tmp/fwu.err & }
  await $! $et _
  case $1 in
    *://*) ## using a transfer protocol
    txt="image download/flash interrupted"
    wget $1$port -O /tmp/fwu.fifo
    ;;
    *) ## assume local copy
    txt="image copy/flash failed"
    copy $1 -O /tmp/fwu.fifo
  esac
  test $? -eq 0 \
    && wait $ax \
    || exit_error $txt
  return 0
}

test_image() {
  # args: <image_md5>
  #
  local md5
  if $o_check
  then
    verbose "_reading\c"
    if $ubifs
    then
      { mkdir -p /mnt/$tp
        ts=$( date +"%b %e %H:%M:%S" )
      { dmesg -D; set -x; echo; } 2>$X
      : --- triggered ubifs scan and report ---
        ubiattach -p /dev/$tp >$X
      { ubi=$( ubinfo |sed -n '/Present/s/.* \(ubi.\)/\1/p' ); } 2>$X
      { logread |sed -n "/$ts/"',${s/^.*kernel: //p}'; } 2>$X
        ubinfo /dev/${ubi}_0 |{ sed '/^[TS]/!d'; } 2>$X
      { echo; } 2>$X
      : --- integrity check using mount ro and crc32 ---
        mount -t ubifs /dev/${ubi}_0 -r /mnt/$tp \
          && ubicrc32 /dev/${ubi}_0
        umount /mnt/$tp
        ubidetach -p /dev/$tp
      { dmesg -E; set +x; echo; } 2>$X
      } >>/tmp/fwu.ubifs 2>&1 &
      await $! $et _ && wait
      test -n "`sed -n '/^State:.*OK/,${/^0x......../p}' /tmp/fwu.ubifs`"
    else
      head -c $sz /tmp/fwu.fifo |md5sum >/tmp/fwu.md5 &
      await $! $et _
      nanddump -qf /tmp/fwu.fifo --omitoob --bb=skipbad /dev/$tp 2>>/tmp/fwu.err
      # legitimate exit is zero or sigpipe
      [ 0 -eq $? -o $? -eq 141 ]; error=$?; wait
      read md5 in_flash < /tmp/fwu.md5 && rm /tmp/fwu.md5
      test "$md5" == "$1"
    fi
  fi
  if ! let error+=$?
  then
    echo ^OK
  else
    echo ^FAIL
    grep -s . /tmp/fwu.err
    if $o_check
    then
      echo "  ${md5:-${1//?/ }}  $image"
      echo "  $1  expected"
      x_reboot=false
    fi
  fi
  let errors+=error
  eval ${tm:+error=0}
  unset md5
  return $error
}

# We assert/flash/test each of the platform image partitions in order:
# bootstrap-loader, uboot-bootloader, linux-kernel-a/b, linux-rootfs-a/b
#
# In testmode, no actual writes to Flash, nor do any extended operations.
${tm:-:} "\n  testmode active\n  ...remove '$TMF'\n     or try: '--tm off'" >&2

# be certain alt_rootfs is unmounted
fw_select --transfer access off >$X

# wr/rd require fifo
mkfifo /tmp/fwu.fifo 2>$X

# get info
bootcmd_x

tp=mtd0
image=${AT91BS_IMG%%.*}
if assert_image AT91BS "Bootstrap"
then
  if flash_image $AT91BS_URL
  then
    if test_image $AT91BS_MD5
    then
      if $fw_setenv md5_$image $AT91BS_MD5
      then
        $fw_setenv bootstrap
        at91bs=x
      fi
    fi
  fi
fi

tp=mtd1
image=${U_BOOT_IMG%%.*}
if assert_image U_BOOT "Bootloader"
then
  if flash_image $U_BOOT_URL
  then
    if test_image $U_BOOT_MD5
    then
      if $fw_setenv md5_$image $U_BOOT_MD5
      then
        u_boot=x
      fi
    fi
  fi
fi

let kip_a=$KIP
let kip_b=$KIP+1
case `kernel_x` in
  # target alt kernel partition
  $kip_a) tp=mtd${kip_b}; ab=b; kia=$( hexify $KIA+$KIS );;
  $kip_b) tp=mtd${kip_a}; ab=a; kia=$( hexify $KIA );;
esac
image=${KERNEL_IMG%%.*}-$ab
if assert_image KERNEL "Linux Kernel"
then
  if flash_image $KERNEL_URL
  then
    if test_image $KERNEL_MD5
    then
      if $fw_setenv md5_$image $KERNEL_MD5
      then
        kernel=$ab
        bootcmd="nand read $UBM $kia $KIS; $BC_boot"
      fi
    fi
  fi
fi

let rip_a=$RIP
let rip_b=$RIP+1
case `rootfs_x` in
  # target alt rootfs partition
  $rip_a) tp=mtd${rip_b}; ab=b;;
  $rip_b) tp=mtd${rip_a}; ab=a;;
esac
image=${ROOTFS_IMG%%.*}-$ab ubifs=${UBIFS:-true}
if assert_image ROOTFS "Root Filesystem"
then
  if flash_image $ROOTFS_URL
  then
    if test_image $ROOTFS_MD5
    then
      if $fw_setenv md5_$image $ROOTFS_MD5
      then
        rootfs=$ab
        bootargs=$( $fw_printenv -n bootargs \
                  |sed "s/ubi.mtd=./ubi.mtd=${tp##*mtd}/" )
      fi
    fi
  fi
fi

${tm:-:}
test -n "$shell" \
  && echo shell: \[$shell\] \
  && { test -f "${shell%% *}" && sh - ${shell} || exit_error "failure"; }

if $x_notify \
&& $0 --n $nsap update_pending
then
: ${uc:=$( busybox nc -w5 -lp${nsap/*:} 2>$X |sed -n "/^$M/s/${M//?/.} *//p" )}&
  verbose "Awaiting reply\c"
  await $! 5 .
  wait
  verbose ${uc:+OK}
  $fw_setenv _ucs ${uc}
else
  nsap=
fi

echo -e Sync\\\047ing
$fw_setenv updated_% \
     ${at91bs:+at91bs=$at91bs} \
     ${u_boot:+u_boot=$u_boot} \
     ${kernel:+kernel=$kernel} \
     ${rootfs:+rootfs=$rootfs} \
     ${nsap:+nsap=$nsap}

test -n "$rootfs" -a -n "$bootargs" \
  && $fw_setenv bootargs $bootargs

test -n "$kernel" -a -n "$bootcmd" \
  && $fw_setenv bootcmd $bootcmd

sync

if $x_transfer
then
  if [ -n "$rootfs" ] \
  && fw_select -- >$X 2>&1
  then
    txt="Transfer system files"; false
    if [ -r /tmp/alt_rootfs.transfer-list ]
    then
      echo "$txt - found transfer-list"
    else
      if $o_force
      then
        echo "$txt"
      else
        ask -e"n" -p"$txt? [y/N ..5s]" -rst5 -n1 a
        [ "$a" == "y" ]
      fi
    fi
    test $? -eq 0 \
      && $fw_select --transfer push \
      && echo -e \ \ ...pushed
  fi
fi

if $x_reboot
then
  IFS= read -rst1 -n11 a
  for et in 4 3 2 1
  do
    unset a
    $o_force && break
    echo -e "Hit any key to avoid reboot in ${et}s ...\c"
    IFS= read -rst1 -n1 a
    echo -e \\\033[1K\\\r\\\c
    [ -n "$a" ] && break
  done
  test -z "$a" \
    && { echo -e \ \ reboot >&2; ${tm:+:} reboot; exit; }
fi

${tm:-:} \\\n$SELF v$VERSION \[testmode\]
let $errors+0 && echo "Errors:$errors"
echo "Done."
exit $errors
