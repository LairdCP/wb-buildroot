From 300acdf493b5eca60c89a1cb305f1fe8c833f746 Mon Sep 17 00:00:00 2001
From: Dan Kephart <dan.kephart@lairdtech.com>
Date: Fri, 22 Jan 2016 11:03:22 -0500
Subject: [PATCH] laird: ath6kl: Add ability to configure bluetooth coexistence

Bluetooth coexistence protocol and front end antenna confiuration can now
be specified via module parameters.  This allows the driver to send these
parameters to the firmware during early configuration.

Bug: 8754
---
 drivers/net/wireless/ath/ath6kl/core.c | 12 ++++++++++-
 drivers/net/wireless/ath/ath6kl/core.h |  3 +++
 drivers/net/wireless/ath/ath6kl/init.c | 16 ++++++++++++++
 drivers/net/wireless/ath/ath6kl/wmi.c  | 38 +++++++++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath6kl/wmi.h  | 39 ++++++++++++++++++++++++++++++++++
 5 files changed, 107 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/ath/ath6kl/core.c b/drivers/net/wireless/ath/ath6kl/core.c
index 89cfd8a3e27b..9914fb5cf758 100644
--- a/drivers/net/wireless/ath/ath6kl/core.c
+++ b/drivers/net/wireless/ath/ath6kl/core.c
@@ -39,6 +39,8 @@ static unsigned int ath6kl_p2p;
 static unsigned int testmode;
 static unsigned int recovery_enable;
 static unsigned int heart_beat_poll;
+static unsigned int btcoex_chip_type;
+static unsigned int btcoex_ant_config;
 
 module_param(debug_mask, uint, 0644);
 module_param(suspend_mode, uint, 0644);
@@ -48,10 +50,15 @@ module_param(ath6kl_p2p, uint, 0644);
 module_param(testmode, uint, 0644);
 module_param(recovery_enable, uint, 0644);
 module_param(heart_beat_poll, uint, 0644);
+module_param(btcoex_chip_type, byte, 0444);
+module_param(btcoex_ant_config, byte, 0444);
 MODULE_PARM_DESC(recovery_enable, "Enable recovery from firmware error");
 MODULE_PARM_DESC(heart_beat_poll,
 		 "Enable fw error detection periodic polling in msecs - Also set recovery_enable for this to be effective");
-
+MODULE_PARM_DESC(btcoex_chip_type,
+		 "bt coex chip type: 1-QCOM 3wire, 2-CSR 3wire, 3-ATH 3wire, 4-STE 4wire, 5-ATH 4wire. Must also specify antenna config to enable.");
+MODULE_PARM_DESC(btcoex_ant_config,
+		 "bt coex ant config: 0-disable coex, 1-shared single, 2-dual low iso, 3-dual high iso, 4-shared dual low iso, 5-shared dual high iso, 6-triple");
 
 void ath6kl_core_tx_complete(struct ath6kl *ar, struct sk_buff *skb)
 {
@@ -185,6 +192,9 @@ int ath6kl_core_init(struct ath6kl *ar, enum ath6kl_htc_type htc_type)
 	if (uart_debug)
 		ar->conf_flags |= ATH6KL_CONF_UART_DEBUG;
 
+	ar->btcoex_chip_type = btcoex_chip_type;
+	ar->btcoex_ant_config = btcoex_ant_config;
+
 	set_bit(FIRST_BOOT, &ar->flag);
 
 	ath6kl_debug_init(ar);
diff --git a/drivers/net/wireless/ath/ath6kl/core.h b/drivers/net/wireless/ath/ath6kl/core.h
index 3c0ceed24f35..0d0e71d4e004 100644
--- a/drivers/net/wireless/ath/ath6kl/core.h
+++ b/drivers/net/wireless/ath/ath6kl/core.h
@@ -872,6 +872,9 @@ struct ath6kl {
 	} debug;
 #endif /* CONFIG_ATH6KL_DEBUG */
 
+	u8 btcoex_chip_type;
+	u8 btcoex_ant_config;
+
 	struct {
 		enum wmi_phy_mode phy_mode;
 		u8 num_channels;
diff --git a/drivers/net/wireless/ath/ath6kl/init.c b/drivers/net/wireless/ath/ath6kl/init.c
index 2c2ee69679c0..0abda27c66d4 100644
--- a/drivers/net/wireless/ath/ath6kl/init.c
+++ b/drivers/net/wireless/ath/ath6kl/init.c
@@ -459,6 +459,22 @@ static int ath6kl_target_config_wlan_params(struct ath6kl *ar, int idx)
 {
 	int ret;
 
+	/* Set up Bluetooth coexistence */
+	if (ar->btcoex_chip_type && ar->btcoex_ant_config) {
+		ret = ath6kl_wmi_set_btcoex_colocated_bt_dev_cmd(ar->wmi, idx,
+	                                                     ar->btcoex_chip_type);
+		if (ret) {
+			ath6kl_err("unable to set the bt coexist chip type: %d\n", ret);
+			return ret;
+		}
+
+		ret = ath6kl_wmi_set_btcoex_fe_ant_cmd(ar->wmi, idx, ar->btcoex_ant_config);
+		if (ret) {
+			ath6kl_err("unable to set the bt coexist antenna config: %d\n", ret);
+			return ret;
+		}
+	}
+
 	/*
 	 * Configure the device for rx dot11 header rules. "0,0" are the
 	 * default values. Required if checksum offload is needed. Set
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index 23055c39726c..c656521c9ac5 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -3896,6 +3896,44 @@ int ath6kl_wmi_set_inact_period(struct wmi *wmi, u8 if_idx, int inact_timeout)
 				   NO_SYNC_WMIFLAG);
 }
 
+int ath6kl_wmi_set_btcoex_fe_ant_cmd(struct wmi *wmi, u8 if_idx,
+                                     u8 btcoex_fe_ant_type)
+{
+	struct sk_buff *skb;
+	struct wmi_set_btcoex_fe_ant_cmd *cmd;
+	int ret;
+
+	skb = ath6kl_wmi_get_new_buf(sizeof(*cmd));
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_set_btcoex_fe_ant_cmd *)skb->data;
+	cmd->btcoex_fe_ant_type = btcoex_fe_ant_type;
+
+	ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_SET_BTCOEX_FE_ANT_CMDID,
+				  NO_SYNC_WMIFLAG);
+	return ret;
+}
+
+int ath6kl_wmi_set_btcoex_colocated_bt_dev_cmd(struct wmi *wmi, u8 if_idx,
+                                               u8 btcoex_colocated_btdev)
+{
+	struct sk_buff *skb;
+	struct wmi_set_btcoex_colocated_bt_dev_cmd *cmd;
+	int ret;
+
+	skb = ath6kl_wmi_get_new_buf(sizeof(*cmd));
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_set_btcoex_colocated_bt_dev_cmd *)skb->data;
+	cmd->btcoex_colocated_btdev = btcoex_colocated_btdev;
+
+	ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_SET_BTCOEX_COLOCATED_BT_DEV_CMDID,
+				  NO_SYNC_WMIFLAG);
+	return ret;
+}
+
 static void ath6kl_wmi_hb_challenge_resp_event(struct wmi *wmi, u8 *datap,
 					       int len)
 {
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.h b/drivers/net/wireless/ath/ath6kl/wmi.h
index 2edee99bfed7..ac7cc14d6dac 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.h
+++ b/drivers/net/wireless/ath/ath6kl/wmi.h
@@ -2476,6 +2476,39 @@ struct wmi_p2p_probe_response_cmd {
 	u8 data[0];
 } __packed;
 
+
+/*
+ * ------- BT Coexistence definitions --------------
+ */
+
+enum wmi_btcoex_dev_type {
+	WMI_BTCOEX_NO_COEX    = 0,
+	WMI_BTCOEX_QCOM_3WIRE = 1,
+	WMI_BTCOEX_CSR_3WIRE  = 2,
+	WMI_BTCOEX_ATH_3WIRE  = 3,
+	WMI_BTCOEX_STE_4WIRE  = 4,
+	WMI_BTCOEX_ATH_4WIRE  = 5,
+};
+
+enum wmi_btcoex_fe_ant_type {
+	WMI_BTCOEX_NOT_ENABLED   = 0,
+	WMI_BTCOEX_FE_ANT_SINGLE = 1,
+	WMI_BTCOEX_FE_ANT_DUAL   = 2,
+	WMI_BTCOEX_FE_ANT_DUAL_HIGH_ISO       = 3,
+	WMI_BTCOEX_FE_ANT_DUAL_SH_BT_LOW_ISO  = 4,
+	WMI_BTCOEX_FE_ANT_DUAL_SH_BT_HIGH_ISO = 5,
+	WMI_BTCOEX_FE_ANT_TRIPLE = 6,
+	WMI_BTCOEX_FE_ANT_TYPE_MAX,
+};
+
+struct wmi_set_btcoex_fe_ant_cmd {
+    u8 btcoex_fe_ant_type;
+} __packed;
+
+struct wmi_set_btcoex_colocated_bt_dev_cmd {
+    u8 btcoex_colocated_btdev;
+} __packed;
+
 /* Extended WMI (WMIX)
  *
  * Extended WMIX commands are encapsulated in a WMI message with
@@ -2747,6 +2780,12 @@ int ath6kl_wmi_set_appie_cmd(struct wmi *wmi, u8 if_idx, u8 mgmt_frm_type,
 
 int ath6kl_wmi_set_inact_period(struct wmi *wmi, u8 if_idx, int inact_timeout);
 
+int ath6kl_wmi_set_btcoex_fe_ant_cmd(struct wmi *wmi, u8 if_idx,
+                                     u8 btcoex_fe_ant_type);
+
+int ath6kl_wmi_set_btcoex_colocated_bt_dev_cmd(struct wmi *wmi, u8 if_idx,
+                                               u8 btcoex_colocated_btdev);
+
 void ath6kl_wmi_sscan_timer(unsigned long ptr);
 
 int ath6kl_wmi_get_challenge_resp_cmd(struct wmi *wmi, u32 cookie, u32 source);
-- 
2.11.0

