From 350d9392320db5c8309dc4a61dc640ad918b0ca4 Mon Sep 17 00:00:00 2001
From: "brian.wagner" <brian.wagner@lairdtech.com>
Date: Tue, 1 Mar 2016 18:39:43 -0500
Subject: [PATCH] laird: ath6kl: Add Support for 40Mhz Data Rates

Ath6kl did not properly report 40Mhz Data rates, and the method the driver used to calculate
MCS data rates was not scalable. Added a structure to handle data rate information provided
by the firmware.

To stay synchronized with cfg80211, we now manage legacy data rates, MCS index, and Guard
Interval.

bug 9042
---
 drivers/net/wireless/ath/ath6kl/cfg80211.c | 104 ++++++-----------------------
 drivers/net/wireless/ath/ath6kl/core.h     |  30 ++++++++-
 drivers/net/wireless/ath/ath6kl/debug.c    |   6 +-
 drivers/net/wireless/ath/ath6kl/main.c     |   4 +-
 drivers/net/wireless/ath/ath6kl/wmi.c      |  92 +++++++------------------
 drivers/net/wireless/ath/ath6kl/wmi.h      |   2 +-
 6 files changed, 78 insertions(+), 160 deletions(-)

diff --git a/drivers/net/wireless/ath/ath6kl/cfg80211.c b/drivers/net/wireless/ath/ath6kl/cfg80211.c
index 0e23f03d959b..495f95c2f656 100644
--- a/drivers/net/wireless/ath/ath6kl/cfg80211.c
+++ b/drivers/net/wireless/ath/ath6kl/cfg80211.c
@@ -1721,77 +1721,16 @@ static const u32 cipher_suites[] = {
 	WLAN_CIPHER_SUITE_SMS4,
 };
 
-static bool is_rate_legacy(s32 rate)
-{
-	static const s32 legacy[] = { 1000, 2000, 5500, 11000,
-		6000, 9000, 12000, 18000, 24000,
-		36000, 48000, 54000
-	};
-	u8 i;
-
-	for (i = 0; i < ARRAY_SIZE(legacy); i++)
-		if (rate == legacy[i])
-			return true;
-
-	return false;
-}
-
-static bool is_rate_ht20(s32 rate, u8 *mcs, bool *sgi)
-{
-	static const s32 ht20[] = { 6500, 13000, 19500, 26000, 39000,
-		52000, 58500, 65000, 72200
-	};
-	u8 i;
-
-	for (i = 0; i < ARRAY_SIZE(ht20); i++) {
-		if (rate == ht20[i]) {
-			if (i == ARRAY_SIZE(ht20) - 1)
-				/* last rate uses sgi */
-				*sgi = true;
-			else
-				*sgi = false;
-
-			*mcs = i;
-			return true;
-		}
-	}
-	return false;
-}
-
-static bool is_rate_ht40(s32 rate, u8 *mcs, bool *sgi)
-{
-	static const s32 ht40[] = { 13500, 27000, 40500, 54000,
-		81000, 108000, 121500, 135000,
-		150000
-	};
-	u8 i;
-
-	for (i = 0; i < ARRAY_SIZE(ht40); i++) {
-		if (rate == ht40[i]) {
-			if (i == ARRAY_SIZE(ht40) - 1)
-				/* last rate uses sgi */
-				*sgi = true;
-			else
-				*sgi = false;
-
-			*mcs = i;
-			return true;
-		}
-	}
-
-	return false;
-}
-
 static int ath6kl_get_station(struct wiphy *wiphy, struct net_device *dev,
 			      const u8 *mac, struct station_info *sinfo)
 {
 	struct ath6kl *ar = ath6kl_priv(dev);
 	struct ath6kl_vif *vif = netdev_priv(dev);
 	long left;
-	bool sgi;
-	s32 rate;
+	u8 sgi;
+	s32 legacy;
+	u8 ht40;
 	int ret;
-	u8 mcs;
 
 	if (memcmp(mac, vif->bssid, ETH_ALEN) != 0)
 		return -ENOENT;
@@ -1837,33 +1776,28 @@ static int ath6kl_get_station(struct wiphy *wiphy, struct net_device *dev,
 	sinfo->signal = vif->target_stats.cs_rssi;
 	sinfo->filled |= BIT(NL80211_STA_INFO_SIGNAL);
 
-	rate = vif->target_stats.tx_ucast_rate;
+	sgi = vif->target_stats.txrate.sgi;
+	legacy = vif->target_stats.txrate.legacy;
+	ht40 = vif->target_stats.txrate.ht40;
 
-	if (is_rate_legacy(rate)) {
-		sinfo->txrate.legacy = rate / 100;
-	} else if (is_rate_ht20(rate, &mcs, &sgi)) {
-		if (sgi) {
-			sinfo->txrate.flags |= RATE_INFO_FLAGS_SHORT_GI;
-			sinfo->txrate.mcs = mcs - 1;
+	if (legacy != 0) {
+		sinfo->txrate.legacy = legacy / 100;
+	} else if (vif->target_stats.txrate.mcs != 0) {
+		sinfo->txrate.flags |= RATE_INFO_FLAGS_MCS;
+
+		if (ht40 != ATH6KL_IS_HT40_MCS_RATE) {
+			sinfo->txrate.bw = RATE_INFO_BW_20;
 		} else {
-			sinfo->txrate.mcs = mcs;
+			sinfo->txrate.bw = RATE_INFO_BW_40;
 		}
-
-		sinfo->txrate.flags |= RATE_INFO_FLAGS_MCS;
-		sinfo->txrate.bw = RATE_INFO_BW_20;
-	} else if (is_rate_ht40(rate, &mcs, &sgi)) {
-		if (sgi) {
+		/* Set short guard interval flag */
+		if (sgi != 0) {
 			sinfo->txrate.flags |= RATE_INFO_FLAGS_SHORT_GI;
-			sinfo->txrate.mcs = mcs - 1;
-		} else {
-			sinfo->txrate.mcs = mcs;
 		}
-
-		sinfo->txrate.bw = RATE_INFO_BW_40;
-		sinfo->txrate.flags |= RATE_INFO_FLAGS_MCS;
+		sinfo->txrate.mcs = vif->target_stats.txrate.mcs;
 	} else {
 		ath6kl_dbg(ATH6KL_DBG_WLAN_CFG,
-			   "invalid rate from stats: %d\n", rate);
+			   "invalid rate from stats\n");
 		ath6kl_debug_war(ar, ATH6KL_WAR_INVALID_RATE);
 		return 0;
 	}
@@ -3738,7 +3672,7 @@ static void ath6kl_get_stats(struct net_device *dev,
 	data[i++] = tgt_stats->tkip_cnter_measures_invoked;
 
 	data[i++] = tgt_stats->rx_ucast_pkt;
-	data[i++] = tgt_stats->rx_ucast_rate;
+	data[i++] = tgt_stats->rxrate.legacy;
 	data[i++] = tgt_stats->rx_bcast_pkt;
 	data[i++] = tgt_stats->rx_ucast_byte;
 	data[i++] = tgt_stats->rx_bcast_byte;
diff --git a/drivers/net/wireless/ath/ath6kl/core.h b/drivers/net/wireless/ath/ath6kl/core.h
index 0d0e71d4e004..84c76270cc5c 100644
--- a/drivers/net/wireless/ath/ath6kl/core.h
+++ b/drivers/net/wireless/ath/ath6kl/core.h
@@ -443,6 +443,32 @@ struct ath6kl_bmi {
 	u32 max_cmd_size;
 };
 
+/*
+ * Firmware reports back mcs values as a single table index
+ * Index values 0 - 11 refer to legacy data rates. Index values
+ * 12 - 28 are HT20. HT40 starts at 29
+ */
+#define ATH6KL_HT20_RATE_OFFSET 12
+#define ATH6KL_HT40_RATE_OFFSET 28
+
+#define ATH6KL_IS_HT40_MCS_RATE	1
+
+/*
+ * struct rate_info - bitrate information
+ *
+ * Information about a receiving or transmitting bitrate
+ *
+ * @sgi: bitflag if struct is single gaurd interval
+ * @mcs: mcs index if struct describes a 802.11n bitrate
+ * @legacy: bitrate in 100kbit/s for 802.11abg
+ */
+struct ath6kl_rate_info {
+	u8 sgi;
+	u8 mcs;
+	u32 legacy;
+	u8 ht40;
+};
+
 struct target_stats {
 	u64 tx_pkt;
 	u64 tx_byte;
@@ -491,8 +517,8 @@ struct target_stats {
 	u64 cs_connect_cnt;
 	u64 cs_discon_cnt;
 
-	s32 tx_ucast_rate;
-	s32 rx_ucast_rate;
+	struct ath6kl_rate_info txrate;
+	struct ath6kl_rate_info rxrate;
 
 	u32 lq_val;
 
diff --git a/drivers/net/wireless/ath/ath6kl/debug.c b/drivers/net/wireless/ath/ath6kl/debug.c
index e2b7809d7886..a1eae1f8fb8d 100644
--- a/drivers/net/wireless/ath/ath6kl/debug.c
+++ b/drivers/net/wireless/ath/ath6kl/debug.c
@@ -631,7 +631,11 @@ static ssize_t read_file_tgt_stats(struct file *file, char __user *user_buf,
 	len += scnprintf(buf + len, buf_len - len, "%20s %10llu\n",
 			 "Ucast packets", tgt_stats->rx_ucast_pkt);
 	len += scnprintf(buf + len, buf_len - len, "%20s %10d\n",
-			 "Ucast Rate", tgt_stats->rx_ucast_rate);
+			 "Rx Legacy Rate", tgt_stats->rxrate.legacy);
+	len += scnprintf(buf + len, buf_len - len, "%20s %10d\n",
+			 "Rx MCS Pointer", tgt_stats->rxrate.mcs);
+	len += scnprintf(buf + len, buf_len - len, "%20s %10d\n",
+			 "Short Guard Interval", tgt_stats->rxrate.sgi);
 	len += scnprintf(buf + len, buf_len - len, "%20s %10llu\n",
 			 "Bcast packets", tgt_stats->rx_bcast_pkt);
 	len += scnprintf(buf + len, buf_len - len, "%20s %10llu\n",
diff --git a/drivers/net/wireless/ath/ath6kl/main.c b/drivers/net/wireless/ath/ath6kl/main.c
index 1d16c5b8563c..a046a49f4e4f 100644
--- a/drivers/net/wireless/ath/ath6kl/main.c
+++ b/drivers/net/wireless/ath/ath6kl/main.c
@@ -737,7 +737,7 @@ static void ath6kl_update_target_stats(struct ath6kl_vif *vif, u8 *ptr, u32 len)
 		le32_to_cpu(tgt_stats->stats.tx.rts_fail_cnt);
 
 	rate = a_sle32_to_cpu(tgt_stats->stats.tx.ucast_rate);
-	stats->tx_ucast_rate = ath6kl_wmi_get_rate(ar->wmi, rate);
+	stats->txrate = ath6kl_wmi_get_rate(rate);
 
 	stats->rx_pkt += le32_to_cpu(tgt_stats->stats.rx.pkt);
 	stats->rx_byte += le32_to_cpu(tgt_stats->stats.rx.byte);
@@ -756,7 +756,7 @@ static void ath6kl_update_target_stats(struct ath6kl_vif *vif, u8 *ptr, u32 len)
 	stats->rx_dupl_frame += le32_to_cpu(tgt_stats->stats.rx.dupl_frame);
 
 	rate = a_sle32_to_cpu(tgt_stats->stats.rx.ucast_rate);
-	stats->rx_ucast_rate = ath6kl_wmi_get_rate(ar->wmi, rate);
+	stats->rxrate = ath6kl_wmi_get_rate(rate);
 
 	ccmp_stats = &tgt_stats->stats.tkip_ccmp_stats;
 
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index f471309d4db4..1f39a0c5bbc3 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -66,55 +66,6 @@ static const s32 wmi_rate_tbl[][2] = {
 	{0, 0}
 };
 
-static const s32 wmi_rate_tbl_mcs15[][2] = {
-	/* {W/O SGI, with SGI} */
-	{1000, 1000},
-	{2000, 2000},
-	{5500, 5500},
-	{11000, 11000},
-	{6000, 6000},
-	{9000, 9000},
-	{12000, 12000},
-	{18000, 18000},
-	{24000, 24000},
-	{36000, 36000},
-	{48000, 48000},
-	{54000, 54000},
-	{6500, 7200},     /* HT 20, MCS 0 */
-	{13000, 14400},
-	{19500, 21700},
-	{26000, 28900},
-	{39000, 43300},
-	{52000, 57800},
-	{58500, 65000},
-	{65000, 72200},
-	{13000, 14400},   /* HT 20, MCS 8 */
-	{26000, 28900},
-	{39000, 43300},
-	{52000, 57800},
-	{78000, 86700},
-	{104000, 115600},
-	{117000, 130000},
-	{130000, 144400}, /* HT 20, MCS 15 */
-	{13500, 15000},   /*HT 40, MCS 0 */
-	{27000, 30000},
-	{40500, 45000},
-	{54000, 60000},
-	{81000, 90000},
-	{108000, 120000},
-	{121500, 135000},
-	{135000, 150000},
-	{27000, 30000},   /*HT 40, MCS 8 */
-	{54000, 60000},
-	{81000, 90000},
-	{108000, 120000},
-	{162000, 180000},
-	{216000, 240000},
-	{243000, 270000},
-	{270000, 300000}, /*HT 40, MCS 15 */
-	{0, 0}
-};
-
 /* 802.1d to AC mapping. Refer pg 57 of WMM-test-plan-v1.2 */
 static const u8 up_to_ac[] = {
 	WMM_AC_BE,
@@ -3353,35 +3304,38 @@ int ath6kl_wmi_set_regdomain_cmd(struct wmi *wmi, const char *alpha2)
 				   NO_SYNC_WMIFLAG);
 }
 
-s32 ath6kl_wmi_get_rate(struct wmi *wmi, s8 rate_index)
+struct ath6kl_rate_info ath6kl_wmi_get_rate(s8 rate_index)
 {
-	struct ath6kl *ar = wmi->parent_dev;
-	u8 sgi = 0;
-	s32 ret;
+	struct ath6kl_rate_info info;
 
-	if (rate_index == RATE_AUTO)
-		return 0;
+	info.sgi = 0;
+	info.mcs = 0;
+	info.legacy = 0;
+	info.ht40 = 0;
+
+	if (rate_index == RATE_AUTO) {
+		return info;
+	}
 
 	/* SGI is stored as the MSB of the rate_index */
 	if (rate_index & RATE_INDEX_MSB) {
 		rate_index &= RATE_INDEX_WITHOUT_SGI_MASK;
-		sgi = 1;
+		info.sgi = 1;
 	}
-
-	if (test_bit(ATH6KL_FW_CAPABILITY_RATETABLE_MCS15,
-		     ar->fw_capabilities)) {
-		if (WARN_ON(rate_index >= ARRAY_SIZE(wmi_rate_tbl_mcs15)))
-			return 0;
-
-		ret = wmi_rate_tbl_mcs15[(u32) rate_index][sgi];
+	/* Legacy Data Rate */
+	if (rate_index < ATH6KL_HT20_RATE_OFFSET) {
+		info.legacy = wmi_rate_tbl[(u32) rate_index][0];
+		return info;
+	/* 20Mhz MCS Rate */
+	} else if (rate_index < ATH6KL_HT40_RATE_OFFSET) {
+		info.mcs = (u8)rate_index - ATH6KL_HT20_RATE_OFFSET;
+		return info;
+	/* 40Mhz MCS Rate */
 	} else {
-		if (WARN_ON(rate_index >= ARRAY_SIZE(wmi_rate_tbl)))
-			return 0;
-
-		ret = wmi_rate_tbl[(u32) rate_index][sgi];
+		info.mcs = (u8)rate_index - ATH6KL_HT40_RATE_OFFSET;
+		info.ht40 = ATH6KL_IS_HT40_MCS_RATE;
+		return info;
 	}
-
-	return ret;
 }
 
 static int ath6kl_wmi_get_pmkid_list_event_rx(struct wmi *wmi, u8 *datap,
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.h b/drivers/net/wireless/ath/ath6kl/wmi.h
index 754525372776..36d94e5fc42e 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.h
+++ b/drivers/net/wireless/ath/ath6kl/wmi.h
@@ -2689,7 +2689,7 @@ int ath6kl_wmi_set_htcap_cmd(struct wmi *wmi, u8 if_idx,
 			     struct ath6kl_htcap *htcap);
 int ath6kl_wmi_test_cmd(struct wmi *wmi, void *buf, size_t len);
 
-s32 ath6kl_wmi_get_rate(struct wmi *wmi, s8 rate_index);
+struct ath6kl_rate_info ath6kl_wmi_get_rate(s8 rate_index);
 
 int ath6kl_wmi_set_ip_cmd(struct wmi *wmi, u8 if_idx,
 			  __be32 ips0, __be32 ips1);
-- 
2.11.0

