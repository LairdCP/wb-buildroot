From 7bcc47aeefed1a879ab87807b4882a8b146e0e96 Mon Sep 17 00:00:00 2001
From: Dan Kephart <dan.kephart@lairdtech.com>
Date: Mon, 2 Feb 2015 19:15:03 -0500
Subject: [PATCH] laird: ath6kl: Adding fips support

Adds fips support for ath6kl driver

Bug: 4560
---
 drivers/net/wireless/ath/ath6kl/cfg80211.c |  21 ++++
 drivers/net/wireless/ath/ath6kl/common.h   |   3 +
 drivers/net/wireless/ath/ath6kl/core.c     |  18 +++
 drivers/net/wireless/ath/ath6kl/init.c     |   9 ++
 drivers/net/wireless/ath/ath6kl/main.c     |  13 ++
 drivers/net/wireless/ath/ath6kl/txrx.c     | 195 ++++++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath6kl/wmi.c      |  41 ++++++
 drivers/net/wireless/ath/ath6kl/wmi.h      |  11 ++
 8 files changed, 309 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath6kl/cfg80211.c b/drivers/net/wireless/ath/ath6kl/cfg80211.c
index 81ac8c59f0ec..c08e9035b842 100644
--- a/drivers/net/wireless/ath/ath6kl/cfg80211.c
+++ b/drivers/net/wireless/ath/ath6kl/cfg80211.c
@@ -811,6 +811,10 @@ void ath6kl_cfg80211_connect_event(struct ath6kl_vif *vif, u16 channel,
 		cfg80211_roamed_bss(vif->ndev, bss, assoc_req_ie, assoc_req_len,
 				    assoc_resp_ie, assoc_resp_len, GFP_KERNEL);
 	}
+
+#ifdef LAIRD_FIPS
+	if (fips_mode) laird_setbssid(bssid);
+#endif
 }
 
 static int ath6kl_cfg80211_disconnect(struct wiphy *wiphy,
@@ -849,6 +853,10 @@ static int ath6kl_cfg80211_disconnect(struct wiphy *wiphy,
 
 	vif->sme_state = SME_DISCONNECTED;
 
+#ifdef LAIRD_FIPS
+	if (fips_mode) laird_setbssid(NULL);
+#endif
+
 	return 0;
 }
 
@@ -1165,6 +1173,13 @@ static int ath6kl_cfg80211_add_key(struct wiphy *wiphy, struct net_device *ndev,
 	memcpy(key->seq, params->seq, key->seq_len);
 	key->cipher = params->cipher;
 
+#ifdef LAIRD_FIPS
+	if (fips_mode) {
+		laird_addkey(ndev, key_index, pairwise, mac_addr,
+					 key->key, key->key_len, key->seq, key->seq_len);
+	}
+#endif
+
 	switch (key->cipher) {
 	case WLAN_CIPHER_SUITE_WEP40:
 	case WLAN_CIPHER_SUITE_WEP104:
@@ -1264,6 +1279,12 @@ static int ath6kl_cfg80211_del_key(struct wiphy *wiphy, struct net_device *ndev,
 
 	vif->keys[key_index].key_len = 0;
 
+#ifdef LAIRD_FIPS
+	if (fips_mode) {
+		laird_delkey(ndev, key_index);
+	}
+#endif
+
 	return ath6kl_wmi_deletekey_cmd(ar->wmi, vif->fw_vif_idx, key_index);
 }
 
diff --git a/drivers/net/wireless/ath/ath6kl/common.h b/drivers/net/wireless/ath/ath6kl/common.h
index 4f82e8632d37..b0ce4b400687 100644
--- a/drivers/net/wireless/ath/ath6kl/common.h
+++ b/drivers/net/wireless/ath/ath6kl/common.h
@@ -82,4 +82,7 @@ enum htc_credit_dist_reason;
 struct ath6kl_htc_credit_info;
 
 struct sk_buff *ath6kl_buf_alloc(int size);
+
+#include "../../laird_fips/laird.h"
+
 #endif /* COMMON_H */
diff --git a/drivers/net/wireless/ath/ath6kl/core.c b/drivers/net/wireless/ath/ath6kl/core.c
index 4ec02cea0f43..8c1701bd8f3f 100644
--- a/drivers/net/wireless/ath/ath6kl/core.c
+++ b/drivers/net/wireless/ath/ath6kl/core.c
@@ -27,6 +27,8 @@
 #include "htc-ops.h"
 #include "cfg80211.h"
 
+#include "../../laird_fips/laird.h"
+
 unsigned int debug_mask;
 static unsigned int suspend_mode;
 static unsigned int wow_mode;
@@ -360,3 +362,19 @@ EXPORT_SYMBOL(ath6kl_core_destroy);
 MODULE_AUTHOR("Qualcomm Atheros");
 MODULE_DESCRIPTION("Core module for AR600x SDIO and USB devices.");
 MODULE_LICENSE("Dual BSD/GPL");
+
+#ifdef LAIRD_FIPS
+// module parameter for enabling fips mode on load
+bool fips_mode = 0;
+module_param(fips_mode, bool, S_IRUGO);
+
+// function called by external module to register fips support
+const laird_register_data_t *laird_register_data;
+int ath6kl_laird_register(const laird_register_data_t *ptr)
+{
+	laird_register_data = ptr;
+	return 0;
+}
+EXPORT_SYMBOL(ath6kl_laird_register);
+
+#endif
diff --git a/drivers/net/wireless/ath/ath6kl/init.c b/drivers/net/wireless/ath/ath6kl/init.c
index 6ae0734f86e0..b1ac98747e8c 100644
--- a/drivers/net/wireless/ath/ath6kl/init.c
+++ b/drivers/net/wireless/ath/ath6kl/init.c
@@ -32,6 +32,8 @@
 #include "hif-ops.h"
 #include "htc-ops.h"
 
+#include "../../laird_fips/laird.h"
+
 static const struct ath6kl_hw hw_list[] = {
 	{
 		.id				= AR6003_HW_2_0_VERSION,
@@ -1872,6 +1874,13 @@ void ath6kl_stop_txrx(struct ath6kl *ar)
 		return;
 	}
 
+#ifdef LAIRD_FIPS
+	if (fips_mode) {
+		// wait for all fips in progress txrx to complete
+		laird_stop_txrx();
+	}
+#endif
+
 	for (i = 0; i < AP_MAX_NUM_STA; i++)
 		aggr_reset_state(ar->sta_list[i].aggr_conn);
 
diff --git a/drivers/net/wireless/ath/ath6kl/main.c b/drivers/net/wireless/ath/ath6kl/main.c
index 1af3fed5a72c..f12a8c703a9e 100644
--- a/drivers/net/wireless/ath/ath6kl/main.c
+++ b/drivers/net/wireless/ath/ath6kl/main.c
@@ -22,6 +22,7 @@
 #include "cfg80211.h"
 #include "target.h"
 #include "debug.h"
+#include "../../laird_fips/laird.h"
 
 struct ath6kl_sta *ath6kl_find_sta(struct ath6kl_vif *vif, u8 *node_addr)
 {
@@ -1298,6 +1299,14 @@ void init_netdev(struct net_device *dev)
 	dev->destructor = free_netdev;
 	dev->watchdog_timeo = ATH6KL_TX_TIMEOUT;
 
+#ifdef LAIRD_FIPS
+	if (fips_mode) {
+		// TBD: fix with correct header length
+		dev->needed_headroom = 32 + 8;
+		// need tailroom for adding ICV
+		dev->needed_tailroom = 8;
+	} else
+#endif
 	dev->needed_headroom = ETH_HLEN;
 	dev->needed_headroom += roundup(sizeof(struct ath6kl_llc_snap_hdr) +
 					sizeof(struct wmi_data_hdr) +
@@ -1305,6 +1314,10 @@ void init_netdev(struct net_device *dev)
 					WMI_MAX_TX_META_SZ +
 					ATH6KL_HTC_ALIGN_BYTES, 4);
 
+#ifdef LAIRD_FIPS
+	if (!fips_mode)
+		// can only support hardware ip checksum in non-fips mode
+#endif
 	if (!test_bit(ATH6KL_FW_CAPABILITY_NO_IP_CHECKSUM,
 		      ar->fw_capabilities))
 		dev->hw_features |= NETIF_F_IP_CSUM | NETIF_F_RXCSUM;
diff --git a/drivers/net/wireless/ath/ath6kl/txrx.c b/drivers/net/wireless/ath/ath6kl/txrx.c
index 40432fe7a5d2..464729ea0923 100644
--- a/drivers/net/wireless/ath/ath6kl/txrx.c
+++ b/drivers/net/wireless/ath/ath6kl/txrx.c
@@ -22,6 +22,8 @@
 #include "htc-ops.h"
 #include "trace.h"
 
+#include "../../laird_fips/laird.h"
+
 /*
  * tid - tid_mux0..tid_mux3
  * aid - tid_mux4..tid_mux7
@@ -106,7 +108,7 @@ static bool ath6kl_process_uapsdq(struct ath6kl_sta *conn,
 {
 	struct ath6kl *ar = vif->ar;
 	bool is_apsdq_empty = false;
-	struct ethhdr *datap = (struct ethhdr *) skb->data;
+	struct ethhdr *datap = (struct ethhdr *)skb->data;
 	u8 up = 0, traffic_class, *ip_hdr;
 	u16 ether_type;
 	struct ath6kl_llc_snap_hdr *llc_hdr;
@@ -353,7 +355,13 @@ fail_ctrl_tx:
 	return status;
 }
 
+#ifdef LAIRD_FIPS
+int laird_data_tx_continue(struct sk_buff *skb,
+						   struct net_device *dev,
+						   int isfips)
+#else
 int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
+#endif
 {
 	struct ath6kl *ar = ath6kl_priv(dev);
 	struct ath6kl_cookie *cookie = NULL;
@@ -370,6 +378,11 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 	u8 meta_ver = 0;
 	u32 flags = 0;
 
+#ifdef LAIRD_FIPS
+	if (isfips < 0) // check if fips encryption failed
+		goto fail_tx;
+#endif
+
 	ath6kl_dbg(ATH6KL_DBG_WLAN_TX,
 		   "%s: skb=0x%p, data=0x%p, len=0x%x\n", __func__,
 		   skb, skb->data, skb->len);
@@ -391,6 +404,12 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 	}
 
 	if (test_bit(WMI_ENABLED, &ar->flag)) {
+#ifdef LAIRD_FIPS
+		if (isfips)
+			goto fips_skip1;
+
+		// only do the following for non-fips mode
+#endif
 		if ((dev->features & NETIF_F_IP_CSUM) &&
 		    (csum == CHECKSUM_PARTIAL)) {
 			csum_start = skb->csum_start -
@@ -415,6 +434,10 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 			goto fail_tx;
 		}
 
+#ifdef LAIRD_FIPS
+	fips_skip1: // contunue fips processing here
+#endif /* LAIRD_FIPS */
+
 		if ((dev->features & NETIF_F_IP_CSUM) &&
 		    (csum == CHECKSUM_PARTIAL)) {
 			meta_v2.csum_start = csum_start;
@@ -429,8 +452,14 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 			meta = NULL;
 		}
 
+#ifdef LAIRD_FIPS
+#define LAIRD_HDR_TYPE (isfips ? WMI_DATA_HDR_DATA_TYPE_802_11 : 0)
+#else
+#define LAIRD_HDR_TYPE 0
+#endif /* LAIRD_FIPS */
+
 		ret = ath6kl_wmi_data_hdr_add(ar->wmi, skb,
-				DATA_MSGTYPE, flags, 0,
+				DATA_MSGTYPE, flags, LAIRD_HDR_TYPE,
 				meta_ver,
 				meta, vif->fw_vif_idx);
 
@@ -526,6 +555,28 @@ fail_tx:
 	return 0;
 }
 
+#ifdef LAIRD_FIPS
+int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
+{
+	struct ath6kl *ar = ath6kl_priv(dev);
+
+	// if not in fips_mode use the normal routine
+	if (!fips_mode) return laird_data_tx_continue(skb, dev, 0);
+
+	// in fips_mode, convert the socket buffer and then continue
+	// TBD: modify call to enable WMM
+	if (laird_skb_encrypt_prep(skb, dev, ar->wmi->is_wmm_enabled,
+			&laird_data_tx_continue)) {
+		// failure -- pass to original routine to handle failure
+		return laird_data_tx_continue(skb, dev, -1);
+	}
+
+	// laird_data_tx_continue() will be called in laird_skb_tx_tasklet()
+
+	return 0;
+}
+#endif
+
 /* indicate tx activity or inactivity on a WMI stream */
 void ath6kl_indicate_tx_activity(void *devt, u8 traffic_class, bool active)
 {
@@ -634,6 +685,12 @@ enum htc_send_full_action ath6kl_tx_queue_full(struct htc_target *target,
 			spin_unlock_bh(&ar->list_lock);
 
 			set_bit(NETQ_STOPPED, &vif->flags);
+#ifdef LAIRD_FIPS
+			if (fips_mode) {
+				// also, stop completed fips packets from being submitted
+		        laird_stop_queue(vif->ndev);
+			}
+#endif
 			netif_stop_queue(vif->ndev);
 
 			return action;
@@ -805,6 +862,12 @@ void ath6kl_tx_complete(struct htc_target *target,
 		if (test_bit(CONNECTED, &vif->flags) &&
 		    !flushing[vif->fw_vif_idx]) {
 			spin_unlock_bh(&ar->list_lock);
+#ifdef LAIRD_FIPS
+			if (fips_mode) {
+				// also, enable completed fips packets to be submitted
+				laird_wake_queue(vif->ndev);
+			}
+#endif
 			netif_wake_queue(vif->ndev);
 			spin_lock_bh(&ar->list_lock);
 		}
@@ -1303,6 +1366,36 @@ static void ath6kl_uapsd_trigger_frame_rx(struct ath6kl_vif *vif,
 	return;
 }
 
+// for forward reference
+void laird_skb_rx_continue(struct sk_buff *skb, int res);
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
+typedef struct {
+	struct htc_target *target;
+	bool is_amsdu;
+	u16 seq_no;
+	u8 tid;
+	u8 if_idx;
+} rx_stash_t; /* save receive information for later */
+
+static inline void laird_skb_put_stash(struct sk_buff *skb, rx_stash_t *pstash)
+{
+	rx_stash_t **ppstash;
+
+	ppstash = (rx_stash_t **)((u8 *)skb->cb +
+				  sizeof(skb->cb) - sizeof(*ppstash));
+	*ppstash = pstash;
+}
+
+static inline rx_stash_t *laird_skb_get_stash(struct sk_buff *skb)
+{
+	rx_stash_t **ppstash;
+
+	ppstash = (rx_stash_t **)((u8 *)skb->cb +
+				  sizeof(skb->cb) - sizeof(*ppstash));
+	return *ppstash;
+}
+#endif
+
 void ath6kl_rx(struct htc_target *target, struct htc_packet *packet)
 {
 	struct ath6kl *ar = target->dev->ar;
@@ -1547,6 +1640,42 @@ void ath6kl_rx(struct htc_target *target, struct htc_packet *packet)
 
 	skb_pull(skb, pad_before_data_start);
 
+#ifdef LAIRD_FIPS
+	if (fips_mode) {
+		int res;
+		rx_stash_t *stash;
+
+		/* stash fields for use in callback */
+		stash = kmalloc(sizeof(*stash), GFP_ATOMIC);
+		laird_skb_put_stash(skb, stash);
+		if (!stash) {
+			dev_kfree_skb(skb);
+			return;
+		}
+		stash->target = target;
+		stash->if_idx = if_idx;
+		stash->is_amsdu = is_amsdu;
+		stash->tid = tid;
+		stash->seq_no = seq_no;
+
+		res = laird_skb_rx_prep(skb, &laird_skb_rx_continue);
+		if (res == 0) {
+			// will continue in laird_skb_rx_continue
+			return;
+		}
+
+		kfree(stash);
+
+		if (res < 0) {
+			// failed -- delete packet
+			dev_kfree_skb(skb);
+			return;
+		}
+		// TBD: temporary code for testing...
+		// letting driver finish receive processing
+	}
+#endif
+
 	if (dot11_hdr)
 		status = ath6kl_wmi_dot11_hdr_remove(ar->wmi, skb);
 	else if (!is_amsdu)
@@ -1624,6 +1753,68 @@ void ath6kl_rx(struct htc_target *target, struct htc_packet *packet)
 	ath6kl_deliver_frames_to_nw_stack(vif->ndev, skb);
 }
 
+#ifdef LAIRD_FIPS
+// continue receive packet processing
+void laird_skb_rx_continue(struct sk_buff *skb, int res)
+{
+	rx_stash_t *stash;
+	struct htc_target *target;
+	struct ath6kl *ar;
+	bool is_amsdu;
+	u16 seq_no;
+	u8 tid, if_idx;
+	struct ethhdr *datap;
+	struct ath6kl_vif *vif;
+	struct aggr_info_conn *aggr_conn;
+
+	/* restore data from stash */
+	stash = laird_skb_get_stash(skb);
+	target = stash->target;
+	if_idx = stash->if_idx;
+	is_amsdu = stash->is_amsdu;
+	tid = stash->tid;
+	seq_no = stash->seq_no;
+	kfree(stash);
+
+	if (res < 0) {
+		// failed decrypt -- free buffer
+		dev_kfree_skb(skb);
+		return;
+	}
+
+	ar = target->dev->ar;
+	vif = ath6kl_get_vif_by_index(ar, if_idx);
+	if (!vif) {
+		dev_kfree_skb(skb);
+		return;
+	}
+
+	/* following is copied from above with
+	 * deletion of AP_NETWORK
+	 */
+	if (!(vif->ndev->flags & IFF_UP)) {
+		dev_kfree_skb(skb);
+		return;
+	}
+
+	datap = (struct ethhdr *)skb->data;
+
+	if (is_unicast_ether_addr(datap->h_dest)) {
+			aggr_conn = vif->aggr_cntxt->aggr_conn;
+
+		if (aggr_process_recv_frm(aggr_conn, tid, seq_no,
+					  is_amsdu, skb)) {
+			/* aggregation code will handle the skb */
+			return;
+		}
+	} else if (!is_broadcast_ether_addr(datap->h_dest)) {
+		vif->net_stats.multicast++;
+	}
+
+	ath6kl_deliver_frames_to_nw_stack(vif->ndev, skb);
+}
+#endif
+
 static void aggr_timeout(unsigned long arg)
 {
 	u8 i, j;
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index a5e1de75a4a3..7618556937ae 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -23,6 +23,7 @@
 #include "trace.h"
 #include "../regd.h"
 #include "../regd_common.h"
+#include "../../laird_fips/laird.h"
 
 static int ath6kl_wmi_sync_point(struct wmi *wmi, u8 if_idx);
 
@@ -321,6 +322,22 @@ int ath6kl_wmi_implicit_create_pstream(struct wmi *wmi, u8 if_idx,
 	if (!wmm_enabled) {
 		/* If WMM is disabled all traffic goes as BE traffic */
 		usr_pri = 0;
+#ifdef LAIRD_FIPS
+	} else if (fips_mode) {
+		struct ieee80211_qos_hdr *pwh;
+		pwh = (struct ieee80211_qos_hdr *)(datap +
+							 sizeof(struct
+								wmi_data_hdr) +
+							 meta_size);
+		if (le16_to_cpu(pwh->frame_control) & IEEE80211_STYPE_QOS_DATA) {
+			// qos packet, get priority from qos field
+			usr_pri = le16_to_cpu(pwh->qos_ctrl) & IEEE80211_QOS_CTL_TAG1D_MASK;
+		} else {
+			// non-qos, always use 0
+			usr_pri = 0;
+		}
+		// NOTE: wmm_enabled is still true when associated to non-qos AP
+#endif
 	} else {
 		hdr_size = sizeof(struct ethhdr);
 
@@ -3527,11 +3544,35 @@ int ath6kl_wmi_set_rx_frame_format_cmd(struct wmi *wmi, u8 if_idx,
 	struct wmi_rx_frame_format_cmd *cmd;
 	int ret;
 
+#ifdef LAIRD_FIPS
+	if (fips_mode) {
+		// Disable A-MSDU when in FIPS mode
+		struct wmi_allow_aggr_cmd *fips_cmd;
+		skb = ath6kl_wmi_get_new_buf(sizeof(*fips_cmd));
+		if (!skb)
+			return -ENOMEM;
+		fips_cmd = (struct wmi_allow_aggr_cmd *) skb->data;
+		/* Disable aggregation for Tx and Rx on all TIDs (one bit each) */
+		fips_cmd->tx_allow_aggr = 0x00;
+		fips_cmd->rx_allow_aggr = 0x00;
+		ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_ALLOW_AGGR_CMDID,
+				  NO_SYNC_WMIFLAG);
+	}
+#endif
+
 	skb = ath6kl_wmi_get_new_buf(sizeof(*cmd));
 	if (!skb)
 		return -ENOMEM;
 
 	cmd = (struct wmi_rx_frame_format_cmd *) skb->data;
+#ifdef LAIRD_FIPS
+	if (fips_mode) {
+        // force FIPS mode
+        rx_dot11_hdr = 1;
+        defrag_on_host =1;
+        cmd->reserved[0] = 1;
+	}
+#endif
 	cmd->dot11_hdr = rx_dot11_hdr ? 1 : 0;
 	cmd->defrag_on_host = defrag_on_host ? 1 : 0;
 	cmd->meta_ver = rx_meta_ver;
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.h b/drivers/net/wireless/ath/ath6kl/wmi.h
index 05d25a94c781..cc812ab76312 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.h
+++ b/drivers/net/wireless/ath/ath6kl/wmi.h
@@ -2192,6 +2192,17 @@ struct wmi_delba_event {
 	__le16 reason_code;
 } __packed;
 
+#ifdef LAIRD_FIPS
+/* WMI_ALLOW_AGGR_CMDID
+ * Configures tid's to allow ADDBA negotiations
+ * on each tid, in each direction
+ */
+struct wmi_allow_aggr_cmd{
+   u16 tx_allow_aggr; /* 16-bit mask to allow uplink ADDBA negotiation - bit position indicates tid */
+   u16 rx_allow_aggr; /* 16-bit mask to allow downlink ADDBA negotiation - bit position indicates tid */
+} __packed;
+#endif /* LAIRD_FIPS */
+
 #define PEER_NODE_JOIN_EVENT		0x00
 #define PEER_NODE_LEAVE_EVENT		0x01
 #define PEER_FIRST_NODE_JOIN_EVENT	0x10
-- 
2.11.0

