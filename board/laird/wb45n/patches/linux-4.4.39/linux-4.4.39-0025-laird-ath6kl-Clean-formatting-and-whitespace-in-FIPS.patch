From 270d2dc165bde88ab1df3c6090986eec3a6a635e Mon Sep 17 00:00:00 2001
From: "brian.wagner" <brian.wagner@lairdtech.com>
Date: Tue, 8 Dec 2015 15:54:55 -0500
Subject: [PATCH] laird: ath6kl: Clean formatting and whitespace in FIPS code

Older commited FIPS driver code had a number of whitespace and formatting issues.
These issues were resolved in our 3.13 backports code, moving them to our kernel.

bug 8722
---
 drivers/net/wireless/ath/ath6kl/cfg80211.c |  9 ++++--
 drivers/net/wireless/ath/ath6kl/core.c     |  4 +--
 drivers/net/wireless/ath/ath6kl/init.c     |  2 +-
 drivers/net/wireless/ath/ath6kl/main.c     |  5 ++--
 drivers/net/wireless/ath/ath6kl/txrx.c     | 44 +++++++++++++++---------------
 drivers/net/wireless/ath/ath6kl/wmi.c      | 44 ++++++++++++++++++------------
 drivers/net/wireless/ath/ath6kl/wmi.h      | 10 +++++--
 7 files changed, 67 insertions(+), 51 deletions(-)

diff --git a/drivers/net/wireless/ath/ath6kl/cfg80211.c b/drivers/net/wireless/ath/ath6kl/cfg80211.c
index 95b4b1a13b5b..3220436dec31 100644
--- a/drivers/net/wireless/ath/ath6kl/cfg80211.c
+++ b/drivers/net/wireless/ath/ath6kl/cfg80211.c
@@ -814,7 +814,8 @@ void ath6kl_cfg80211_connect_event(struct ath6kl_vif *vif, u16 channel,
 	}
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
-	if (fips_mode) laird_setbssid(bssid);
+	if (fips_mode)
+		laird_setbssid(bssid);
 #endif
 }
 
@@ -855,7 +856,8 @@ static int ath6kl_cfg80211_disconnect(struct wiphy *wiphy,
 	vif->sme_state = SME_DISCONNECTED;
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
-	if (fips_mode) laird_setbssid(NULL);
+	if (fips_mode)
+		laird_setbssid(NULL);
 #endif
 
 	return 0;
@@ -1177,7 +1179,8 @@ static int ath6kl_cfg80211_add_key(struct wiphy *wiphy, struct net_device *ndev,
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
 		laird_addkey(ndev, key_index, pairwise, mac_addr,
-					 key->key, key->key_len, key->seq, key->seq_len);
+			     key->key, key->key_len, key->seq,
+			     key->seq_len);
 	}
 #endif
 
diff --git a/drivers/net/wireless/ath/ath6kl/core.c b/drivers/net/wireless/ath/ath6kl/core.c
index c7155fd018c2..89cfd8a3e27b 100644
--- a/drivers/net/wireless/ath/ath6kl/core.c
+++ b/drivers/net/wireless/ath/ath6kl/core.c
@@ -372,11 +372,11 @@ MODULE_DESCRIPTION("Core module for AR600x SDIO and USB devices.");
 MODULE_LICENSE("Dual BSD/GPL");
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
-// module parameter for enabling fips mode on load
+/* module parameter for enabling fips mode on load */
 bool fips_mode = 0;
 module_param(fips_mode, bool, S_IRUGO);
 
-// function called by external module to register fips support
+/* function called by external module to register fips support */
 const laird_register_data_t *laird_register_data;
 int ath6kl_laird_register(const laird_register_data_t *ptr)
 {
diff --git a/drivers/net/wireless/ath/ath6kl/init.c b/drivers/net/wireless/ath/ath6kl/init.c
index 2494416e6f4e..2c2ee69679c0 100644
--- a/drivers/net/wireless/ath/ath6kl/init.c
+++ b/drivers/net/wireless/ath/ath6kl/init.c
@@ -1904,7 +1904,7 @@ void ath6kl_stop_txrx(struct ath6kl *ar)
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
-		// wait for all fips in progress txrx to complete
+		/* wait for all fips in progress txrx to complete */
 		laird_stop_txrx();
 	}
 #endif
diff --git a/drivers/net/wireless/ath/ath6kl/main.c b/drivers/net/wireless/ath/ath6kl/main.c
index 9bfe30741158..1d16c5b8563c 100644
--- a/drivers/net/wireless/ath/ath6kl/main.c
+++ b/drivers/net/wireless/ath/ath6kl/main.c
@@ -1308,9 +1308,8 @@ void init_netdev(struct net_device *dev)
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
-		// TBD: fix with correct header length
 		dev->needed_headroom = 32 + 8;
-		// need tailroom for adding ICV
+		/* need tailroom for adding ICV */
 		dev->needed_tailroom = 8;
 	} else
 #endif
@@ -1323,7 +1322,7 @@ void init_netdev(struct net_device *dev)
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (!fips_mode)
-		// can only support hardware ip checksum in non-fips mode
+		/* can only support hardware ip checksum in non-fips mode */
 #endif
 	if (!test_bit(ATH6KL_FW_CAPABILITY_NO_IP_CHECKSUM,
 		      ar->fw_capabilities))
diff --git a/drivers/net/wireless/ath/ath6kl/txrx.c b/drivers/net/wireless/ath/ath6kl/txrx.c
index 3ab4a3a56fb9..adea5de578f0 100644
--- a/drivers/net/wireless/ath/ath6kl/txrx.c
+++ b/drivers/net/wireless/ath/ath6kl/txrx.c
@@ -357,8 +357,8 @@ fail_ctrl_tx:
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 int laird_data_tx_continue(struct sk_buff *skb,
-						   struct net_device *dev,
-						   int isfips)
+			   struct net_device *dev,
+			   int isfips)
 #else
 int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 #endif
@@ -379,7 +379,7 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 	u32 flags = 0;
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
-	if (isfips < 0) // check if fips encryption failed
+	if (isfips < 0) /* check if fips encryption failed */
 		goto fail_tx;
 #endif
 
@@ -408,7 +408,7 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 		if (isfips)
 			goto fips_skip1;
 
-		// only do the following for non-fips mode
+		/* only do the following for non-fips mode */
 #endif
 		if ((dev->features & NETIF_F_IP_CSUM) &&
 		    (csum == CHECKSUM_PARTIAL)) {
@@ -435,7 +435,7 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 		}
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
-	fips_skip1: // contunue fips processing here
+fips_skip1: /* continue fips processing here */
 #endif /* CONFIG_ATH6KL_LAIRD_FIPS */
 
 		if ((dev->features & NETIF_F_IP_CSUM) &&
@@ -560,18 +560,18 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 {
 	struct ath6kl *ar = ath6kl_priv(dev);
 
-	// if not in fips_mode use the normal routine
-	if (!fips_mode) return laird_data_tx_continue(skb, dev, 0);
+	/* if not in fips_mode use the normal routine */
+	if (!fips_mode)
+		return laird_data_tx_continue(skb, dev, 0);
 
-	// in fips_mode, convert the socket buffer and then continue
-	// TBD: modify call to enable WMM
+	/* in fips_mode, convert the socket buffer and then continue */
 	if (laird_skb_encrypt_prep(skb, dev, ar->wmi->is_wmm_enabled,
-			&laird_data_tx_continue)) {
-		// failure -- pass to original routine to handle failure
+				   &laird_data_tx_continue)) {
+		/* failure -- pass to original routine to handle failure */
 		return laird_data_tx_continue(skb, dev, -1);
 	}
 
-	// laird_data_tx_continue() will be called in laird_skb_tx_tasklet()
+	/* laird_data_tx_continue() will be called in laird_skb_tx_tasklet() */
 
 	return 0;
 }
@@ -687,8 +687,8 @@ enum htc_send_full_action ath6kl_tx_queue_full(struct htc_target *target,
 			set_bit(NETQ_STOPPED, &vif->flags);
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 			if (fips_mode) {
-				// also, stop completed fips packets from being submitted
-		        laird_stop_queue(vif->ndev);
+				/* stop fips packets from being submitted */
+				laird_stop_queue(vif->ndev);
 			}
 #endif
 			netif_stop_queue(vif->ndev);
@@ -864,7 +864,7 @@ void ath6kl_tx_complete(struct htc_target *target,
 			spin_unlock_bh(&ar->list_lock);
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 			if (fips_mode) {
-				// also, enable completed fips packets to be submitted
+				/* enable fips packets to be submitted */
 				laird_wake_queue(vif->ndev);
 			}
 #endif
@@ -1366,8 +1366,9 @@ static void ath6kl_uapsd_trigger_frame_rx(struct ath6kl_vif *vif,
 	return;
 }
 
-// for forward reference
+/* for forward reference */
 void laird_skb_rx_continue(struct sk_buff *skb, int res);
+
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 typedef struct {
 	struct htc_target *target;
@@ -1660,19 +1661,18 @@ void ath6kl_rx(struct htc_target *target, struct htc_packet *packet)
 
 		res = laird_skb_rx_prep(skb, &laird_skb_rx_continue);
 		if (res == 0) {
-			// will continue in laird_skb_rx_continue
+			/* will continue in laird_skb_rx_continue */
 			return;
 		}
 
 		kfree(stash);
 
 		if (res < 0) {
-			// failed -- delete packet
+			/* failed -- delete packet */
 			dev_kfree_skb(skb);
 			return;
 		}
-		// TBD: temporary code for testing...
-		// letting driver finish receive processing
+		/* letting driver finish receive processing */
 	}
 #endif
 
@@ -1754,7 +1754,7 @@ void ath6kl_rx(struct htc_target *target, struct htc_packet *packet)
 }
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
-// continue receive packet processing
+/* continue receive packet processing */
 void laird_skb_rx_continue(struct sk_buff *skb, int res)
 {
 	rx_stash_t *stash;
@@ -1777,7 +1777,7 @@ void laird_skb_rx_continue(struct sk_buff *skb, int res)
 	kfree(stash);
 
 	if (res < 0) {
-		// failed decrypt -- free buffer
+		/* failed decrypt -- free buffer */
 		dev_kfree_skb(skb);
 		return;
 	}
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index e4311909a862..23055c39726c 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -350,18 +350,23 @@ int ath6kl_wmi_implicit_create_pstream(struct wmi *wmi, u8 if_idx,
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	} else if (fips_mode) {
 		struct ieee80211_qos_hdr *pwh;
+
 		pwh = (struct ieee80211_qos_hdr *)(datap +
-							 sizeof(struct
-								wmi_data_hdr) +
-							 meta_size);
-		if (le16_to_cpu(pwh->frame_control) & IEEE80211_STYPE_QOS_DATA) {
-			// qos packet, get priority from qos field
-			usr_pri = le16_to_cpu(pwh->qos_ctrl) & IEEE80211_QOS_CTL_TAG1D_MASK;
+						   sizeof(struct wmi_data_hdr) +
+						   meta_size);
+
+		if (le16_to_cpu(pwh->frame_control) &
+			IEEE80211_STYPE_QOS_DATA) {
+			/* qos packet, get priority from qos field */
+			usr_pri = le16_to_cpu(pwh->qos_ctrl) &
+					  IEEE80211_QOS_CTL_TAG1D_MASK;
 		} else {
-			// non-qos, always use 0
+			/* non-qos, always use 0 */
 			usr_pri = 0;
 		}
-		// NOTE: wmm_enabled is still true when associated to non-qos AP
+		/* NOTE: wmm_enabled is still true when
+		 * associated to non-qos AP
+		 */
 #endif
 	} else {
 		hdr_size = sizeof(struct ethhdr);
@@ -3570,17 +3575,22 @@ int ath6kl_wmi_set_rx_frame_format_cmd(struct wmi *wmi, u8 if_idx,
 
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
-		// Disable A-MSDU when in FIPS mode
+		/* Disable A-MSDU when in FIPS mode */
 		struct wmi_allow_aggr_cmd *fips_cmd;
+
 		skb = ath6kl_wmi_get_new_buf(sizeof(*fips_cmd));
+
 		if (!skb)
 			return -ENOMEM;
-		fips_cmd = (struct wmi_allow_aggr_cmd *) skb->data;
-		/* Disable aggregation for Tx and Rx on all TIDs (one bit each) */
+		fips_cmd = (struct wmi_allow_aggr_cmd *)skb->data;
+		/* Disable aggregation for Tx and Rx on all TIDs
+		 *(one bit each)
+		 */
 		fips_cmd->tx_allow_aggr = 0x00;
 		fips_cmd->rx_allow_aggr = 0x00;
-		ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_ALLOW_AGGR_CMDID,
-				  NO_SYNC_WMIFLAG);
+		ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb,
+					  WMI_ALLOW_AGGR_CMDID,
+					  NO_SYNC_WMIFLAG);
 	}
 #endif
 
@@ -3591,10 +3601,10 @@ int ath6kl_wmi_set_rx_frame_format_cmd(struct wmi *wmi, u8 if_idx,
 	cmd = (struct wmi_rx_frame_format_cmd *) skb->data;
 #ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
-        // force FIPS mode
-        rx_dot11_hdr = 1;
-        defrag_on_host =1;
-        cmd->reserved[0] = 1;
+		/* force FIPS mode */
+		rx_dot11_hdr = 1;
+		defrag_on_host = 1;
+		cmd->reserved[0] = 1;
 	}
 #endif
 	cmd->dot11_hdr = rx_dot11_hdr ? 1 : 0;
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.h b/drivers/net/wireless/ath/ath6kl/wmi.h
index 38ecd37e679c..2edee99bfed7 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.h
+++ b/drivers/net/wireless/ath/ath6kl/wmi.h
@@ -2205,9 +2205,13 @@ struct wmi_delba_event {
  * Configures tid's to allow ADDBA negotiations
  * on each tid, in each direction
  */
-struct wmi_allow_aggr_cmd{
-   u16 tx_allow_aggr; /* 16-bit mask to allow uplink ADDBA negotiation - bit position indicates tid */
-   u16 rx_allow_aggr; /* 16-bit mask to allow downlink ADDBA negotiation - bit position indicates tid */
+struct wmi_allow_aggr_cmd {
+	u16 tx_allow_aggr; /* 16-bit mask to allow uplink ADDBA negotiation
+			    * bit position indicates tid
+			    */
+	u16 rx_allow_aggr; /* 16-bit mask to allow downlink ADDBA negotiation
+			    * bit position indicates tid
+			    */
 } __packed;
 #endif /* CONFIG_ATH6KL_LAIRD_FIPS */
 
-- 
2.11.0

