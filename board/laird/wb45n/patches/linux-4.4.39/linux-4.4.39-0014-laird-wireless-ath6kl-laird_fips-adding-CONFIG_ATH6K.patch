From 68b46bd7dfefd0592fd7cfaf5dbea790b1867fc8 Mon Sep 17 00:00:00 2001
From: Dan Kephart <dan.kephart@lairdtech.com>
Date: Thu, 5 Feb 2015 11:11:40 -0500
Subject: [PATCH] laird: wireless: ath6kl/laird_fips: adding
 CONFIG_ATH6KL_LAIRD_FIPS flag

Creating new config flag CONFIG_ATH6KL_LAIRD_FIPS for ath6kl driver.  This
allows Laird FIPS code for the ath6kl driver to be compile time selectable.

Also moved LAIRD_DRV_VERSION to wmi.c where it is currently used.  This is
needed since the Laird FIPS module headers are now selectable.

Bug: 6690
---
 arch/arm/configs/wb45n_defconfig               |  1 +
 drivers/net/wireless/ath/ath6kl/Kconfig        | 11 +++++++++++
 drivers/net/wireless/ath/ath6kl/cfg80211.c     |  8 ++++----
 drivers/net/wireless/ath/ath6kl/common.h       |  2 ++
 drivers/net/wireless/ath/ath6kl/core.c         |  4 +++-
 drivers/net/wireless/ath/ath6kl/init.c         |  4 +++-
 drivers/net/wireless/ath/ath6kl/main.c         |  6 ++++--
 drivers/net/wireless/ath/ath6kl/txrx.c         | 24 ++++++++++++------------
 drivers/net/wireless/ath/ath6kl/wmi.c          | 13 ++++++++++---
 drivers/net/wireless/ath/ath6kl/wmi.h          |  4 ++--
 drivers/net/wireless/laird_fips/Makefile       |  2 --
 drivers/net/wireless/laird_fips/laird.h        |  6 ------
 drivers/net/wireless/laird_fips/laird_common.h |  2 --
 13 files changed, 52 insertions(+), 35 deletions(-)

diff --git a/arch/arm/configs/wb45n_defconfig b/arch/arm/configs/wb45n_defconfig
index 0d532dd0d0db..223c62b14fda 100644
--- a/arch/arm/configs/wb45n_defconfig
+++ b/arch/arm/configs/wb45n_defconfig
@@ -158,6 +158,7 @@ CONFIG_ATH_CARDS=m
 CONFIG_ATH6KL=m
 CONFIG_ATH6KL_SDIO=m
 CONFIG_ATH6KL_DEBUG=y
+CONFIG_ATH6KL_LAIRD_FIPS=y
 CONFIG_LAIRD_FIPS=m
 # CONFIG_INPUT_MOUSEDEV is not set
 CONFIG_INPUT_EVDEV=y
diff --git a/drivers/net/wireless/ath/ath6kl/Kconfig b/drivers/net/wireless/ath/ath6kl/Kconfig
index 9c125ff083f7..19f5ec2cd531 100644
--- a/drivers/net/wireless/ath/ath6kl/Kconfig
+++ b/drivers/net/wireless/ath/ath6kl/Kconfig
@@ -63,3 +63,14 @@ config ATH6KL_REGDOMAIN
 	  are taken into account.
 
 	  If unsure, say N.
+
+config ATH6KL_LAIRD_FIPS
+	bool "Atheros ath6kl Laird based FIPS support"
+	depends on ATH6KL
+	depends on LAIRD_FIPS
+	---help---
+	  Enabling this makes it possible to enable FIPS mode while using
+	  Laird software, firmware, and hardware. This can only be enabled
+	  if the Laird FIPS module is also selected.
+
+	  If unsure, say N.
diff --git a/drivers/net/wireless/ath/ath6kl/cfg80211.c b/drivers/net/wireless/ath/ath6kl/cfg80211.c
index ff7933b0ac04..95b4b1a13b5b 100644
--- a/drivers/net/wireless/ath/ath6kl/cfg80211.c
+++ b/drivers/net/wireless/ath/ath6kl/cfg80211.c
@@ -813,7 +813,7 @@ void ath6kl_cfg80211_connect_event(struct ath6kl_vif *vif, u16 channel,
 				    assoc_resp_ie, assoc_resp_len, GFP_KERNEL);
 	}
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) laird_setbssid(bssid);
 #endif
 }
@@ -854,7 +854,7 @@ static int ath6kl_cfg80211_disconnect(struct wiphy *wiphy,
 
 	vif->sme_state = SME_DISCONNECTED;
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) laird_setbssid(NULL);
 #endif
 
@@ -1174,7 +1174,7 @@ static int ath6kl_cfg80211_add_key(struct wiphy *wiphy, struct net_device *ndev,
 	memcpy(key->seq, params->seq, key->seq_len);
 	key->cipher = params->cipher;
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
 		laird_addkey(ndev, key_index, pairwise, mac_addr,
 					 key->key, key->key_len, key->seq, key->seq_len);
@@ -1280,7 +1280,7 @@ static int ath6kl_cfg80211_del_key(struct wiphy *wiphy, struct net_device *ndev,
 
 	vif->keys[key_index].key_len = 0;
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
 		laird_delkey(ndev, key_index);
 	}
diff --git a/drivers/net/wireless/ath/ath6kl/common.h b/drivers/net/wireless/ath/ath6kl/common.h
index b0ce4b400687..014d4a65a58c 100644
--- a/drivers/net/wireless/ath/ath6kl/common.h
+++ b/drivers/net/wireless/ath/ath6kl/common.h
@@ -83,6 +83,8 @@ struct ath6kl_htc_credit_info;
 
 struct sk_buff *ath6kl_buf_alloc(int size);
 
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 #include "../../laird_fips/laird.h"
+#endif
 
 #endif /* COMMON_H */
diff --git a/drivers/net/wireless/ath/ath6kl/core.c b/drivers/net/wireless/ath/ath6kl/core.c
index 67bf46f51788..c7155fd018c2 100644
--- a/drivers/net/wireless/ath/ath6kl/core.c
+++ b/drivers/net/wireless/ath/ath6kl/core.c
@@ -27,7 +27,9 @@
 #include "htc-ops.h"
 #include "cfg80211.h"
 
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 #include "../../laird_fips/laird.h"
+#endif
 
 unsigned int debug_mask;
 static unsigned int suspend_mode;
@@ -369,7 +371,7 @@ MODULE_AUTHOR("Qualcomm Atheros");
 MODULE_DESCRIPTION("Core module for AR600x SDIO and USB devices.");
 MODULE_LICENSE("Dual BSD/GPL");
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 // module parameter for enabling fips mode on load
 bool fips_mode = 0;
 module_param(fips_mode, bool, S_IRUGO);
diff --git a/drivers/net/wireless/ath/ath6kl/init.c b/drivers/net/wireless/ath/ath6kl/init.c
index c0d82b0c3163..b1ea82b252f3 100644
--- a/drivers/net/wireless/ath/ath6kl/init.c
+++ b/drivers/net/wireless/ath/ath6kl/init.c
@@ -32,7 +32,9 @@
 #include "hif-ops.h"
 #include "htc-ops.h"
 
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 #include "../../laird_fips/laird.h"
+#endif
 
 static const struct ath6kl_hw hw_list[] = {
 	{
@@ -1877,7 +1879,7 @@ void ath6kl_stop_txrx(struct ath6kl *ar)
 		return;
 	}
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
 		// wait for all fips in progress txrx to complete
 		laird_stop_txrx();
diff --git a/drivers/net/wireless/ath/ath6kl/main.c b/drivers/net/wireless/ath/ath6kl/main.c
index 49887417f048..9bfe30741158 100644
--- a/drivers/net/wireless/ath/ath6kl/main.c
+++ b/drivers/net/wireless/ath/ath6kl/main.c
@@ -23,7 +23,9 @@
 #include "target.h"
 #include "debug.h"
 #include "wmiconfig.h"
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 #include "../../laird_fips/laird.h"
+#endif
 
 struct ath6kl_sta *ath6kl_find_sta(struct ath6kl_vif *vif, u8 *node_addr)
 {
@@ -1304,7 +1306,7 @@ void init_netdev(struct net_device *dev)
 	dev->destructor = free_netdev;
 	dev->watchdog_timeo = ATH6KL_TX_TIMEOUT;
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
 		// TBD: fix with correct header length
 		dev->needed_headroom = 32 + 8;
@@ -1319,7 +1321,7 @@ void init_netdev(struct net_device *dev)
 					WMI_MAX_TX_META_SZ +
 					ATH6KL_HTC_ALIGN_BYTES, 4);
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (!fips_mode)
 		// can only support hardware ip checksum in non-fips mode
 #endif
diff --git a/drivers/net/wireless/ath/ath6kl/txrx.c b/drivers/net/wireless/ath/ath6kl/txrx.c
index 464729ea0923..3ab4a3a56fb9 100644
--- a/drivers/net/wireless/ath/ath6kl/txrx.c
+++ b/drivers/net/wireless/ath/ath6kl/txrx.c
@@ -355,7 +355,7 @@ fail_ctrl_tx:
 	return status;
 }
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 int laird_data_tx_continue(struct sk_buff *skb,
 						   struct net_device *dev,
 						   int isfips)
@@ -378,7 +378,7 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 	u8 meta_ver = 0;
 	u32 flags = 0;
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (isfips < 0) // check if fips encryption failed
 		goto fail_tx;
 #endif
@@ -404,7 +404,7 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 	}
 
 	if (test_bit(WMI_ENABLED, &ar->flag)) {
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 		if (isfips)
 			goto fips_skip1;
 
@@ -434,9 +434,9 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 			goto fail_tx;
 		}
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	fips_skip1: // contunue fips processing here
-#endif /* LAIRD_FIPS */
+#endif /* CONFIG_ATH6KL_LAIRD_FIPS */
 
 		if ((dev->features & NETIF_F_IP_CSUM) &&
 		    (csum == CHECKSUM_PARTIAL)) {
@@ -452,11 +452,11 @@ int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 			meta = NULL;
 		}
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 #define LAIRD_HDR_TYPE (isfips ? WMI_DATA_HDR_DATA_TYPE_802_11 : 0)
 #else
 #define LAIRD_HDR_TYPE 0
-#endif /* LAIRD_FIPS */
+#endif /* CONFIG_ATH6KL_LAIRD_FIPS */
 
 		ret = ath6kl_wmi_data_hdr_add(ar->wmi, skb,
 				DATA_MSGTYPE, flags, LAIRD_HDR_TYPE,
@@ -555,7 +555,7 @@ fail_tx:
 	return 0;
 }
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 int ath6kl_data_tx(struct sk_buff *skb, struct net_device *dev)
 {
 	struct ath6kl *ar = ath6kl_priv(dev);
@@ -685,7 +685,7 @@ enum htc_send_full_action ath6kl_tx_queue_full(struct htc_target *target,
 			spin_unlock_bh(&ar->list_lock);
 
 			set_bit(NETQ_STOPPED, &vif->flags);
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 			if (fips_mode) {
 				// also, stop completed fips packets from being submitted
 		        laird_stop_queue(vif->ndev);
@@ -862,7 +862,7 @@ void ath6kl_tx_complete(struct htc_target *target,
 		if (test_bit(CONNECTED, &vif->flags) &&
 		    !flushing[vif->fw_vif_idx]) {
 			spin_unlock_bh(&ar->list_lock);
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 			if (fips_mode) {
 				// also, enable completed fips packets to be submitted
 				laird_wake_queue(vif->ndev);
@@ -1640,7 +1640,7 @@ void ath6kl_rx(struct htc_target *target, struct htc_packet *packet)
 
 	skb_pull(skb, pad_before_data_start);
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
 		int res;
 		rx_stash_t *stash;
@@ -1753,7 +1753,7 @@ void ath6kl_rx(struct htc_target *target, struct htc_packet *packet)
 	ath6kl_deliver_frames_to_nw_stack(vif->ndev, skb);
 }
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 // continue receive packet processing
 void laird_skb_rx_continue(struct sk_buff *skb, int res)
 {
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index 05cb9c3ae46c..5d26d1aed22f 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -24,7 +24,9 @@
 #include "trace.h"
 #include "../regd.h"
 #include "../regd_common.h"
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 #include "../../laird_fips/laird.h"
+#endif
 #include "wmiconfig.h"
 
 static int ath6kl_wmi_sync_point(struct wmi *wmi, u8 if_idx);
@@ -125,6 +127,11 @@ static const u8 up_to_ac[] = {
 	WMM_AC_VO,
 };
 
+/* Laird version is 32bit value.  Parsed in the form w.x.y.z.
+ * increment y.z as needed for each change
+ */
+#define LAIRD_DRV_VERSION 0x03050001
+
 static void __lrd_remove_channels(struct ath6kl *ar, u8 *num_channels, u16 *channel_list);
 static void __lrd_set_AP_Name(struct wmi *wmi, const char *apname);
 static void __lrd_set_AP_IP(struct wmi *wmi, const char *apip);
@@ -341,7 +348,7 @@ int ath6kl_wmi_implicit_create_pstream(struct wmi *wmi, u8 if_idx,
 	if (!wmm_enabled) {
 		/* If WMM is disabled all traffic goes as BE traffic */
 		usr_pri = 0;
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	} else if (fips_mode) {
 		struct ieee80211_qos_hdr *pwh;
 		pwh = (struct ieee80211_qos_hdr *)(datap +
@@ -3605,7 +3612,7 @@ int ath6kl_wmi_set_rx_frame_format_cmd(struct wmi *wmi, u8 if_idx,
 	struct wmi_rx_frame_format_cmd *cmd;
 	int ret;
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
 		// Disable A-MSDU when in FIPS mode
 		struct wmi_allow_aggr_cmd *fips_cmd;
@@ -3626,7 +3633,7 @@ int ath6kl_wmi_set_rx_frame_format_cmd(struct wmi *wmi, u8 if_idx,
 		return -ENOMEM;
 
 	cmd = (struct wmi_rx_frame_format_cmd *) skb->data;
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 	if (fips_mode) {
         // force FIPS mode
         rx_dot11_hdr = 1;
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.h b/drivers/net/wireless/ath/ath6kl/wmi.h
index a20229b5c824..38ecd37e679c 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.h
+++ b/drivers/net/wireless/ath/ath6kl/wmi.h
@@ -2200,7 +2200,7 @@ struct wmi_delba_event {
 	__le16 reason_code;
 } __packed;
 
-#ifdef LAIRD_FIPS
+#ifdef CONFIG_ATH6KL_LAIRD_FIPS
 /* WMI_ALLOW_AGGR_CMDID
  * Configures tid's to allow ADDBA negotiations
  * on each tid, in each direction
@@ -2209,7 +2209,7 @@ struct wmi_allow_aggr_cmd{
    u16 tx_allow_aggr; /* 16-bit mask to allow uplink ADDBA negotiation - bit position indicates tid */
    u16 rx_allow_aggr; /* 16-bit mask to allow downlink ADDBA negotiation - bit position indicates tid */
 } __packed;
-#endif /* LAIRD_FIPS */
+#endif /* CONFIG_ATH6KL_LAIRD_FIPS */
 
 #define PEER_NODE_JOIN_EVENT		0x00
 #define PEER_NODE_LEAVE_EVENT		0x01
diff --git a/drivers/net/wireless/laird_fips/Makefile b/drivers/net/wireless/laird_fips/Makefile
index 5b117baaed36..04725782326c 100644
--- a/drivers/net/wireless/laird_fips/Makefile
+++ b/drivers/net/wireless/laird_fips/Makefile
@@ -3,5 +3,3 @@ sdc2u-y := mod2urw.o mod2ufn.o moddebug.o
 
 obj-$(CONFIG_LAIRD_FIPS) += ath6kl_laird.o
 ath6kl_laird-y := laird.o laird_mod.o moddebug.o
-
-ccflags-y += -DLAIRD_FIPS
diff --git a/drivers/net/wireless/laird_fips/laird.h b/drivers/net/wireless/laird_fips/laird.h
index acdf36d7c733..527394683621 100644
--- a/drivers/net/wireless/laird_fips/laird.h
+++ b/drivers/net/wireless/laird_fips/laird.h
@@ -6,12 +6,7 @@
 #ifndef LAIRD_DRIVER_H
 #define LAIRD_DRIVER_H
 
-/* Laird version is 32bit value.  Parsed in the form w.x.y.z.
- * increment y.z as needed for each change
- */
-#define LAIRD_DRV_VERSION 0x03050001
 
-#ifdef LAIRD_FIPS
 #include <linux/etherdevice.h>
 #include "laird_common.h"
 
@@ -104,5 +99,4 @@ static inline void laird_stop_txrx(void)
 	(*(laird_register_data->pfn_stop_txrx)) ();
 }
 
-#endif /* LAIRD_FIPS */
 #endif /* LAIRD_DRIVER_H */
diff --git a/drivers/net/wireless/laird_fips/laird_common.h b/drivers/net/wireless/laird_fips/laird_common.h
index 5d766f7f158e..a636ba0dfaab 100644
--- a/drivers/net/wireless/laird_fips/laird_common.h
+++ b/drivers/net/wireless/laird_fips/laird_common.h
@@ -6,7 +6,6 @@
 #ifndef LAIRD_COMMON_H
 #define LAIRD_COMMON_H
 
-#ifdef LAIRD_FIPS
 
 /* res<0 to fail packet, else continue receive */
 typedef void (*pfn_laird_skb_rx_continue) (struct sk_buff * skb, int res);
@@ -66,5 +65,4 @@ typedef struct {
 /* external driver function that the laird module will call */
 extern int ath6kl_laird_register(const laird_register_data_t * ptr);
 
-#endif /* LAIRD_FIPS */
 #endif /* LAIRD_COMMON_H */
-- 
2.11.0

