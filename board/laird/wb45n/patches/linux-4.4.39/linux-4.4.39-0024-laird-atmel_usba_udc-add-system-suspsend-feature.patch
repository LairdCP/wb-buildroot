From be07351ded62b7964a27a79f0a6a842df1b97a3f Mon Sep 17 00:00:00 2001
From: Steve deRosier <steve.derosier@lairdtech.com>
Date: Sat, 5 Dec 2015 09:59:02 -0800
Subject: [PATCH] laird: atmel_usba_udc: add system suspsend feature

This forward ports the usb system suspend feture from Laird's 3.8 kernel
in commit a010e1de654f740bac92496ef7f3a056b9cb1781.

Bug: 8306
---
 drivers/usb/gadget/udc/atmel_usba_udc.c | 155 +++++++++++++++++++++++++++++++-
 drivers/usb/gadget/udc/atmel_usba_udc.h |   1 +
 2 files changed, 152 insertions(+), 4 deletions(-)

diff --git a/drivers/usb/gadget/udc/atmel_usba_udc.c b/drivers/usb/gadget/udc/atmel_usba_udc.c
index f92f5aff0dd5..7d4d071f3698 100644
--- a/drivers/usb/gadget/udc/atmel_usba_udc.c
+++ b/drivers/usb/gadget/udc/atmel_usba_udc.c
@@ -24,11 +24,18 @@
 #include <linux/delay.h>
 #include <linux/of.h>
 #include <linux/of_gpio.h>
+#include <linux/suspend.h>
+#include <linux/workqueue.h>
 
 #include <asm/gpio.h>
 
 #include "atmel_usba_udc.h"
 
+/* System suspend state variables */
+static int usba_suspend_enable = 0; /* disabled by default */
+static suspend_state_t usba_suspend_state = PM_SUSPEND_ON;
+static suspend_state_t usba_suspend_to_state = PM_SUSPEND_STANDBY; /* standby by default */
+
 #ifdef CONFIG_USB_GADGET_DEBUG_FS
 #include <linux/debugfs.h>
 #include <linux/uaccess.h>
@@ -329,6 +336,82 @@ static inline void usba_int_enb_set(struct usba_udc *udc, u32 val)
 	udc->int_enb_cache = val;
 }
 
+/*
+ * System suspend control attributes
+ *
+ * Found in /sys/devices/ahb.0/500000.gadget (or similar due to device tree)
+ *
+ * sys_suspend_en - enable or disable the system suspend feature. disabled is default
+ *      setting values: enable, disable
+ *
+ * sys_suspend_to - set the type of suspend to do. Same values as /sys/power/state
+ *      setting values: standby, mem
+ *      reads "disabled" if sys_suspend_en is disabled.
+ */
+ssize_t usba_sys_suspend_enable_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	ssize_t ret = -EIO;
+
+	if (usba_suspend_enable) {
+		ret = scnprintf(buf, PAGE_SIZE, "enabled\n");
+	} else {
+		ret = scnprintf(buf, PAGE_SIZE, "disabled\n");
+	}
+
+	return ret;
+}
+
+ssize_t usba_sys_suspend_enable_store(struct device *dev, struct device_attribute *attr,
+                 const char *buf, size_t count)
+{
+	int ret = count;
+
+	if (!strncmp(buf, "enable", 6))
+		usba_suspend_enable = 1;
+	else if (!strncmp(buf, "disable", 7))
+		usba_suspend_enable = 0;
+	else
+		ret = -EINVAL;
+
+	return ret;
+}
+
+static DEVICE_ATTR(sys_suspend_en, S_IWUSR | S_IRUGO, usba_sys_suspend_enable_show, usba_sys_suspend_enable_store);
+
+ssize_t usba_suspend_to_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	ssize_t ret = -EIO;
+
+	if (!usba_suspend_enable) {
+		ret = scnprintf(buf, PAGE_SIZE, "disabled\n");
+	} else if (usba_suspend_to_state == PM_SUSPEND_STANDBY) {
+		ret = scnprintf(buf, PAGE_SIZE, "standby\n");
+	} else if (usba_suspend_to_state == PM_SUSPEND_MEM) {
+		ret = scnprintf(buf, PAGE_SIZE, "mem\n");
+	} else {
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+ssize_t usba_suspend_to_store(struct device *dev, struct device_attribute *attr,
+                 const char *buf, size_t count)
+{
+	int ret = count;
+
+	if (!strncmp(buf, "standby", 7))
+		usba_suspend_to_state = PM_SUSPEND_STANDBY;
+	else if (!strncmp(buf, "mem", 3))
+		usba_suspend_to_state = PM_SUSPEND_MEM;
+	else
+		ret = -EINVAL;
+
+	return ret;
+}
+
+static DEVICE_ATTR(sys_suspend_to, S_IWUSR | S_IRUGO, usba_suspend_to_show, usba_suspend_to_store);
+
 static int vbus_is_present(struct usba_udc *udc)
 {
 	if (gpio_is_valid(udc->vbus_pin))
@@ -355,6 +438,23 @@ static void generate_bias_pulse(struct usba_udc *udc)
 	udc->bias_pulse_needed = false;
 }
 
+void atmel_usba_udc_do_suspend(struct work_struct *work)
+{
+	DBG(DBG_PM, "atmel_usba_udc_do_suspend. enabled: %d, state: %d\n",
+		usba_suspend_enable,
+		usba_suspend_state);
+
+	if (usba_suspend_enable) {
+		if (usba_suspend_state > PM_SUSPEND_ON) {
+			pm_suspend(usba_suspend_state);
+		}
+	}
+
+	return;
+}
+
+DECLARE_WORK(suspend_work, atmel_usba_udc_do_suspend);
+
 static void next_fifo_transaction(struct usba_ep *ep, struct usba_request *req)
 {
 	unsigned int transaction_len;
@@ -1639,6 +1739,7 @@ static irqreturn_t usba_udc_irq(int irq, void *devid)
 	if (status & USBA_DET_SUSPEND) {
 		toggle_bias(udc, 0);
 		usba_writel(udc, INT_CLR, USBA_DET_SUSPEND);
+		usba_writel(udc, INT_CLR, USBA_WAKE_UP);
 		usba_int_enb_set(udc, int_enb | USBA_WAKE_UP);
 		udc->bias_pulse_needed = true;
 		DBG(DBG_BUS, "Suspend detected\n");
@@ -1648,6 +1749,17 @@ static irqreturn_t usba_udc_irq(int irq, void *devid)
 			udc->driver->suspend(&udc->gadget);
 			spin_lock(&udc->lock);
 		}
+
+		/* Do system suspend feature, if enabled */
+		if( usba_suspend_enable ) {
+			if( usba_suspend_state < PM_SUSPEND_STANDBY ) {
+				DBG(DBG_PM, "Setting up suspend work\n");
+				usba_suspend_state = usba_suspend_to_state;
+				schedule_work(&suspend_work);
+			}
+		}
+
+
 	}
 
 	if (status & USBA_WAKE_UP) {
@@ -1655,6 +1767,9 @@ static irqreturn_t usba_udc_irq(int irq, void *devid)
 		usba_writel(udc, INT_CLR, USBA_WAKE_UP);
 		usba_int_enb_set(udc, int_enb & ~USBA_WAKE_UP);
 		DBG(DBG_BUS, "Wake Up CPU detected\n");
+		if( usba_suspend_enable ) {
+			usba_suspend_state = PM_SUSPEND_ON;
+		}
 	}
 
 	if (status & USBA_END_OF_RESUME) {
@@ -2204,6 +2319,18 @@ static int usba_udc_probe(struct platform_device *pdev)
 		return ret;
 	device_init_wakeup(&pdev->dev, 1);
 
+
+	/* setup /sys attributes for suspend feature */
+	ret = device_create_file(&pdev->dev, &dev_attr_sys_suspend_en);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable create sys_suspend_en sysfs entry: %d\n", ret);
+	}
+
+	ret = device_create_file(&pdev->dev, &dev_attr_sys_suspend_to);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable create sys_suspend_to sysfs entry: %d\n", ret);
+	}
+
 	usba_init_debugfs(udc);
 	for (i = 1; i < udc->num_ep; i++)
 		usba_ep_init_debugfs(udc, &udc->usba_ep[i]);
@@ -2219,6 +2346,8 @@ static int usba_udc_remove(struct platform_device *pdev)
 	udc = platform_get_drvdata(pdev);
 
 	device_init_wakeup(&pdev->dev, 0);
+	device_remove_file(&pdev->dev, &dev_attr_sys_suspend_en);
+	device_remove_file(&pdev->dev, &dev_attr_sys_suspend_to);
 	usb_del_gadget_udc(&udc->gadget);
 
 	for (i = 1; i < udc->num_ep; i++)
@@ -2237,6 +2366,8 @@ static int usba_udc_suspend(struct device *dev)
 	if (!udc->driver)
 		return 0;
 
+	DBG(DBG_PM, "suspend -- may wake: %d; suspend_enable: %d", device_may_wakeup(dev), usba_suspend_enable);
+
 	mutex_lock(&udc->vbus_mutex);
 
 	if (!device_may_wakeup(dev)) {
@@ -2245,11 +2376,20 @@ static int usba_udc_suspend(struct device *dev)
 	}
 
 	/*
+	 * If we support system suspend/wake-on USB Suspend signal,
+	 * we need to prepare to wake up on that IRQ.
+	 */
+	if (usba_suspend_enable) {
+		enable_irq_wake(udc->irq);
+	}
+
+	/*
 	 * Device may wake up. We stay clocked if we failed
 	 * to request vbus irq, assuming always on.
 	 */
 	if (gpio_is_valid(udc->vbus_pin)) {
-		usba_stop(udc);
+		if (!usba_suspend_enable) /* Don't stop the clock if using usb suspend */
+			usba_stop(udc);
 		enable_irq_wake(gpio_to_irq(udc->vbus_pin));
 	}
 
@@ -2266,13 +2406,20 @@ static int usba_udc_resume(struct device *dev)
 	if (!udc->driver)
 		return 0;
 
-	if (device_may_wakeup(dev) && gpio_is_valid(udc->vbus_pin))
-		disable_irq_wake(gpio_to_irq(udc->vbus_pin));
+	DBG(DBG_PM, "resume -- may wake: %d; suspend_enable: %d", device_may_wakeup(dev), usba_suspend_enable);
+
+	if (device_may_wakeup(dev))
+	{
+		if (gpio_is_valid(udc->vbus_pin))
+			disable_irq_wake(gpio_to_irq(udc->vbus_pin));
+		if (usba_suspend_enable)
+			disable_irq_wake(udc->irq);
+	}
 
 	/* If Vbus is present, enable the controller and wait for reset */
 	mutex_lock(&udc->vbus_mutex);
 	udc->vbus_prev = vbus_is_present(udc);
-	if (udc->vbus_prev)
+	if (udc->vbus_prev && !usba_suspend_enable)
 		usba_start(udc);
 	mutex_unlock(&udc->vbus_mutex);
 
diff --git a/drivers/usb/gadget/udc/atmel_usba_udc.h b/drivers/usb/gadget/udc/atmel_usba_udc.h
index ea448a344767..411f28427f9f 100644
--- a/drivers/usb/gadget/udc/atmel_usba_udc.h
+++ b/drivers/usb/gadget/udc/atmel_usba_udc.h
@@ -238,6 +238,7 @@
 #define DBG_FIFO	0x0040  /* debug FIFO contents */
 #define DBG_DMA		0x0080  /* debug DMA handling */
 #define DBG_REQ		0x0100	/* print out queued request length */
+#define DBG_PM		0x0200  /* debug power management */
 #define DBG_ALL		0xffff
 #define DBG_NONE	0x0000
 
-- 
2.11.0

