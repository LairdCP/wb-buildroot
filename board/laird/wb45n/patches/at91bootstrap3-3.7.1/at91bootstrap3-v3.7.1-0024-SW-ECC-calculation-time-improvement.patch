From 48cf9d744b4d481a227fb0aa516fbd0708099149 Mon Sep 17 00:00:00 2001
From: Andreas Neubacher <a_neubi@gmx.at>
Date: Thu, 1 Jan 2015 12:39:22 +0100
Subject: [PATCH] SW-ECC calculation-time improvement

* modified function "CountBitsInByte()" from a simple loop to a faster lookup-table
* consumes about 260Bytes more static code (LookupTable)

Signed-off-by: Andreas Neubacher <neubacher.andreas@gmail.com>
[wenyou.yang@atmel.com: add #ifdef to make at91sam9260 use the old algorithm, due to the sram size limitation]
Signed-off-by: Wenyou Yang <wenyou.yang@atmel.com>
[wenyou.yang@atmel.com: Verified it on the at91sam9m10g45ek]
Tested-by: Wenyou Yang <wenyou.yang@atmel.com>
---
 driver/hamming.c | 16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)

diff --git a/driver/hamming.c b/driver/hamming.c
index 8f1d5e8..7045a32 100644
--- a/driver/hamming.c
+++ b/driver/hamming.c
@@ -27,6 +27,7 @@
  */
 #include "hamming.h"
 
+#ifdef CONFIG_AT91SAM9260EK
 static unsigned char CountBitsInByte(unsigned char byte)
 {
 	unsigned char count = 0;
@@ -40,8 +41,21 @@ static unsigned char CountBitsInByte(unsigned char byte)
 
 	return count;
 }
+#else
+static const unsigned char BitsSetTable256[256] = {
+	#define B2(n) n,     n+1,     n+1,     n+2
+	#define B4(n) B2(n), B2(n+1), B2(n+1), B2(n+2)
+	#define B6(n) B4(n), B4(n+1), B4(n+1), B4(n+2)
+	B6(0), B6(1), B6(1), B6(2)
+};
+
+static inline unsigned char CountBitsInByte(unsigned char byte)
+{
+	return BitsSetTable256[byte];
+}
+#endif
 
-static unsigned char CountBitsInCode256(unsigned char *code)
+static inline unsigned char CountBitsInCode256(unsigned char *code)
 {
 	return CountBitsInByte(code[0])
 		+ CountBitsInByte(code[1])
-- 
1.9.1

