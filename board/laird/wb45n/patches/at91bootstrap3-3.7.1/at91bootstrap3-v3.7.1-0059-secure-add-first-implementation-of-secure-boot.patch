From b9e6eb2ac10235cc70aa2d1e28b1984b233dc7f5 Mon Sep 17 00:00:00 2001
From: Cyrille Pitchen <cyrille.pitchen@atmel.com>
Date: Wed, 11 Feb 2015 12:02:57 +0100
Subject: [PATCH] secure: add first implementation of secure boot

This version doesn't support Linux or Android image yet.

Signed-off-by: Cyrille Pitchen <cyrille.pitchen@atmel.com>
---
 Config.in            |   2 +
 Config.in.secure     | 117 ++++++++++++++++++++++++++++++++++++++++++
 driver/driver.mk     |   1 +
 driver/driver_cpp.mk |   4 ++
 driver/secure.c      | 142 +++++++++++++++++++++++++++++++++++++++++++++++++++
 include/secure.h     |  47 +++++++++++++++++
 main.c               |  11 ++++
 7 files changed, 324 insertions(+)
 create mode 100644 Config.in.secure
 create mode 100644 driver/secure.c
 create mode 100644 include/secure.h

diff --git a/Config.in b/Config.in
index 3c4ff41..6c0ff59 100644
--- a/Config.in
+++ b/Config.in
@@ -296,6 +296,8 @@ config CONFIG_DEBUG_VERY_LOUD
 
 endchoice
 
+source "Config.in.secure"
+
 config CONFIG_THUMB
 	depends on !(SAMA5D3X || SAMA5D4)
 	bool "Build in thumb mode"
diff --git a/Config.in.secure b/Config.in.secure
new file mode 100644
index 0000000..47bb4a1
--- /dev/null
+++ b/Config.in.secure
@@ -0,0 +1,117 @@
+config CONFIG_SECURE
+	bool "Secure Mode support"
+	default n
+	depends on CPU_HAS_AES && !CONFIG_LOAD_LINUX && !CONFIG_LOAD_ANDROID
+	select CONFIG_AES
+	help
+	  Decrypt and check the signature of the application file
+
+menu "Secure Mode Options"
+	depends on CONFIG_SECURE
+
+choice
+	prompt "Key Size"
+	default CONFIG_AES_KEY_SIZE_256
+	help
+	  Select the length of the cipher and CMAC keys
+
+config	CONFIG_AES_KEY_SIZE_128
+	bool "AES-128"
+
+config	CONFIG_AES_KEY_SIZE_192
+	bool "AES-192"
+
+config	CONFIG_AES_KEY_SIZE_256
+	bool "AES-256"
+
+endchoice
+
+config CONFIG_AES_CIPHER_KEY_WORD0
+	hex "Cipher Key Word0"
+	default "0x00000000"
+
+config CONFIG_AES_CIPHER_KEY_WORD1
+	hex "Cipher Key Word1"
+	default "0x00000000"
+
+config CONFIG_AES_CIPHER_KEY_WORD2
+	hex "Cipher Key Word2"
+	default "0x00000000"
+
+config CONFIG_AES_CIPHER_KEY_WORD3
+	hex "Cipher Key Word3"
+	default "0x00000000"
+
+config CONFIG_AES_CIPHER_KEY_WORD4
+	hex "Cipher Key Word4"
+	default "0x00000000"
+	depends on (CONFIG_AES_KEY_SIZE_192 || CONFIG_AES_KEY_SIZE_256)
+
+config CONFIG_AES_CIPHER_KEY_WORD5
+	hex "Cipher Key Word5"
+	default "0x00000000"
+	depends on (CONFIG_AES_KEY_SIZE_192 || CONFIG_AES_KEY_SIZE_256)
+
+config CONFIG_AES_CIPHER_KEY_WORD6
+	hex "Cipher Key Word6"
+	default "0x00000000"
+	depends on CONFIG_AES_KEY_SIZE_256
+
+config CONFIG_AES_CIPHER_KEY_WORD7
+	hex "Cipher Key Word7"
+	default "0x00000000"
+	depends on CONFIG_AES_KEY_SIZE_256
+
+config CONFIG_AES_IV_WORD0
+	hex "Initialization Vector Word0"
+	default "0x00000000"
+
+config CONFIG_AES_IV_WORD1
+	hex "Initialization Vector Word1"
+	default "0x00000000"
+
+config CONFIG_AES_IV_WORD2
+	hex "Initialization Vector Word2"
+	default "0x00000000"
+
+config CONFIG_AES_IV_WORD3
+	hex "Initialization Vector Word3"
+	default "0x00000000"
+
+config CONFIG_AES_CMAC_KEY_WORD0
+	hex "CMAC Key Word0"
+	default "0x00000000"
+
+config CONFIG_AES_CMAC_KEY_WORD1
+	hex "CMAC Key Word1"
+	default "0x00000000"
+
+config CONFIG_AES_CMAC_KEY_WORD2
+	hex "CMAC Key Word2"
+	default "0x00000000"
+
+config CONFIG_AES_CMAC_KEY_WORD3
+	hex "CMAC Key Word3"
+	default "0x00000000"
+
+config CONFIG_AES_CMAC_KEY_WORD4
+	hex "CMAC Key Word4"
+	default "0x00000000"
+	depends on (CONFIG_AES_KEY_SIZE_192 || CONFIG_AES_KEY_SIZE_256)
+
+config CONFIG_AES_CMAC_KEY_WORD5
+	hex "CMAC Key Word5"
+	default "0x00000000"
+	depends on (CONFIG_AES_KEY_SIZE_192 || CONFIG_AES_KEY_SIZE_256)
+
+config CONFIG_AES_CMAC_KEY_WORD6
+	hex "CMAC Key Word6"
+	default "0x00000000"
+	depends on CONFIG_AES_KEY_SIZE_256
+
+config CONFIG_AES_CMAC_KEY_WORD7
+	hex "CMAC Key Word7"
+	default "0x00000000"
+	depends on CONFIG_AES_KEY_SIZE_256
+
+endmenu
diff --git a/driver/driver.mk b/driver/driver.mk
index 7ff21a4..1c01c3e 100644
--- a/driver/driver.mk
+++ b/driver/driver.mk
@@ -59,3 +59,4 @@ COBJS-$(CONFIG_HDMI)	+= $(DRIVERS_SRC)/hdmi_SiI9022.o
 COBJS-$(CONFIG_WM8904)	+= $(DRIVERS_SRC)/wm8904.o
 
 COBJS-$(CONFIG_AES)		+= $(DRIVERS_SRC)/at91_aes.o
+COBJS-$(CONFIG_SECURE)		+= $(DRIVERS_SRC)/secure.o
diff --git a/driver/driver_cpp.mk b/driver/driver_cpp.mk
index 34271b4..3c97b85 100644
--- a/driver/driver_cpp.mk
+++ b/driver/driver_cpp.mk
@@ -319,3 +319,7 @@ endif
 ifeq ($(CONFIG_AUTOCONFIG_TWI_BUS), y)
 CPPFLAGS += -DCONFIG_AUTOCONFIG_TWI_BUS
 endif
+
+ifeq ($(CONFIG_SECURE), y)
+CPPFLAGS += -DCONFIG_SECURE
+endif
diff --git a/driver/secure.c b/driver/secure.c
new file mode 100644
index 0000000..c82a574
--- /dev/null
+++ b/driver/secure.c
@@ -0,0 +1,142 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2015, Atmel Corporation
+
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaiimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#include "common.h"
+#include "secure.h"
+#include "aes.h"
+#include "debug.h"
+#include "string.h"
+#include "autoconf.h"
+
+
+static inline void init_keys(at91_aes_key_size_t *key_size,
+			     unsigned int *cipher_key,
+			     unsigned int *cmac_key,
+			     unsigned int *iv)
+{
+#if defined(CONFIG_AES_KEY_SIZE_128)
+	*key_size = AT91_AES_KEY_SIZE_128;
+#elif defined(CONFIG_AES_KEY_SIZE_192)
+	*key_size = AT91_AES_KEY_SIZE_192;
+#elif defined(CONFIG_AES_KEY_SIZE_256)
+	*key_size = AT91_AES_KEY_SIZE_256;
+#else
+#error "bad AES key size"
+#endif
+
+	iv[0]		= CONFIG_AES_IV_WORD0;
+	iv[1]		= CONFIG_AES_IV_WORD1;
+	iv[2]		= CONFIG_AES_IV_WORD2;
+	iv[3]		= CONFIG_AES_IV_WORD3;
+
+	cipher_key[0]	= CONFIG_AES_CIPHER_KEY_WORD0;
+	cmac_key[0]	= CONFIG_AES_CMAC_KEY_WORD0;
+	cipher_key[1]	= CONFIG_AES_CIPHER_KEY_WORD1;
+	cmac_key[1]	= CONFIG_AES_CMAC_KEY_WORD1;
+	cipher_key[2]	= CONFIG_AES_CIPHER_KEY_WORD2;
+	cmac_key[2]	= CONFIG_AES_CMAC_KEY_WORD2;
+	cipher_key[3]	= CONFIG_AES_CIPHER_KEY_WORD3;
+	cmac_key[3]	= CONFIG_AES_CMAC_KEY_WORD3;
+
+#if defined(CONFIG_AES_KEY_SIZE_192) || defined(CONFIG_AES_KEY_SIZE_256)
+	cipher_key[4]	= CONFIG_AES_CIPHER_KEY_WORD4;
+	cmac_key[4]	= CONFIG_AES_CMAC_KEY_WORD4;
+	cipher_key[5]	= CONFIG_AES_CIPHER_KEY_WORD5;
+	cmac_key[5]	= CONFIG_AES_CMAC_KEY_WORD5;
+#endif
+
+#if defined(CONFIG_AES_KEY_SIZE_256)
+	cipher_key[6]	= CONFIG_AES_CIPHER_KEY_WORD6;
+	cmac_key[6]	= CONFIG_AES_CMAC_KEY_WORD6;
+	cipher_key[7]	= CONFIG_AES_CIPHER_KEY_WORD7;
+	cmac_key[7]	= CONFIG_AES_CMAC_KEY_WORD7;
+#endif
+}
+
+int secure_decrypt(void *data, unsigned int data_length, int is_signed)
+{
+	at91_aes_key_size_t key_size;
+	unsigned int cmac_key[8], cipher_key[8];
+	unsigned int iv[AT91_AES_IV_SIZE_WORD];
+	unsigned int computed_cmac[AT91_AES_BLOCK_SIZE_WORD];
+	unsigned int fixed_length;
+	const unsigned int *cmac;
+	int rc = -1;
+
+	/* Init keys */
+	init_keys(&key_size, cipher_key, cmac_key, iv);
+
+	/* Init periph */
+	at91_aes_init();
+
+	/* Check signature if required */
+	if (is_signed) {
+		/* Compute the CMAC */
+		if (at91_aes_cmac(data_length, data, computed_cmac,
+				  key_size, cmac_key))
+			goto exit;
+
+		/* Check the CMAC */
+		fixed_length = at91_aes_roundup(data_length);
+		cmac = (const unsigned int *)((char *)data + fixed_length);
+		if (memcmp(cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE))
+			goto exit;
+	}
+
+	/* Decrypt the whole file */
+	if (at91_aes_cbc(data_length, data, data, 0,
+			 key_size, cipher_key, iv))
+		goto exit;
+
+	rc = 0;
+exit:
+	/* Reset periph */
+	at91_aes_cleanup();
+
+	/* Reset keys */
+	memset(cmac_key, 0, sizeof(cmac_key));
+	memset(cipher_key, 0, sizeof(cipher_key));
+	memset(iv, 0, sizeof(iv));
+
+	return rc;
+}
+
+int secure_check(void *data)
+{
+	const at91_secure_header_t *header;
+	void *file;
+
+	if (secure_decrypt(data, sizeof(header), 0))
+		return -1;
+
+	header = (const at91_secure_header_t *)data;
+	if (header->magic != AT91_SECURE_MAGIC)
+		return -1;
+
+	file = (unsigned char *)data + sizeof(*header);
+	return secure_decrypt(file, header->file_size, 1);
+}
diff --git a/include/secure.h b/include/secure.h
new file mode 100644
index 0000000..9398b8b
--- /dev/null
+++ b/include/secure.h
@@ -0,0 +1,47 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2015, Atmel Corporation
+
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef __SECURE_H__
+#define __SECURE_H__
+
+struct image_info;
+
+
+#define AT91_SECURE_MAGIC	0x0000aa55
+
+/* the size of this structure MUST be equal to the size of an AES block */
+typedef struct at91_secure_header {
+	unsigned int		magic;
+	unsigned int		file_size;
+	unsigned int		reserved[2];
+} at91_secure_header_t;
+
+
+int secure_decrypt(void *data, unsigned int data_length, int is_signed);
+int secure_check(void *data);
+
+#endif /* #ifdef __SECURE_H__ */
diff --git a/main.c b/main.c
index d87b32b..ede5ffb 100644
--- a/main.c
+++ b/main.c
@@ -40,6 +40,7 @@
 #include "tz_utils.h"
 #include "pm.h"
 #include "act8865.h"
+#include "secure.h"
 
 extern int load_kernel(struct image_info *img_info);
 
@@ -164,8 +165,18 @@ int main(void)
 
 	init_loadfunction();
 
+#if defined(CONFIG_SECURE)
+	image.dest -= sizeof(at91_secure_header_t);
+#endif
+
 	ret = (*load_image)(&image);
 
+#if defined(CONFIG_SECURE)
+	if (!ret)
+		ret = secure_check(image.dest);
+	image.dest += sizeof(at91_secure_header_t);
+#endif
+
 	if (media_str)
 		usart_puts(media_str);
 
-- 
1.9.1

