From 577415deae6b8969fb8232949b4a969f4abd4c28 Mon Sep 17 00:00:00 2001
From: Cyrille Pitchen <cyrille.pitchen@atmel.com>
Date: Wed, 11 Feb 2015 12:02:54 +0100
Subject: [PATCH] aes: add driver for AES peripheral

Signed-off-by: Cyrille Pitchen <cyrille.pitchen@atmel.com>
---
 driver/Config.in.driver |   4 +
 driver/at91_aes.c       | 499 ++++++++++++++++++++++++++++++++++++++++++++++++
 driver/driver.mk        |   2 +
 include/aes.h           | 109 +++++++++++
 include/arch/at91_aes.h | 125 ++++++++++++
 5 files changed, 739 insertions(+)
 create mode 100644 driver/at91_aes.c
 create mode 100644 include/aes.h
 create mode 100644 include/arch/at91_aes.h

diff --git a/driver/Config.in.driver b/driver/Config.in.driver
index 4ff385a..369cd55 100644
--- a/driver/Config.in.driver
+++ b/driver/Config.in.driver
@@ -43,6 +43,10 @@ config CONFIG_MACB
 	bool
 	default n
 
+config CONFIG_AES
+	bool
+	default n
+
 config CONFIG_LOAD_HW_INFO
 	bool
 	default n
diff --git a/driver/at91_aes.c b/driver/at91_aes.c
new file mode 100644
index 0000000..528020c
--- /dev/null
+++ b/driver/at91_aes.c
@@ -0,0 +1,499 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2015, Atmel Corporation
+
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaiimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#include "hardware.h"
+#include "pmc.h"
+#include "arch/at91_aes.h"
+#include "aes.h"
+#include "debug.h"
+#include "board.h"
+#include "string.h"
+
+
+static inline unsigned int aes_readl(unsigned int reg)
+{
+	return readl(AT91C_BASE_AES + reg);
+}
+
+static inline void aes_writel(unsigned int reg, unsigned int value)
+{
+	writel(value, AT91C_BASE_AES + reg);
+}
+
+static inline unsigned short aes_readw(unsigned int reg)
+{
+	return readw(AT91C_BASE_AES + reg);
+}
+
+static inline void aes_writew(unsigned int reg, unsigned short value)
+{
+	writew(value, AT91C_BASE_AES + reg);
+}
+
+static inline unsigned char aes_readb(unsigned int reg)
+{
+	return readb(AT91C_BASE_AES + reg);
+}
+
+static inline void aes_writeb(unsigned int reg, unsigned char value)
+{
+	writeb(value, AT91C_BASE_AES + reg);
+}
+
+
+void at91_aes_init(void)
+{
+	/* Enable peripheral clock */
+	pmc_enable_periph_clock(AT91C_ID_AES);
+
+	/* Reset AES */
+	aes_writel(AES_CR, AES_CR_SWRST);
+}
+
+void at91_aes_cleanup(void)
+{
+	/* Reset AES */
+	aes_writel(AES_CR, AES_CR_SWRST);
+
+	/* Disable peripheral clock */
+	pmc_disable_periph_clock(AT91C_ID_AES);
+}
+
+static inline void at91_aes_set_iv(const unsigned int *iv)
+{
+	unsigned int i, reg = AES_IVR0;
+
+	for (i = 0; i < AT91_AES_IV_SIZE_WORD; ++i, reg += 4)
+		aes_writel(reg, iv[i]);
+}
+
+static inline int at91_aes_set_opmode(at91_aes_operation_t operation,
+				      at91_aes_mode_t mode,
+				      at91_aes_key_size_t key_size,
+				      unsigned int *data_width,
+				      unsigned int *chunk_size)
+{
+	unsigned int mr = AES_MR_CKEY_PASSWD | AES_MR_SMOD_AUTO_START;
+
+	switch (operation) {
+	case AT91_AES_OP_DECRYPT:
+		mr |= AES_MR_CIPHER_DECRYPT;
+		break;
+
+	case AT91_AES_OP_ENCRYPT:
+		mr |= AES_MR_CIPHER_ENCRYPT;
+		break;
+
+	case AT91_AES_OP_MAC:
+		mr |= AES_MR_CIPHER_ENCRYPT | AES_MR_LOD;
+		break;
+
+	default:
+		return -1;
+	}
+
+	switch (mode) {
+	case AT91_AES_MODE_ECB:
+		mr |= AES_MR_OPMOD_ECB;
+		*chunk_size = 4;
+		*data_width = 4;
+		break;
+
+	case AT91_AES_MODE_CBC:
+		mr |= AES_MR_OPMOD_CBC;
+		*chunk_size = 4;
+		*data_width = 4;
+		break;
+
+	case AT91_AES_MODE_OFB:
+		mr |= AES_MR_OPMOD_OFB;
+		*chunk_size = 4;
+		*data_width = 4;
+		break;
+
+	case AT91_AES_MODE_CFB_128:
+		mr |= AES_MR_OPMOD_CFB | AES_MR_CFBS_128BIT;
+		*chunk_size = 4;
+		*data_width = 4;
+		break;
+
+	case AT91_AES_MODE_CFB_64:
+		mr |= AES_MR_OPMOD_CFB | AES_MR_CFBS_64BIT;
+		*chunk_size = 2;
+		*data_width = 4;
+		break;
+
+	case AT91_AES_MODE_CFB_32:
+		mr |= AES_MR_OPMOD_CFB | AES_MR_CFBS_32BIT;
+		*chunk_size = 1;
+		*data_width = 4;
+		break;
+
+	case AT91_AES_MODE_CFB_16:
+		mr |= AES_MR_OPMOD_CFB | AES_MR_CFBS_16BIT;
+		*chunk_size = 1;
+		*data_width = 2;
+		break;
+
+	case AT91_AES_MODE_CFB_8:
+		mr |= AES_MR_OPMOD_CFB | AES_MR_CFBS_8BIT;
+		*chunk_size = 1;
+		*data_width = 1;
+		break;
+
+	case AT91_AES_MODE_CTR:
+		mr |= AES_MR_OPMOD_CTR;
+		*chunk_size = 4;
+		*data_width = 4;
+		break;
+
+	case AT91_AES_MODE_GCM:
+		mr |= AES_MR_OPMOD_GCM;
+		*chunk_size = 4;
+		*data_width = 4;
+		break;
+
+	default:
+		return -1;
+	}
+
+	switch (key_size) {
+	case AT91_AES_KEY_SIZE_128:
+		mr |= AES_MR_KEYSIZE_AES128;
+		break;
+
+	case AT91_AES_KEY_SIZE_192:
+		mr |= AES_MR_KEYSIZE_AES192;
+		break;
+
+	case AT91_AES_KEY_SIZE_256:
+		mr |= AES_MR_KEYSIZE_AES256;
+		break;
+
+	default:
+		return -1;
+	}
+
+	aes_writel(AES_MR, mr);
+	return 0;
+}
+
+static inline int at91_aes_set_key(at91_aes_key_size_t key_size,
+				   const unsigned int *key)
+{
+	unsigned int i, num_words, reg = AES_KEYWR0;
+
+	switch (key_size) {
+	case AT91_AES_KEY_SIZE_128:
+		num_words = 4;
+		break;
+
+	case AT91_AES_KEY_SIZE_192:
+		num_words = 6;
+		break;
+
+	case AT91_AES_KEY_SIZE_256:
+		num_words = 8;
+		break;
+
+	default:
+		return -1;
+	}
+
+	for (i = 0; i < num_words; ++i, reg += 4)
+		aes_writel(reg, key[i]);
+
+	return 0;
+}
+
+
+static void at91_aes_compute_pio_long(unsigned int chunk_size,
+				      unsigned int num_blocks,
+				      unsigned int is_mac,
+				      const unsigned int *input,
+				      unsigned int *output)
+{
+	unsigned int n, i, reg;
+
+	for (n = 0; n < num_blocks; ++n) {
+		reg = AES_IDATAR0;
+		for (i = 0; i < chunk_size; ++i, reg += 4)
+			aes_writel(reg, *input++);
+
+		while (!(aes_readl(AES_ISR) & AES_INT_DATRDY));
+		if (is_mac)
+			continue;
+
+		reg = AES_ODATAR0;
+		for (i = 0; i < chunk_size; ++i, reg += 4)
+			*output++ = aes_readl(reg);
+	}
+}
+
+static void at91_aes_compute_pio_word(unsigned int num_blocks,
+				      unsigned int is_mac,
+				      const unsigned short *input,
+				      unsigned short *output)
+{
+	unsigned int n;
+
+	for (n = 0; n < num_blocks; ++n) {
+		aes_writew(AES_IDATAR0, *input++);
+
+		while (!(aes_readl(AES_ISR) & AES_INT_DATRDY));
+		if (is_mac)
+			continue;
+
+		*output++ = aes_readw(AES_ODATAR0);
+	}
+}
+
+static void at91_aes_compute_pio_byte(unsigned int num_blocks,
+				      unsigned int is_mac,
+				      const unsigned char *input,
+				      unsigned char *output)
+{
+	unsigned int n;
+
+	for (n = 0; n < num_blocks; ++n) {
+		aes_writeb(AES_IDATAR0, *input++);
+
+		while (!(aes_readl(AES_ISR) & AES_INT_DATRDY));
+		if (is_mac)
+			continue;
+
+		*output++ = aes_readb(AES_ODATAR0);
+	}
+}
+
+static void at91_aes_compute_pio(unsigned int data_width,
+				 unsigned int chunk_size,
+				 unsigned int num_blocks,
+				 unsigned int is_mac,
+				 const void *input,
+				 void *output)
+{
+	switch (data_width) {
+	case 4:
+		at91_aes_compute_pio_long(chunk_size,
+					  num_blocks,
+					  is_mac,
+					  (const unsigned int *)input,
+					  (unsigned int *)output);
+		break;
+
+	case 2:
+		at91_aes_compute_pio_word(num_blocks,
+					  is_mac,
+					  (const unsigned short *)input,
+					  (unsigned short *)output);
+		break;
+
+	case 1:
+		at91_aes_compute_pio_byte(num_blocks,
+					  is_mac,
+					  (const unsigned char *)input,
+					  (unsigned char *)output);
+		break;
+
+	default:
+		break;
+	}
+}
+
+static inline unsigned int at91_aes_length2blocks(unsigned int data_length,
+						  unsigned int block_size)
+{
+	unsigned int mask = 0;
+	unsigned int shift = 0;
+
+	switch (block_size) {
+	default:
+	case 1:
+		break;
+
+	case 2:
+		mask = 0x1;
+		shift = 1;
+		break;
+
+	case 4:
+		mask = 0x3;
+		shift = 2;
+		break;
+
+	case 8:
+		mask = 0x7;
+		shift = 3;
+		break;
+
+	case 16:
+		mask = 0xf;
+		shift = 4;
+		break;
+	}
+
+	return (data_length >> shift) + ((data_length & mask) ? 1 : 0);
+}
+
+static int at91_aes_process(const at91_aes_params_t *params)
+{
+	unsigned int data_width, chunk_size;
+	unsigned int block_size, num_blocks;
+	unsigned int is_mac = (params->operation == AT91_AES_OP_MAC);
+
+	/* Reset AES */
+	aes_writel(AES_CR, AES_CR_SWRST);
+
+	if (at91_aes_set_opmode(params->operation, params->mode,
+				params->key_size, &data_width, &chunk_size))
+		return -1;
+
+	if (at91_aes_set_key(params->key_size, params->key))
+		return -1;
+
+	if (params->mode != AT91_AES_MODE_ECB)
+		at91_aes_set_iv(params->iv);
+
+
+	aes_writel(AES_IER, AES_INT_DATRDY);
+
+	block_size = data_width * chunk_size;
+	num_blocks = at91_aes_length2blocks(params->data_length, block_size);
+	at91_aes_compute_pio(data_width, chunk_size, num_blocks,
+			     is_mac, params->input, params->output);
+
+	if (is_mac) {
+		unsigned int reg, i;
+
+		reg = AES_ODATAR0;
+		for (i = 0; i < AT91_AES_BLOCK_SIZE_WORD; ++i, reg += 4)
+			((unsigned int *)params->output)[i] = aes_readl(reg);
+	}
+
+	return 0;
+}
+
+int at91_aes_cbc(unsigned int data_length,
+		 const void *input,
+		 void *output,
+		 int encrypt,
+		 at91_aes_key_size_t key_size,
+		 const unsigned int *key,
+		 const unsigned int *iv)
+{
+	at91_aes_params_t params;
+
+	if (!data_length || !input || !output || !key || !iv)
+		return -1;
+
+	memset(&params, 0, sizeof(params));
+	params.operation = (encrypt) ? AT91_AES_OP_ENCRYPT : AT91_AES_OP_DECRYPT;
+	params.mode = AT91_AES_MODE_CBC;
+	params.data_length = data_length;
+	params.input = input;
+	params.output = output;
+	params.key_size = key_size;
+	params.key = key;
+	params.iv = iv;
+
+	return at91_aes_process(&params);
+}
+
+int at91_aes_cmac(unsigned int data_length,
+		  const void *data,
+		  unsigned int *cmac,
+		  at91_aes_key_size_t key_size,
+		  const unsigned int *key)
+{
+	static const unsigned int null_block[AT91_AES_BLOCK_SIZE_WORD];
+	static const unsigned int null_iv[AT91_AES_IV_SIZE_WORD];
+	unsigned int last_input[AT91_AES_BLOCK_SIZE_WORD];
+	unsigned int subkey[AT91_AES_BLOCK_SIZE_WORD];
+	const unsigned int *input = (const unsigned int *)data;
+	unsigned int num_blocks, offset;
+	at91_aes_params_t params;
+	unsigned char carry;
+	int i; /* MUST be signed for the subkey loop */
+
+	if (!data_length || !data || !cmac || !key)
+		return -1;
+
+	/* Set common parameters once for all */
+	memset(&params, 0, sizeof(params));
+	params.key_size = key_size;
+	params.key = key;
+
+	/* Generate the subkey */
+	params.operation = AT91_AES_OP_ENCRYPT;
+	params.mode = AT91_AES_MODE_ECB;
+	params.data_length = AT91_AES_BLOCK_SIZE_BYTE;
+	params.input = null_block;
+	params.output = subkey;
+	if (at91_aes_process(&params))
+		return -1;
+
+	carry = 0;
+	for (i = AT91_AES_BLOCK_SIZE_BYTE-1; i >= 0; --i) {
+		unsigned char tmp, next_carry;
+
+		tmp = ((unsigned char *)subkey)[i];
+		next_carry = ((tmp & 0x80) != 0);
+		((unsigned char *)subkey)[i] = (tmp << 1) | carry;
+		carry = next_carry;
+	}
+	carry = (0 - carry) & 0x87;
+	((unsigned char *)subkey)[AT91_AES_BLOCK_SIZE_BYTE-1] ^= carry;
+
+	/* Process the n-1 first blocks */
+	num_blocks = at91_aes_length2blocks(data_length,
+					    AT91_AES_BLOCK_SIZE_BYTE);
+	if (num_blocks > 1) {
+		params.operation = AT91_AES_OP_MAC;
+		params.mode = AT91_AES_MODE_CBC;
+		params.iv = null_iv;
+		params.data_length = data_length - AT91_AES_BLOCK_SIZE_BYTE;
+		params.input = data;
+		params.output = cmac;
+		if (at91_aes_process(&params))
+			return -1;
+	} else {
+		memset(cmac, 0, AT91_AES_BLOCK_SIZE_BYTE);
+	}
+
+	/* Process the last block */
+	offset = (num_blocks-1) * AT91_AES_BLOCK_SIZE_WORD;
+	for (i = 0; i < AT91_AES_BLOCK_SIZE_WORD; ++i)
+		last_input[i] = input[offset + i] ^ cmac[i] ^ subkey[i];
+
+	params.operation = AT91_AES_OP_ENCRYPT;
+	params.mode = AT91_AES_MODE_ECB;
+	params.data_length = AT91_AES_BLOCK_SIZE_BYTE;
+	params.input = last_input;
+	params.output = cmac;
+	return at91_aes_process(&params);
+}
diff --git a/driver/driver.mk b/driver/driver.mk
index ab6497b..7ff21a4 100644
--- a/driver/driver.mk
+++ b/driver/driver.mk
@@ -57,3 +57,5 @@ COBJS-$(CONFIG_ACT8865)	+= $(DRIVERS_SRC)/act8865.o
 COBJS-$(CONFIG_MACB)	+= $(DRIVERS_SRC)/macb.o
 COBJS-$(CONFIG_HDMI)	+= $(DRIVERS_SRC)/hdmi_SiI9022.o
 COBJS-$(CONFIG_WM8904)	+= $(DRIVERS_SRC)/wm8904.o
+
+COBJS-$(CONFIG_AES)		+= $(DRIVERS_SRC)/at91_aes.o
diff --git a/include/aes.h b/include/aes.h
new file mode 100644
index 0000000..59c1275
--- /dev/null
+++ b/include/aes.h
@@ -0,0 +1,109 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2015, Atmel Corporation
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaiimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef __AES_H__
+#define __AES_H__
+
+#define AT91_AES_BLOCK_SIZE_BYTE	16
+#define AT91_AES_BLOCK_SIZE_WORD	4
+
+#define AT91_AES_IV_SIZE_BYTE		16
+#define AT91_AES_IV_SIZE_WORD		4
+
+typedef enum at91_aes_operation {
+	AT91_AES_OP_DECRYPT,
+	AT91_AES_OP_ENCRYPT,
+	AT91_AES_OP_MAC
+} at91_aes_operation_t;
+
+typedef enum at91_aes_mode {
+	AT91_AES_MODE_ECB,
+	AT91_AES_MODE_CBC,
+	AT91_AES_MODE_OFB,
+	AT91_AES_MODE_CFB_128,
+	AT91_AES_MODE_CFB_64,
+	AT91_AES_MODE_CFB_32,
+	AT91_AES_MODE_CFB_16,
+	AT91_AES_MODE_CFB_8,
+	AT91_AES_MODE_CTR,
+	AT91_AES_MODE_GCM
+} at91_aes_mode_t;
+
+typedef enum at91_aes_key_size {
+	AT91_AES_KEY_SIZE_128,
+	AT91_AES_KEY_SIZE_192,
+	AT91_AES_KEY_SIZE_256
+} at91_aes_key_size_t;
+
+
+typedef struct at91_aes_params {
+	/* operation mode */
+	at91_aes_operation_t	operation;
+	at91_aes_mode_t		mode;
+
+	/* data blocks */
+	unsigned int		data_length;
+	const void		*input;
+	void			*output;
+
+	/* key and IV */
+	at91_aes_key_size_t	key_size;
+	const unsigned int	*key;
+	const unsigned int	*iv;
+} at91_aes_params_t;
+
+
+static inline unsigned int at91_aes_roundup(unsigned int data_length)
+{
+	unsigned int fixed_length;
+
+	fixed_length = data_length >> 4;
+	if (data_length & 0xf)
+		fixed_length++;
+
+	return fixed_length << 4;
+}
+
+
+void at91_aes_init(void);
+void at91_aes_cleanup(void);
+
+int at91_aes_cbc(unsigned int data_length,
+		 const void *input,
+		 void *output,
+		 int encrypt,
+		 at91_aes_key_size_t key_size,
+		 const unsigned int *key,
+		 const unsigned int *iv);
+
+int at91_aes_cmac(unsigned int data_length,
+		  const void *data,
+		  unsigned int *cmac,
+		  at91_aes_key_size_t key_size,
+		  const unsigned int *key);
+
+#endif /* __AES_H__ */
diff --git a/include/arch/at91_aes.h b/include/arch/at91_aes.h
new file mode 100644
index 0000000..861fe5f
--- /dev/null
+++ b/include/arch/at91_aes.h
@@ -0,0 +1,125 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2015, Atmel Corporation
+
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef __AT91_AES_H__
+#define __AT91_AES_H__
+
+/**** Register offset in AT91_AES structure ***/
+#define AES_CR		0x00	/* Control Register */
+#define AES_MR		0x04	/* Mode Register */
+/* 0x08 - 0x0C Reserved */
+#define AES_IER		0x10	/* Interrupt Enable Register */
+#define AES_IDR		0x14	/* Interrupt Disable Register */
+#define AES_IMR		0x18	/* Interrupt Mask Register */
+#define AES_ISR		0x1C	/* Interrupt Status Register */
+#define AES_KEYWR0	0x20	/* Key Word Register 0 */
+#define AES_KEYWR1	0x24	/* Key Word Register 1 */
+#define AES_KEYWR2	0x28	/* Key Word Register 2 */
+#define AES_KEYWR3	0x2C	/* Key Word Register 3 */
+#define AES_KEYWR4	0x30	/* Key Word Register 4 */
+#define AES_KEYWR5	0x34	/* Key Word Register 5 */
+#define AES_KEYWR6	0x38	/* Key Word Register 6 */
+#define AES_KEYWR7	0x3C	/* Key Word Register 7 */
+#define AES_IDATAR0	0x40	/* Input Data Register 0 */
+#define AES_IDATAR1	0x44	/* Input Data Register 1 */
+#define AES_IDATAR2	0x48	/* Input Data Register 2 */
+#define AES_IDATAR3	0x4C	/* Input Data Register 3 */
+#define AES_ODATAR0	0x50	/* Output Data Register 0 */
+#define AES_ODATAR1	0x54	/* Output Data Register 1 */
+#define AES_ODATAR2	0x58	/* Output Data Register 2 */
+#define AES_ODATAR3	0x5C	/* Output Data Register 3 */
+#define AES_IVR0	0x60	/* Initialization Vector Register 0 */
+#define AES_IVR1	0x64	/* Initialization Vector Register 1 */
+#define AES_IVR2	0x68	/* Initialization Vector Register 2 */
+#define AES_IVR3	0x6C	/* Initialization Vector Register 3 */
+#define AES_AADLENR	0x70	/* Additional Authenticated Data Length Register */
+#define AES_CLENR	0x74	/* Plaintex/Ciphertext Length Register */
+#define AES_GHASHR0	0x78	/* GCM Intermediate Hash Word Register 0 */
+#define AES_GHASHR1	0x7C	/* GCM Intermediate Hash Word Register 1 */
+#define AES_GHASHR2	0x80	/* GCM Intermediate Hash Word Register 2 */
+#define AES_GHASHR3	0x84	/* GCM Intermediate Hash Word Register 3 */
+#define AES_TAGR0	0x88	/* GCM Authentication Tag Word Register 0 */
+#define AES_TAGR1	0x8C	/* GCM Authentication Tag Word Register 1 */
+#define AES_TAGR2	0x90	/* GCM Authentication Tag Word Register 2 */
+#define AES_TAGR3	0x94	/* GCM Authentication Tag Word Register 3 */
+#define AES_CTRR	0x98	/* GCM Encryption Counter Value Register */
+#define AES_GCMHR0	0x9C	/* GCM H World Register 0 */
+#define AES_GCMHR1	0xA0	/* GCM H World Register 1 */
+#define AES_GCMHR2	0xA4	/* GCM H World Register 2 */
+#define AES_GCMHR3	0xA8	/* GCM H World Register 3 */
+
+/*-------- AES_CR : (Offset: 0x00) Control Register --------*/
+#define	AES_CR_START		(0x1UL << 0)	/* Start Processing */
+#define	AES_CR_SWRST		(0x1UL << 8)	/* Software Reset */
+
+/*-------- AES_MR : (Offset: 0x04) Mode Register --------*/
+#define	AES_MR_CIPHER		(0x1UL << 0)	/* Processing Mode */
+#define		AES_MR_CIPHER_DECRYPT	(0x0UL << 0)
+#define		AES_MR_CIPHER_ENCRYPT	(0x1UL << 0)
+#define	AES_MR_GTAGEN		(0x1UL << 1)	/* GCM Automatic Tag Generation Enable */
+#define	AES_MR_DUALBUFF		(0x1UL << 3)	/* Dual Input Buffer */
+#define	AES_MR_PROCDLY_Pos	4		/* Processing Delay */
+#define	AES_MR_PROCDLY_Msk	(0xFUL << AES_MR_PROCDLY_Pos)
+#define	AES_MR_PROCDLY(value)	(((value) << AES_MR_PROCDLY_Pos) & AES_MR_PROCDLY_Msk)
+#define	AES_MR_SMOD		(0x3UL << 8)	/* Start Mode */
+#define		AES_MR_SMOD_MANUAL_START	(0x0UL << 8)	/* Manual Mode */
+#define		AES_MR_SMOD_AUTO_START		(0x1UL << 8)	/* Auto Mode */
+#define		AES_MR_SMOD_IDATAR0_START	(0x2UL << 8)	/* AES_IDATAR0 access only Auto Mode */
+#define	AES_MR_KEYSIZE		(0x3UL << 10)	/* Key Size */
+#define		AES_MR_KEYSIZE_AES128		(0x0UL << 10)
+#define		AES_MR_KEYSIZE_AES192		(0x1UL << 10)
+#define		AES_MR_KEYSIZE_AES256		(0x2UL << 10)
+#define	AES_MR_OPMOD		(0x7UL << 12)	/* Operation Mode */
+#define		AES_MR_OPMOD_ECB		(0x0UL << 12)	/* Electronic Code Book */
+#define		AES_MR_OPMOD_CBC		(0x1UL << 12)	/* Cipher Block Chaining */
+#define		AES_MR_OPMOD_OFB		(0x2UL << 12)	/* Output Feedback */
+#define		AES_MR_OPMOD_CFB		(0x3UL << 12)	/* Cipher Feedback */
+#define		AES_MR_OPMOD_CTR		(0x4UL << 12)	/* Counter */
+#define		AES_MR_OPMOD_GCM		(0x5UL << 12)	/* Galois Counter */
+#define	AES_MR_LOD		(0x1UL << 15)	/* Last Output Data Mode */
+#define	AES_MR_CFBS		(0x7UL << 16)	/* Cipher Feedback Data Size */
+#define		AES_MR_CFBS_128BIT	(0x0UL << 16)
+#define		AES_MR_CFBS_64BIT	(0x1UL << 16)
+#define		AES_MR_CFBS_32BIT	(0x2UL << 16)
+#define		AES_MR_CFBS_16BIT	(0x3UL << 16)
+#define		AES_MR_CFBS_8BIT	(0x4UL << 16)
+#define	AES_MR_CKEY		(0xFUL << 20)	/* Key */
+#define		AES_MR_CKEY_PASSWD	(0xEUL << 20)
+
+/*-------- AES_ISR : (Offset: 0x1C) Interrupt Status Register --------*/
+#define	AES_INT_DATRDY		(0x1UL << 0)	/* Data Ready */
+#define	AES_INT_URAD		(0x1UL << 8)	/* Unspecified Register Access Detection Status */
+#define	AES_INT_URAT		(0xFUL << 12)	/* Unspecified Register Access */
+#define		AES_INT_IDR_WR_PROCESSING	(0x0UL << 12)
+#define		AES_INT_ODR_RD_PROCESSING	(0x1UL << 12)
+#define		AES_INT_MR_WR_PROCESSING	(0x2UL << 12)
+#define		AES_INT_ODR_RD_SUBKGEN		(0x3UL << 12)
+#define		AES_INT_MR_WR_SUBKGEN		(0x4UL << 12)
+#define		AES_INT_WOR_RD_ACCESS		(0x5UL << 12)
+#define	AES_INT_TAGRDY		(0x1UL << 16)	/* GCM Tag Ready */
+
+#endif /* #ifndef __AT91_AES_H__ */
-- 
1.9.1

