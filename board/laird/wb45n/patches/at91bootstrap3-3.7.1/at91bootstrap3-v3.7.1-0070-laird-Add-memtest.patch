From 0ddfa966974306b1765f459f98d4ea079df72fc6 Mon Sep 17 00:00:00 2001
From: Steve deRosier <steve.derosier@lairdtech.com>
Date: Thu, 19 Nov 2015 15:08:17 -0800
Subject: [PATCH] laird: Add memtest

Bug: 8626
---
 Config.in         |   7 ++
 driver/driver.mk  |   2 +
 driver/memtest.c  | 221 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 include/memtest.h |  41 ++++++++++
 main.c            |  36 +++++++++
 5 files changed, 307 insertions(+)
 create mode 100644 driver/memtest.c
 create mode 100644 include/memtest.h

diff --git a/Config.in b/Config.in
index 6c0ff59..db3ee1a 100644
--- a/Config.in
+++ b/Config.in
@@ -275,6 +275,13 @@ config CONFIG_IMAGE_NAME
 	default "zImage" if CONFIG_LINUX_ZIMAGE
 	default "u-boot.bin" if CONFIG_LOAD_UBOOT
 	default "softpack.bin" if CONFIG_LOAD_64KB || CONFIG_LOAD_4MB || CONFIG_LOAD_1MB
+
+config CONFIG_MEMTEST
+	bool "Do memtest"
+	default n
+	help
+	  This makes bootstrap do a memory test instead of loading the
+	  main executable that it would normally load.
 	  
 config CONFIG_DEBUG
 	bool "Debug Support"
diff --git a/driver/driver.mk b/driver/driver.mk
index 1c01c3e..50a6e61 100644
--- a/driver/driver.mk
+++ b/driver/driver.mk
@@ -21,6 +21,8 @@ COBJS-$(CONFIG_SDRAM)		+= $(DRIVERS_SRC)/sdramc.o
 COBJS-$(CONFIG_SDDRC)		+= $(DRIVERS_SRC)/sddrc.o
 COBJS-$(CONFIG_DDRC)		+= $(DRIVERS_SRC)/ddramc.o
 
+COBJS-$(CONFIG_MEMTEST)		+= $(DRIVERS_SRC)/memtest.o
+
 COBJS-$(CONFIG_SDCARD)		+= $(DRIVERS_SRC)/at91_mci.o
 
 COBJS-$(CONFIG_SDCARD)		+= $(DRIVERS_SRC)/mci_media.o
diff --git a/driver/memtest.c b/driver/memtest.c
new file mode 100644
index 0000000..4799fe6
--- /dev/null
+++ b/driver/memtest.c
@@ -0,0 +1,221 @@
+/**********************************************************************
+ *
+ * Filename:    memtest.c
+ * 
+ * Description: General-purpose memory testing functions.
+ *
+ * Notes:       This software can be easily ported to systems with
+ *              different data bus widths by redefining 'datum'.
+ *
+ * 
+ * Copyright (c) 1998 by Michael Barr.  This software is placed into
+ * the public domain and may be used for any purpose.  However, this
+ * notice must not be changed or removed and no warranty is either
+ * expressed or implied by its publication or distribution.
+ **********************************************************************/
+
+
+#include "memtest.h"
+#include "debug.h"
+
+/**********************************************************************
+ *
+ * Function:    memTestDataBus()
+ *
+ * Description: Test the data bus wiring in a memory region by
+ *              performing a walking 1's test at a fixed address
+ *              within that region.  The address (and hence the
+ *              memory region) is selected by the caller.
+ *
+ * Notes:       
+ *
+ * Returns:     0 if the test succeeds.  
+ *              A non-zero result is the first pattern that failed.
+ *
+ **********************************************************************/
+datum
+memTestDataBus(volatile datum * address)
+{
+    datum pattern;
+
+
+    /*
+     * Perform a walking 1's test at the given address.
+     */
+    for (pattern = 1; pattern != 0; pattern <<= 1)
+    {
+        /*
+         * Write the test pattern.
+         */
+        *address = pattern;
+
+        /*
+         * Read it back (immediately is okay for this test).
+         */
+        if (*address != pattern) 
+        {
+            return (pattern);
+        }
+    }
+
+    return (0);
+
+}   /* memTestDataBus() */
+
+
+/**********************************************************************
+ *
+ * Function:    memTestAddressBus()
+ *
+ * Description: Test the address bus wiring in a memory region by
+ *              performing a walking 1's test on the relevant bits
+ *              of the address and checking for aliasing. This test
+ *              will find single-bit address failures such as stuck
+ *              -high, stuck-low, and shorted pins.  The base address
+ *              and size of the region are selected by the caller.
+ *
+ * Notes:       For best results, the selected base address should
+ *              have enough LSB 0's to guarantee single address bit
+ *              changes.  For example, to test a 64-Kbyte region, 
+ *              select a base address on a 64-Kbyte boundary.  Also, 
+ *              select the region size as a power-of-two--if at all 
+ *              possible.
+ *
+ * Returns:     NULL if the test succeeds.  
+ *              A non-zero result is the first address at which an
+ *              aliasing problem was uncovered.  By examining the
+ *              contents of memory, it may be possible to gather
+ *              additional information about the problem.
+ *
+ **********************************************************************/
+datum * 
+memTestAddressBus(volatile datum * baseAddress, unsigned long nBytes)
+{
+    unsigned long addressMask = (nBytes/sizeof(datum) - 1);
+    unsigned long offset;
+    unsigned long testOffset;
+
+    datum pattern     = (datum) 0xAAAAAAAA;
+    datum antipattern = (datum) 0x55555555;
+
+
+    /*
+     * Write the default pattern at each of the power-of-two offsets.
+     */
+    for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
+    {
+        baseAddress[offset] = pattern;
+    }
+
+    /* 
+     * Check for address bits stuck high.
+     */
+    testOffset = 0;
+    baseAddress[testOffset] = antipattern;
+
+    for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
+    {
+        if (baseAddress[offset] != pattern)
+        {
+            return ((datum *) &baseAddress[offset]);
+        }
+    }
+
+    baseAddress[testOffset] = pattern;
+
+    /*
+     * Check for address bits stuck low or shorted.
+     */
+    for (testOffset = 1; (testOffset & addressMask) != 0; testOffset <<= 1)
+    {
+        baseAddress[testOffset] = antipattern;
+
+		if (baseAddress[0] != pattern)
+		{
+			return ((datum *) &baseAddress[testOffset]);
+		}
+
+        for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
+        {
+            if ((baseAddress[offset] != pattern) && (offset != testOffset))
+            {
+                return ((datum *) &baseAddress[testOffset]);
+            }
+        }
+
+        baseAddress[testOffset] = pattern;
+    }
+
+    return (NULL);
+
+}   /* memTestAddressBus() */
+
+
+/**********************************************************************
+ *
+ * Function:    memTestDevice()
+ *
+ * Description: Test the integrity of a physical memory device by
+ *              performing an increment/decrement test over the
+ *              entire region.  In the process every storage bit 
+ *              in the device is tested as a zero and a one.  The
+ *              base address and the size of the region are
+ *              selected by the caller.
+ *
+ * Notes:       
+ *
+ * Returns:     NULL if the test succeeds.
+ *
+ *              A non-zero result is the first address at which an
+ *              incorrect value was read back.  By examining the
+ *              contents of memory, it may be possible to gather
+ *              additional information about the problem.
+ *
+ **********************************************************************/
+datum * 
+memTestDevice(volatile datum * baseAddress, unsigned long nBytes)	
+{
+    unsigned long offset;
+    unsigned long nWords = nBytes / sizeof(datum);
+
+    datum pattern;
+    datum antipattern;
+
+
+    /*
+     * Fill memory with a known pattern.
+     */
+    for (pattern = 1, offset = 0; offset < nWords; pattern++, offset++)
+    {
+        baseAddress[offset] = pattern;
+    }
+
+    /*
+     * Check each location and invert it for the second pass.
+     */
+    for (pattern = 1, offset = 0; offset < nWords; pattern++, offset++)
+    {
+        if (baseAddress[offset] != pattern)
+        {
+            return ((datum *) &baseAddress[offset]);
+        }
+
+        antipattern = ~pattern;
+        baseAddress[offset] = antipattern;
+    }
+
+    /*
+     * Check each location for the inverted pattern and zero it.
+     */
+    for (pattern = 1, offset = 0; offset < nWords; pattern++, offset++)
+    {
+        antipattern = ~pattern;
+        if (baseAddress[offset] != antipattern)
+        {
+            return ((datum *) &baseAddress[offset]);
+        }
+    }
+
+    return (NULL);
+
+}   /* memTestDevice() */
diff --git a/include/memtest.h b/include/memtest.h
new file mode 100644
index 0000000..921d5b4
--- /dev/null
+++ b/include/memtest.h
@@ -0,0 +1,41 @@
+/**********************************************************************
+ *
+ * Filename:    memtest.h
+ * 
+ * Description: Memory-testing module API.
+ *
+ * Notes:       The memory tests can be easily ported to systems with
+ *              different data bus widths by redefining 'datum' type.
+ *
+ * 
+ * Copyright (c) 2000 by Michael Barr.  This software is placed into
+ * the public domain and may be used for any purpose.  However, this
+ * notice must not be changed or removed and no warranty is either
+ * expressed or implied by its publication or distribution.
+ **********************************************************************/
+
+#ifndef _memtest_h
+#define _memtest_h
+
+
+/*
+ * Define NULL pointer value.
+ */
+#ifndef NULL
+#define NULL  (void *) 0
+#endif
+
+/*
+ * Set the data bus width.
+ */
+typedef unsigned long datum;
+
+/*
+ * Function prototypes.
+ */
+datum   memTestDataBus(volatile datum * address);
+datum * memTestAddressBus(volatile datum * baseAddress, unsigned long nBytes);
+datum * memTestDevice(volatile datum * baseAddress, unsigned long nBytes);
+
+
+#endif /* _memtest_h */
\ No newline at end of file
diff --git a/main.c b/main.c
index ede5ffb..51a1e4f 100644
--- a/main.c
+++ b/main.c
@@ -42,6 +42,8 @@
 #include "act8865.h"
 #include "secure.h"
 
+#include "memtest.h"
+
 extern int load_kernel(struct image_info *img_info);
 
 typedef int (*load_function)(struct image_info *img_info);
@@ -88,6 +90,8 @@ int main(void)
 	struct image_info image;
 	char *media_str = NULL;
 	int ret;
+	void * retptr;
+	int i;
 
 	char filename[FILENAME_BUF_LEN];
 	char of_filename[FILENAME_BUF_LEN];
@@ -169,6 +173,38 @@ int main(void)
 	image.dest -= sizeof(at91_secure_header_t);
 #endif
 
+#if defined(CONFIG_MEMTEST)
+	dbg_info("Doing memtest on load area %d, size: %d\n", CONFIG_MEMTEST_START, CONFIG_MEMTEST_SIZE);
+
+	for(i = 0; i < CONFIG_MEMTEST_ITTERATIONS; i++)
+	{
+		dbg_info("Memtest iteration %d\n", i);
+		dbg_info("Testing databus...\n");
+		ret = memTestDataBus( (void *)CONFIG_MEMTEST_START );
+		if( ret != 0 )
+		{
+			dbg_info( "    FAILED. Pattern == %d\n", ret );
+		}
+
+		dbg_info("Testing address bus...\n");
+		retptr = memTestAddressBus((void *)CONFIG_MEMTEST_START, CONFIG_MEMTEST_SIZE);
+		if( retptr != NULL )
+		{
+			dbg_info( "    FAILED. At address == %d\n", retptr );
+			buf_dump((unsigned char *)retptr, 0, 128);
+		}
+
+		dbg_info("Testing device...\n");
+		retptr = memTestDevice((void *)CONFIG_MEMTEST_START, CONFIG_MEMTEST_SIZE);
+		if( retptr != NULL )
+		{
+			dbg_info( "    FAILED. At address == %d\n", retptr );
+			buf_dump((unsigned char *)retptr, 0, 128);
+		}
+	}
+	dbg_info("Finished memtest, loading u-boot\n");
+#endif
+
 	ret = (*load_image)(&image);
 
 #if defined(CONFIG_SECURE)
-- 
1.9.1

