From 8809d0b7360962677522bc5182ffbf3a1e71ebb2 Mon Sep 17 00:00:00 2001
From: Dimitrios Siganos <dimitris@siganos.org>
Date: Tue, 2 Jul 2013 14:37:11 -0400
Subject: [PATCH] Applying patch linux-3.8-0001-ath6kl-events.patch

---
 drivers/net/wireless/ath/ath6kl/wmi.c |  259 +++++++++++++++++++++++++++++++++
 1 file changed, 259 insertions(+)

diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index 998f8b0..1ef09ab 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -17,6 +17,7 @@
 
 #include <linux/ip.h>
 #include <linux/in.h>
+#include <net/genetlink.h>
 #include "core.h"
 #include "debug.h"
 #include "testmode.h"
@@ -25,6 +26,8 @@
 
 static int ath6kl_wmi_sync_point(struct wmi *wmi, u8 if_idx);
 
+static void ath6kl_wmi_event_multicast(enum wmi_cmd_id cmd_id, u8 *datap, int len);
+
 static const s32 wmi_rate_tbl[][2] = {
 	/* {W/O SGI, with SGI} */
 	{1000, 1000},
@@ -1756,6 +1759,8 @@ int ath6kl_wmi_cmd_send(struct wmi *wmi, u8 if_idx, struct sk_buff *skb,
 	ath6kl_dbg_dump(ATH6KL_DBG_WMI_DUMP, NULL, "wmi tx ",
 			skb->data, skb->len);
 
+	ath6kl_wmi_event_multicast(cmd_id, skb->data, skb->len);
+
 	if (sync_flag >= END_WMIFLAG) {
 		dev_kfree_skb(skb);
 		return -EINVAL;
@@ -3935,6 +3940,8 @@ static int ath6kl_wmi_proc_events(struct wmi *wmi, struct sk_buff *skb)
 	ath6kl_dbg_dump(ATH6KL_DBG_WMI_DUMP, NULL, "wmi rx ",
 			datap, len);
 
+	ath6kl_wmi_event_multicast(id, datap, len);
+
 	switch (id) {
 	case WMI_GET_BITRATE_CMDID:
 		ath6kl_dbg(ATH6KL_DBG_WMI, "WMI_GET_BITRATE_CMDID\n");
@@ -4077,6 +4084,247 @@ int ath6kl_wmi_control_rx(struct wmi *wmi, struct sk_buff *skb)
 	return ath6kl_wmi_proc_events(wmi, skb);
 }
 
+//LAIRD: structure, definitions, and functions needed for generic netlink events to userspace
+enum {
+	ATHEROS_ATTR_UNSPEC,
+	ATHEROS_ATTR_MSG,
+	ATHEROS_ATTR_EVENT,
+	ATHEROS_ATTR_CMDID,
+	ATHEROS_ATTR_DATA,
+    __ATHEROS_ATTR_MAX,
+};
+#define ATHEROS_ATTR_MAX (__ATHEROS_ATTR_MAX - 1)
+
+static struct nla_policy atheros_policy[ATHEROS_ATTR_MAX + 1] = {
+	[ATHEROS_ATTR_MSG] = { .type = NLA_NUL_STRING },
+	[ATHEROS_ATTR_EVENT] = { .type = NLA_NESTED },
+	[ATHEROS_ATTR_CMDID] = { .type = NLA_U32 },
+	[ATHEROS_ATTR_DATA] = { .type = NLA_BINARY },
+};
+
+#define ATHEROS_EVENT_VERSION 1
+#define ATHEROS_GENL_HDR_SZ 0
+static struct genl_family atheros_fam = {
+	.id = GENL_ID_GENERATE,         //genetlink should generate an id
+	.hdrsize = ATHEROS_GENL_HDR_SZ,
+	.name = "atheros",        //the name of this family, used by userspace application
+	.version = ATHEROS_EVENT_VERSION,                   //version number  
+	.maxattr = ATHEROS_ATTR_MAX,
+};
+
+enum {
+	ATHEROS_CMD_UNSPEC,
+	ATHEROS_CMD_TEST_ECHO,
+	ATHEROS_CMD_EVENT,
+	ATHEROS_CMD_SET_LOW_RSSI_PARAMS,
+	__ATHEROS_CMD_MAX,
+};
+#define ATHEROS_CMD_MAX (__ATHEROS_CMD_MAX - 1)
+
+static struct genl_multicast_group atheros_events_mcgrp = {
+	.name = "events",
+};
+
+struct wmi *gwmi = NULL;  // ugly hack to get access to wmi pointer for netlink entry point functions  FIXME: find alternative to this global!
+
+int ath6kl_genl_set_low_rssi_params (struct sk_buff *skb_2, struct genl_info *info)
+{
+	struct nlattr *na;
+	struct sk_buff *skb;
+	struct low_rssi_scan_params *params;
+	struct roam_ctrl_cmd *cmd;
+	struct ath6kl *ar;  // How to get ?  //efb
+	struct wmi *wmi = gwmi;
+
+	if ( gwmi == NULL )
+		return 0;
+
+	ar = wmi->parent_dev;
+		
+	if (info == NULL)
+	{
+		printk("%s: no data received\n", __func__);
+    	return 0;
+	}
+
+	/*for each attribute there is an index in info->attrs which points to a nlattr structure
+     *in this structure the data is given
+     */
+	na = info->attrs[ATHEROS_ATTR_MSG];
+    
+	if (na) {
+		params = (struct low_rssi_scan_params *)nla_data(na);
+		if (params == NULL)
+			printk("error while receiving data\n");
+		else
+		{
+#if 0
+			printk("received:\n\trssi_scan_period: %d\n", params->lrssi_scan_period);
+			printk("\trssi_scan_threshold: %d\n", params->lrssi_scan_threshold);
+			printk("\trssi_roam_threshold: %d\n", params->lrssi_roam_threshold);
+			printk("\troam_rssi_floor: %d\n", params->roam_rssi_floor);
+#endif
+
+			ar->lrssi_roam_threshold = params->lrssi_roam_threshold; // place holder 
+
+			skb = ath6kl_wmi_get_new_buf(sizeof(*cmd));
+			if (!skb)
+				return -ENOMEM;
+
+			cmd = (struct roam_ctrl_cmd *) skb->data;
+
+			cmd->info.params.lrssi_scan_period = cpu_to_le16(params->lrssi_scan_period);
+			cmd->info.params.lrssi_scan_threshold = a_cpu_to_sle16(params->lrssi_scan_threshold);
+			cmd->info.params.lrssi_roam_threshold = a_cpu_to_sle16(params->lrssi_roam_threshold);
+			cmd->info.params.roam_rssi_floor = params->roam_rssi_floor;
+			cmd->roam_ctrl = WMI_SET_LRSSI_SCAN_PARAMS;
+
+			ath6kl_wmi_cmd_send(wmi, 0, skb, WMI_SET_ROAM_CTRL_CMDID,
+					    NO_SYNC_WMIFLAG);
+			
+		}
+	}
+	else
+		printk("%s: no info->attrs %i\n", __func__, ATHEROS_ATTR_MSG);
+
+	return 0;
+}
+
+/* an echo test command, receives a message, prints it and sends another message back */
+int ath6kl_genl_echo(struct sk_buff *skb_2, struct genl_info *info)
+{
+	struct nlattr *na;
+	struct sk_buff *skb;
+	int rc;
+	void *msg_head;
+	char * mydata;
+
+	if (info == NULL)
+    	goto out;
+  
+	/*for each attribute there is an index in info->attrs which points to a nlattr structure
+     *in this structure the data is given
+     */
+	na = info->attrs[ATHEROS_ATTR_MSG];
+    
+	if (na) {
+		mydata = (char *)nla_data(na);
+		if (mydata == NULL)
+			printk("error while receiving data\n");
+		else
+			printk("received: %s\n", mydata);
+		}
+	else
+		printk("no info->attrs %i\n", ATHEROS_ATTR_MSG);
+
+	/* send a message back*/
+	/* allocate some memory, since the size is not yet known use NLMSG_GOODSIZE*/	
+	skb = genlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
+	if (skb == NULL)
+		goto out;
+
+	msg_head = genlmsg_put(skb, 0, info->snd_seq+1, &atheros_fam, 0, ATHEROS_CMD_TEST_ECHO);
+	if (msg_head == NULL) {
+		rc = -ENOMEM;
+		goto out;
+	}
+	
+	/* add a ATHEROS_ATTR_MSG attribute (actual value to be sent) */
+	rc = nla_put_string(skb, ATHEROS_ATTR_MSG, "atheros netlink message to kernel worked");
+	if (rc != 0)
+		goto out;
+	
+	/* finalize the message */
+	genlmsg_end(skb, msg_head);
+
+   	/* send the message back */
+	rc = genlmsg_unicast(genl_info_net(info), skb, info->snd_portid);
+	if (rc != 0)
+		goto out;
+	return 0;
+
+ 	out:
+    	ath6kl_err("an error occured in atheros_echo\n");
+  
+	return 0;
+}
+
+static void ath6kl_wmi_event_multicast(enum wmi_cmd_id cmd_id, u8 *datap, int len)
+{
+    struct sk_buff *msg;
+	void *hdr;
+
+	//allocate the memory
+    msg = genlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
+	if (!msg) 
+		return;
+		
+	//add a header
+    hdr = genlmsg_put(msg, 0, 0, &atheros_fam, 0, ATHEROS_CMD_EVENT);
+	if (!hdr) {
+		nlmsg_free(msg);
+		return;
+	}
+	
+	/* add a ATHEROS_ATTR_MSG attribute (actual value to be sent) */
+	//ret = nla_put_string(msg, ATHEROS_ATTR_MSG, "WMI Event!");
+	//if (ret != 0)
+		//goto nla_put_failure;
+
+	//build the event contents
+	if (nla_put_u32(msg, ATHEROS_ATTR_CMDID, cmd_id) ||
+		nla_put(msg, ATHEROS_ATTR_DATA, len, datap))
+		goto nla_put_failure;
+
+  	//finalize the message */
+	genlmsg_end(msg, hdr);
+
+   	//send the message */
+	genlmsg_multicast(msg, 0, atheros_events_mcgrp.id, GFP_KERNEL);
+		
+	return;
+
+nla_put_failure:
+	genlmsg_cancel(msg, hdr);
+	nlmsg_free(msg);
+}
+
+
+/* commands: mapping between the command enumeration and the actual function*/
+struct genl_ops atheros_ops[] = {
+	{
+		.cmd = ATHEROS_CMD_TEST_ECHO,
+		.flags = 0,
+		.policy = atheros_policy,
+		.doit = ath6kl_genl_echo,
+		.dumpit = NULL,
+	},	{
+		.cmd = ATHEROS_CMD_SET_LOW_RSSI_PARAMS,
+		.flags = 0,
+		.policy = atheros_policy,
+		.doit = ath6kl_genl_set_low_rssi_params,
+		.dumpit = NULL,
+	}
+};
+
+int ath6kl_genl_init(void) 
+{
+	int rc;
+	
+	//LAIRD: adding event capture and handler
+	ath6kl_warn("INIT GENERIC NETLINK ATHEROS COM\n");
+
+	if ((rc = genl_register_family_with_ops(&atheros_fam, atheros_ops,
+			                                ARRAY_SIZE(atheros_ops))) != 0) {
+		ath6kl_err("cannot register atheros netlink family\n");
+  	} else if ((rc = genl_register_mc_group(&atheros_fam, &atheros_events_mcgrp)) != 0) {
+		ath6kl_err("cannot register atheros events netlink multicast group\n");
+		genl_unregister_family(&atheros_fam);
+	}
+
+	return rc;
+}
+
 void ath6kl_wmi_reset(struct wmi *wmi)
 {
 	spin_lock_bh(&wmi->lock);
@@ -4095,6 +4343,9 @@ void *ath6kl_wmi_init(struct ath6kl *dev)
 	if (!wmi)
 		return NULL;
 
+ 	if (ath6kl_genl_init() != 0)
+ 		ath6kl_err("failed to init atheros netlink events\n"); 
+
 	spin_lock_init(&wmi->lock);
 
 	wmi->parent_dev = dev;
@@ -4103,6 +4354,8 @@ void *ath6kl_wmi_init(struct ath6kl *dev)
 
 	ath6kl_wmi_reset(wmi);
 
+	gwmi = wmi;
+
 	return wmi;
 }
 
@@ -4110,6 +4363,12 @@ void ath6kl_wmi_shutdown(struct wmi *wmi)
 {
 	if (!wmi)
 		return;
+ 	
+	gwmi = NULL;
+
+ 	/* unregister the atheros family*/
+ 	if (genl_unregister_family(&atheros_fam) != 0) 
+     	ath6kl_err("failed to unregister atheros netlink events\n");
 
 	kfree(wmi->last_mgmt_tx_frame);
 	kfree(wmi);
-- 
1.7.9.5

