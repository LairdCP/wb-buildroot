From c228b0c8e7a0c5de8fed85672ccfbc70391e819e Mon Sep 17 00:00:00 2001
From: Eric Bentley <eric.bentley@lairdtech.com>
Date: Fri, 20 Sep 2013 00:43:04 -0400
Subject: [PATCH] change get_version command to generic get_value.  Allow for
 sending tx_power value

---
 drivers/net/wireless/ath/ath6kl/wmi.c |   77 ++++++++++++++++++++++++++++-----
 1 file changed, 67 insertions(+), 10 deletions(-)

diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index 8cb8878..877fee4 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -4239,8 +4239,8 @@ int ath6kl_wmi_channel_params_cmd(struct wmi *wmi, u8 if_idx, u8 scan_param,
 	cmd->num_channels = cpu_to_le16(num_channels);
 	memcpy(cmd->channel_list, channel_list, (num_channels)*sizeof(u16));
 
-	ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_SET_CHANNEL_PARAMS_CMDID,
-				  NO_SYNC_WMIFLAG);
+	//ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_SET_CHANNEL_PARAMS_CMDID,
+	//			  NO_SYNC_WMIFLAG);
 	return ret;
 }
 
@@ -4276,7 +4276,7 @@ enum {
 	ATHEROS_CMD_UNSPEC,
 	ATHEROS_CMD_RESPONSE,
 	ATHEROS_CMD_EVENT,
-	ATHEROS_CMD_GET_VERSION,
+	ATHEROS_CMD_GET_VALUE,
 	ATHEROS_CMD_SET_PHY_MODE,
 	ATHEROS_CMD_SET_DFS_MODE,
 	ATHEROS_CMD_SEND_WMI,
@@ -4300,6 +4300,7 @@ int ath6kl_genl_wmi_passthru (struct sk_buff *skb_2, struct genl_info *info)
 	struct ath6kl *ar;  
 	struct wmi *wmi = gwmi;
 
+	void* p;
 	if ( gwmi == NULL )
 		return -EINVAL;
 
@@ -4324,17 +4325,49 @@ int ath6kl_genl_wmi_passthru (struct sk_buff *skb_2, struct genl_info *info)
 				return -ENOMEM;
 
 			memcpy(&wmi_cmd, params, sizeof(wmi_cmd));
+			p = (u32 *)params+1;
 			switch(wmi_cmd)
 			{
 				// place holder in case other commands need special treatment
 				case WMI_SET_ROAM_CTRL_CMDID: 
 					{
-					void* p = (u32 *)params+1;
 					struct low_rssi_scan_params *t = (struct low_rssi_scan_params *)p; 
 					ar->lrssi_roam_threshold = t->lrssi_roam_threshold; // place holder 
+					ath6kl_err("WMI_SET_ROAM_CTRL:\n");
+					ath6kl_err("period: %d\n", t->lrssi_scan_period);
+					ath6kl_err("scan threshold: %d\n", t->lrssi_scan_threshold);
+					ath6kl_err("roam threshold: %d\n", t->lrssi_roam_threshold);
+					ath6kl_err("roam rssi floor: %d\n", t->roam_rssi_floor);
+					}
+					break;
+				case WMI_SET_REGDOMAIN_CMDID:
+					{
+					struct wmi_set_regdomain_cmd *t = (struct wmi_set_regdomain_cmd *)p;
+					ath6kl_err("WMI SETDOMAIN reg: %s\n", t->iso_name);
+					}
+					break;
+				case WMI_SET_POWER_MODE_CMDID:
+					{
+					struct wmi_power_mode_cmd *t = (struct wmi_power_mode_cmd *)p;
+					ath6kl_err("WMI_SET_POWER_MODE mode=%s\n", t->pwr_mode==MAX_PERF_POWER?"MAX_PERF_POWER":t->pwr_mode==REC_POWER?"REC_POWER":"UNKNOWN");
+					}
+					break;
+				case WMI_SET_TX_SELECT_RATES_CMDID:
+					{
+					struct wmi_set_tx_select_rates32_cmd *t = (struct wmi_set_tx_select_rates32_cmd*) p; 
+					ath6kl_err("WMI_SET_TX_SELECT_RATES_CMDID x%08x\n", t->ratemask[0]);
+					}
+					break;
+				case WMI_SET_HT_CAP_CMDID:
+					{
+					struct wmi_set_htcap_cmd *t = (struct wmi_set_htcap_cmd *) p;
+					ath6kl_err("WMI_SET_HTCAP: %s\n", t->band==NL80211_BAND_2GHZ?"bg band":t->band==NL80211_BAND_5GHZ?"a band":"unknown");
+					ath6kl_err("nmode: %s\n", t->ht_enable?"enabled":"disabled");
+					ath6kl_err("max_apmdu_len_exp: %d\n", t->max_ampdu_len_exp);
 					}
 					break;
 				default:
+					ath6kl_err("unknown CMD ID: %d\n", wmi_cmd); 
 					break;
 			}
 			memcpy(skb->data, (u32 *)params+1, params_data_len);
@@ -4388,11 +4421,24 @@ int ath6kl_genl_set_phy_mode(struct sk_buff *skb_2, struct genl_info *info)
 	return 0;
 }
 
-int ath6kl_genl_get_version (struct sk_buff *skb_2, struct genl_info *info)
+int ath6kl_genl_get_value (struct sk_buff *skb_2, struct genl_info *info)
 {
 	struct sk_buff *skb;
-	int rc;
+	int rc=0;
 	void *msg_head;
+	int *c=NULL;
+	struct ath6kl *ar;  
+	struct wmi *wmi = gwmi;	
+	struct nlattr *na;
+
+	if ( gwmi == NULL )
+		return 0;
+
+	ar = wmi->parent_dev;
+
+	na = info->attrs[ATHEROS_ATTR_MSG];
+	if (na) 
+		c = (int*)nla_data(na);
 
 	/* allocate some memory, since the size is not yet known use NLMSG_GOODSIZE*/	
 	skb = genlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
@@ -4405,8 +4451,19 @@ int ath6kl_genl_get_version (struct sk_buff *skb_2, struct genl_info *info)
 		goto out;
 	}
 	
-	/* add a ATHEROS_ATTR_MSG attribute (actual value to be sent) */
-	rc = nla_put_s32( skb, ATHEROS_ATTR_MSG, LAIRD_DRV_VERSION );
+	if (c)
+	{
+		switch (*c)
+		{
+			/* add a ATHEROS_ATTR_MSG attribute (actual value to be sent) */
+			case 0 :
+				rc = nla_put_s32( skb, ATHEROS_ATTR_MSG, LAIRD_DRV_VERSION );
+				break;
+			case 1 :	
+				rc = nla_put_s32( skb, ATHEROS_ATTR_MSG, ar->tx_pwr );
+				break;
+		}
+	}
 	if (rc != 0)
 		goto out;
 	
@@ -4509,10 +4566,10 @@ nla_put_failure:
 /* commands: mapping between the command enumeration and the actual function*/
 struct genl_ops atheros_ops[] = {
 	{
-		.cmd = ATHEROS_CMD_GET_VERSION,
+		.cmd = ATHEROS_CMD_GET_VALUE,
 		.flags = 0,
 		.policy = atheros_policy,
-		.doit = ath6kl_genl_get_version,
+		.doit = ath6kl_genl_get_value,
 		.dumpit = NULL,
 	}, {
 		.cmd = ATHEROS_CMD_SET_PHY_MODE,
-- 
1.7.9.5

