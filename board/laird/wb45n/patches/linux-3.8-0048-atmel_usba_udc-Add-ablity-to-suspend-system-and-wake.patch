From a010e1de654f740bac92496ef7f3a056b9cb1781 Mon Sep 17 00:00:00 2001
From: Steve deRosier <Steve.Derosier@lairdtech.com>
Date: Mon, 23 Dec 2013 14:05:35 -0800
Subject: [PATCH] atmel_usba_udc: Add ablity to suspend system and wakeup
 based on bus activity flags

This change gives the USB gadget driver the capability to initiate a system-wide
power management suspend when the USB bus goes to an idle, and to wake the system from
suspend when activity returns to the bus.

The following features have been added:
* Ability to suspend the system when the DET_SUSPD interrupt is triggered
* Ability to wake the system when suspended when the WAKE_UP interrupt is triggered
* sysfs attributes have been added to enable and disable the feature as well as select
  the type of suspend (standby or mem) to do.
* Added new DBG_PM debugging print class

I also changed some logic in the usba_udc_irq ISR. Seems that the wakeup flag is always
set when the suspend flag is set. Had to make it so that we don't do the wakeup state when
we try to suspend.

Bug: 4571
---
 drivers/usb/gadget/atmel_usba_udc.c |  166 ++++++++++++++++++++++++++++++++++-
 drivers/usb/gadget/atmel_usba_udc.h |    1 +
 2 files changed, 164 insertions(+), 3 deletions(-)

diff --git a/drivers/usb/gadget/atmel_usba_udc.c b/drivers/usb/gadget/atmel_usba_udc.c
index bd01a20..013f410 100644
--- a/drivers/usb/gadget/atmel_usba_udc.c
+++ b/drivers/usb/gadget/atmel_usba_udc.c
@@ -24,6 +24,8 @@
 #include <linux/platform_data/atmel.h>
 #include <linux/of.h>
 #include <linux/of_gpio.h>
+#include <linux/suspend.h>
+#include <linux/workqueue.h>
 
 #include <asm/gpio.h>
 
@@ -33,6 +35,12 @@
 static struct usba_udc the_udc;
 static struct usba_ep *usba_ep;
 
+/* System suspend state variables */
+static int usba_suspend_enable = 0; /* disabled by default */
+static suspend_state_t usba_suspend_state = PM_SUSPEND_ON;
+static suspend_state_t usba_suspend_to_state = PM_SUSPEND_STANDBY; /* standby by default */
+
+
 #ifdef CONFIG_USB_GADGET_DEBUG_FS
 #include <linux/debugfs.h>
 #include <linux/uaccess.h>
@@ -319,6 +327,83 @@ static inline void usba_cleanup_debugfs(struct usba_udc *udc)
 }
 #endif
 
+/*
+ * System suspend control attributes
+ *
+ * Found in /sys/devices/ahb.0/500000.gadget (or similar due to device tree)
+ *
+ * sys_suspend_en - enable or disable the system suspend feature. disabled is default
+ *      setting values: enable, disable
+ *
+ * sys_suspend_to - set the type of suspend to do. Same values as /sys/power/state
+ *      setting values: standby, mem
+ *      reads "disabled" if sys_suspend_en is disabled.
+ */
+ssize_t usba_sys_suspend_enable_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	ssize_t ret = -EIO;
+
+	if (usba_suspend_enable) {
+		ret = scnprintf(buf, PAGE_SIZE, "enabled\n");
+	} else {
+		ret = scnprintf(buf, PAGE_SIZE, "disabled\n");
+	}
+
+	return ret;
+}
+
+ssize_t usba_sys_suspend_enable_store(struct device *dev, struct device_attribute *attr,
+                 const char *buf, size_t count)
+{
+	int ret = count;
+
+	if (!strncmp(buf, "enable", 6))
+		usba_suspend_enable = 1;
+	else if (!strncmp(buf, "disable", 7))
+		usba_suspend_enable = 0;
+	else
+		ret = -EINVAL;
+
+	return ret;
+}
+
+static DEVICE_ATTR(sys_suspend_en, S_IWUSR | S_IRUGO, usba_sys_suspend_enable_show, usba_sys_suspend_enable_store);
+
+ssize_t usba_suspend_to_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	ssize_t ret = -EIO;
+
+	if (!usba_suspend_enable) {
+		ret = scnprintf(buf, PAGE_SIZE, "disabled\n");
+	} else if (usba_suspend_to_state == PM_SUSPEND_STANDBY) {
+		ret = scnprintf(buf, PAGE_SIZE, "standby\n");
+	} else if (usba_suspend_to_state == PM_SUSPEND_MEM) {
+		ret = scnprintf(buf, PAGE_SIZE, "mem\n");
+	} else {
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+ssize_t usba_suspend_to_store(struct device *dev, struct device_attribute *attr,
+                 const char *buf, size_t count)
+{
+	int ret = count;
+
+	if (!strncmp(buf, "standby", 7))
+		usba_suspend_to_state = PM_SUSPEND_STANDBY;
+	else if (!strncmp(buf, "mem", 3))
+		usba_suspend_to_state = PM_SUSPEND_MEM;
+	else
+		ret = -EINVAL;
+
+	return ret;
+}
+
+static DEVICE_ATTR(sys_suspend_to, S_IWUSR | S_IRUGO, usba_suspend_to_show, usba_suspend_to_store);
+
+
 static int vbus_is_present(struct usba_udc *udc)
 {
 	if (gpio_is_valid(udc->vbus_pin))
@@ -350,6 +435,23 @@ static void toggle_bias(int is_on)
 
 #endif /* CONFIG_ARCH_AT91SAM9RL */
 
+void atmel_usba_udc_do_suspend(struct work_struct *work)
+{
+	DBG(DBG_PM, "atmel_usba_udc_do_suspend. enabled: %d, state: %d\n",
+		usba_suspend_enable,
+		usba_suspend_state);
+
+	if (usba_suspend_enable) {
+		if (usba_suspend_state > PM_SUSPEND_ON) {
+			pm_suspend(usba_suspend_state);
+		}
+	}
+
+	return;
+}
+
+DECLARE_WORK(suspend_work, atmel_usba_udc_do_suspend);
+
 static void next_fifo_transaction(struct usba_ep *ep, struct usba_request *req)
 {
 	unsigned int transaction_len;
@@ -1653,19 +1755,30 @@ static irqreturn_t usba_udc_irq(int irq, void *devid)
 	if (status & USBA_DET_SUSPEND) {
 		toggle_bias(0);
 		usba_writel(udc, INT_CLR, USBA_DET_SUSPEND);
+		usba_writel(udc, INT_CLR, USBA_WAKE_UP);
 		DBG(DBG_BUS, "Suspend detected\n");
 		if (udc->gadget.speed != USB_SPEED_UNKNOWN
 				&& udc->driver && udc->driver->suspend) {
 			spin_unlock(&udc->lock);
 			udc->driver->suspend(&udc->gadget);
 			spin_lock(&udc->lock);
-		}
-	}
 
-	if (status & USBA_WAKE_UP) {
+			/* Do system suspend feature, if enabled */
+			if( usba_suspend_enable ) {
+				if( usba_suspend_state < PM_SUSPEND_STANDBY ) {
+					DBG(DBG_PM, "Setting up suspend work\n");
+					usba_suspend_state = usba_suspend_to_state;
+					schedule_work(&suspend_work);
+				}
+			}
+		}
+	} else if (status & USBA_WAKE_UP) {
 		toggle_bias(1);
 		usba_writel(udc, INT_CLR, USBA_WAKE_UP);
 		DBG(DBG_BUS, "Wake Up CPU detected\n");
+		if( usba_suspend_enable ) {
+			usba_suspend_state = PM_SUSPEND_ON;
+		}
 	}
 
 	if (status & USBA_END_OF_RESUME) {
@@ -2099,6 +2212,21 @@ static int __init usba_udc_probe(struct platform_device *pdev)
 	if (ret)
 		goto err_add_udc;
 
+
+	/* setup /sys attributes for suspend feature */
+	ret = device_create_file(&pdev->dev, &dev_attr_sys_suspend_en);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable create sys_suspend_en sysfs entry: %d\n", ret);
+	}
+
+	ret = device_create_file(&pdev->dev, &dev_attr_sys_suspend_to);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable create sys_suspend_to sysfs entry: %d\n", ret);
+	}
+
+	/* setup device wakeup for suspend feature */
+	device_init_wakeup(&pdev->dev, 1);
+
 	usba_init_debugfs(udc);
 	for (i = 1; i < udc->num_ep; i++)
 		usba_ep_init_debugfs(udc, &usba_ep[i]);
@@ -2138,6 +2266,10 @@ static int __exit usba_udc_remove(struct platform_device *pdev)
 
 	udc = platform_get_drvdata(pdev);
 
+	device_init_wakeup(&pdev->dev, 0);
+	device_remove_file(&pdev->dev, &dev_attr_sys_suspend_en);
+	device_remove_file(&pdev->dev, &dev_attr_sys_suspend_to);
+
 	usb_del_gadget_udc(&udc->gadget);
 
 	for (i = 1; i < udc->num_ep; i++)
@@ -2170,8 +2302,36 @@ static const struct of_device_id atmel_udc_dt_ids[] = {
 MODULE_DEVICE_TABLE(of, atmel_udc_dt_ids);
 #endif
 
+static int usba_udc_suspend(struct platform_device *pdev)
+{
+	struct usba_udc *udc = &the_udc;
+
+	DBG(DBG_PM, "suspend -- may wake: %d; suspend_enable: %d", device_may_wakeup(&pdev->dev), usba_suspend_enable);
+
+	if (usba_suspend_enable && device_may_wakeup(&pdev->dev)) {
+		enable_irq_wake(udc->irq);
+	}
+
+	return 0;
+}
+
+static int usba_udc_resume(struct platform_device *pdev)
+{
+	struct usba_udc *udc = &the_udc;
+
+	DBG(DBG_PM, "resume -- may wake: %d; suspend_enable: %d", device_may_wakeup(&pdev->dev), usba_suspend_enable);
+
+	if (usba_suspend_enable && device_may_wakeup(&pdev->dev)) {
+		disable_irq_wake(udc->irq);
+	}
+
+	return 0;
+}
+
 static struct platform_driver udc_driver = {
 	.remove		= __exit_p(usba_udc_remove),
+	.suspend	= usba_udc_suspend,
+	.resume		= usba_udc_resume,
 	.driver		= {
 		.name		= "atmel_usba_udc",
 		.owner		= THIS_MODULE,
diff --git a/drivers/usb/gadget/atmel_usba_udc.h b/drivers/usb/gadget/atmel_usba_udc.h
index a7b2d25..59bef5e 100644
--- a/drivers/usb/gadget/atmel_usba_udc.h
+++ b/drivers/usb/gadget/atmel_usba_udc.h
@@ -234,6 +234,7 @@
 #define DBG_FIFO	0x0040  /* debug FIFO contents */
 #define DBG_DMA		0x0080  /* debug DMA handling */
 #define DBG_REQ		0x0100	/* print out queued request length */
+#define DBG_PM		0x0200  /* debug power management */
 #define DBG_ALL		0xffff
 #define DBG_NONE	0x0000
 
-- 
1.7.9.5

