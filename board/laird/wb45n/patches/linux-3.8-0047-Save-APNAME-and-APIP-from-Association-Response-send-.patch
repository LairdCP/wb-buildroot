From c7b9d35ce11dbc5ab651da0d0307f7ca8a07375d Mon Sep 17 00:00:00 2001
From: Eric Bentley <eric.bentley@lairdtech.com>
Date: Sun, 22 Dec 2013 16:32:45 -0500
Subject: [PATCH] Save APNAME and APIP from Association Response/send to SDK
 on request

The APNAME and APIP are now collected from the various IEs from the
association response.  The SDK can now pull this information for
passing to it's status command.

BZ 2251
---
 drivers/net/wireless/ath/ath6kl/core.h |    2 +
 drivers/net/wireless/ath/ath6kl/wmi.c  |   89 ++++++++++++++++++++++++++++----
 2 files changed, 82 insertions(+), 9 deletions(-)

diff --git a/drivers/net/wireless/ath/ath6kl/core.h b/drivers/net/wireless/ath/ath6kl/core.h
index bcf8475..c2aba43 100644
--- a/drivers/net/wireless/ath/ath6kl/core.h
+++ b/drivers/net/wireless/ath/ath6kl/core.h
@@ -852,6 +852,8 @@ struct ath6kl {
 		struct wmi_set_tx_select_rates32_cmd rates32;
 		struct wmi_set_htcap_cmd htcap_params_2ghz;
 		struct wmi_set_htcap_cmd htcap_params_5ghz;
+		char AP_Name[17];
+		char AP_IP[4];
 	} laird;
 };
 
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index b4a1924..eef1ee2 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -76,6 +76,18 @@ static const u8 up_to_ac[] = {
 };
 
 static void __lrd_remove_channels(struct ath6kl *ar, u8 *num_channels, u16 *channel_list);
+static void __lrd_set_AP_Name(struct wmi *wmi, const char *apname);
+static void __lrd_set_AP_IP(struct wmi *wmi, const char *apip);
+
+enum { // keep this list in sync with the one from ath_access.c from the SDK
+ 	GETVERSION=0,
+	GETTXPOWER,
+	GETAPNAME,
+	GETAPIP,
+} ATHEROS_CMD_GET_VALUES;
+
+#define AIRONET_CCX_IE   0x85
+#define AIRONET_AP_IP_IE 0x95
 
 void ath6kl_wmi_set_control_ep(struct wmi *wmi, enum htc_endpoint_id ep_id)
 {
@@ -868,6 +880,8 @@ static int ath6kl_wmi_connect_event_rx(struct wmi *wmi, u8 *datap, int len,
 	peie = ev->assoc_info + ev->beacon_ie_len + ev->assoc_req_len +
 	    ev->assoc_resp_len;
 
+	__lrd_set_AP_Name(wmi, NULL); // clear existing
+	__lrd_set_AP_IP(wmi, NULL);  // clear existing
 	while (pie < peie) {
 		switch (*pie) {
 		case WLAN_EID_VENDOR_SPECIFIC:
@@ -879,10 +893,16 @@ static int ath6kl_wmi_connect_event_rx(struct wmi *wmi, u8 *datap, int len,
 					wmi->is_wmm_enabled = true;
 			}
 			break;
-		}
-
-		if (wmi->is_wmm_enabled)
+		case AIRONET_CCX_IE: 
+			__lrd_set_AP_Name(wmi, pie+12);
 			break;
+		case AIRONET_AP_IP_IE:
+			__lrd_set_AP_IP(wmi, pie+6);
+			break;
+		}
+/* remove this short circuit so we can check more then the WMM ie */ 
+//		if (wmi->is_wmm_enabled)
+//			break;
 
 		pie += pie[1] + 2;
 	}
@@ -4309,7 +4329,7 @@ static struct genl_multicast_group atheros_events_mcgrp = {
 
 static struct wmi *gwmi = NULL;  // get access to wmi pointer for netlink entry point functions  FIXME: find alternative to this global!
 
-int ath6kl_genl_wmi_passthru (struct sk_buff *skb_2, struct genl_info *info)
+static int ath6kl_genl_wmi_passthru (struct sk_buff *skb_2, struct genl_info *info)
 {
 	struct nlattr *na;
 	struct sk_buff *skb;
@@ -4382,7 +4402,7 @@ int ath6kl_genl_wmi_passthru (struct sk_buff *skb_2, struct genl_info *info)
 	return 0;
 }
 
-int ath6kl_genl_set_phy_mode(struct sk_buff *skb_2, struct genl_info *info)
+static int ath6kl_genl_set_phy_mode(struct sk_buff *skb_2, struct genl_info *info)
 {
 	struct nlattr *na;
 	struct ath6kl *ar;  
@@ -4425,7 +4445,7 @@ int ath6kl_genl_set_phy_mode(struct sk_buff *skb_2, struct genl_info *info)
 	return 0;
 }
 
-int ath6kl_genl_get_value (struct sk_buff *skb_2, struct genl_info *info)
+static int ath6kl_genl_get_value (struct sk_buff *skb_2, struct genl_info *info)
 {
 	struct sk_buff *skb;
 	int rc=0;
@@ -4460,12 +4480,22 @@ int ath6kl_genl_get_value (struct sk_buff *skb_2, struct genl_info *info)
 		switch (*c)
 		{
 			/* add a ATHEROS_ATTR_MSG attribute (actual value to be sent) */
-			case 0 :
+			case GETVERSION:
 				rc = nla_put_s32( skb, ATHEROS_ATTR_MSG, LAIRD_DRV_VERSION );
 				break;
-			case 1 :	
+			case GETTXPOWER:
 				rc = nla_put_s32( skb, ATHEROS_ATTR_MSG, ar->tx_pwr );
 				break;
+			case GETAPNAME:
+				rc = nla_put_string(skb, ATHEROS_ATTR_MSG, ar->laird.AP_Name);
+				break;
+			case GETAPIP:
+				rc = nla_put_s32(skb, ATHEROS_ATTR_MSG, 
+						ar->laird.AP_IP[0] << 24 |
+						ar->laird.AP_IP[1] << 16 |
+						ar->laird.AP_IP[2] << 8 |
+						ar->laird.AP_IP[3]);
+				break;
 		}
 	}
 	if (rc != 0)
@@ -4550,7 +4580,7 @@ struct genl_ops atheros_ops[] = {
 	},
 };
 
-int ath6kl_genl_init(void) 
+static int ath6kl_genl_init(void) 
 {
 	int rc;
 	
@@ -4616,3 +4646,44 @@ void ath6kl_wmi_shutdown(struct wmi *wmi)
 	kfree(wmi->last_mgmt_tx_frame);
 	kfree(wmi);
 }
+
+/* 
+	apname is a pointer to the location in the ie where the AP name 
+	is located.  Some of the Cisco docs indicate this is 16 bytes
+	without null termination, so our version is 17 in length with
+	the last being 0x00.
+
+	if apname is NULL, clear our saved copy of the apname
+*/
+static void __lrd_set_AP_Name(struct wmi *wmi, const char *apname)
+{
+	struct ath6kl *ar;  
+	ar = wmi->parent_dev;
+
+	if (apname==NULL)
+	{
+		memset(ar->laird.AP_Name, 0, 17);
+	}
+	else
+	{
+		memcpy(ar->laird.AP_Name, apname, 16);
+	}
+}
+
+/*
+	if apip is NULL, clear our saved copy of the AP IP address
+*/
+static void __lrd_set_AP_IP(struct wmi *wmi, const char *apip)
+{
+	struct ath6kl *ar;  
+	ar = wmi->parent_dev;
+
+	if (apip==NULL)
+	{
+		memset(ar->laird.AP_IP, 0, 4);
+	}
+	else
+	{
+		memcpy(ar->laird.AP_IP, apip, 4);
+	}
+}
-- 
1.7.9.5

