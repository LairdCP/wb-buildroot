From e9fa04dc3722cc0dfcf61085dd108eede5aa8db1 Mon Sep 17 00:00:00 2001
From: Eric Bentley <eric.bentley@lairdtech.com>
Date: Fri, 30 Aug 2013 21:37:12 -0400
Subject: [PATCH] This adds the capability for the SDK to issue generic WMI
 commands to the driver, and also removes several commands
 that are no longer needed to be explicit commands (SDK now
 doing the same via the generic call). Note that the driver
 will not work with SDK versions prior to 3.4.1.9

---
 drivers/net/wireless/ath/ath6kl/laird.h |    2 +-
 drivers/net/wireless/ath/ath6kl/wmi.c   |  320 ++++---------------------------
 2 files changed, 41 insertions(+), 281 deletions(-)

diff --git a/drivers/net/wireless/ath/ath6kl/laird.h b/drivers/net/wireless/ath/ath6kl/laird.h
index f60d354..88ce754 100644
--- a/drivers/net/wireless/ath/ath6kl/laird.h
+++ b/drivers/net/wireless/ath/ath6kl/laird.h
@@ -6,7 +6,7 @@
 
 // Laird version is 32bit value.  Parsed in the form w.x.y.z.  
 // increment y.z as needed for each change
-#define LAIRD_DRV_VERSION 0x03040003
+#define LAIRD_DRV_VERSION 0x03040004
 
 #ifdef LAIRD_FIPS
 #include <linux/etherdevice.h>
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index 659c30b..8cb8878 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -4274,16 +4274,12 @@ static struct genl_family atheros_fam = {
 
 enum {
 	ATHEROS_CMD_UNSPEC,
-	ATHEROS_CMD_TEST_ECHO,
+	ATHEROS_CMD_RESPONSE,
 	ATHEROS_CMD_EVENT,
-	ATHEROS_CMD_SET_LOW_RSSI_PARAMS,
 	ATHEROS_CMD_GET_VERSION,
-	ATHEROS_CMD_SET_CHANNEL_PARAMS,
-	ATHEROS_CMD_SET_POWER_SAVE,
-	ATHEROS_CMD_SET_TX_SELECT_RATES,
-	ATHEROS_CMD_SET_HT_CAP,
+	ATHEROS_CMD_SET_PHY_MODE,
 	ATHEROS_CMD_SET_DFS_MODE,
-	ATHEROS_CMD_SET_REGDOMAIN,
+	ATHEROS_CMD_SEND_WMI,
 	__ATHEROS_CMD_MAX,
 };
 #define ATHEROS_CMD_MAX (__ATHEROS_CMD_MAX - 1)
@@ -4294,97 +4290,64 @@ static struct genl_multicast_group atheros_events_mcgrp = {
 
 static struct wmi *gwmi = NULL;  // get access to wmi pointer for netlink entry point functions  FIXME: find alternative to this global!
 
-int ath6kl_genl_set_power_save (struct sk_buff *skb_2, struct genl_info *info)
-{
-	return 0;
-}
-
-int	ath6kl_genl_set_tx_select_rates(struct sk_buff *skb_2, struct genl_info *info)
-{
-	struct nlattr *na;
-	struct sk_buff *skb;
-	struct wmi_set_tx_select_rates32_cmd *params;
-	struct ath6kl *ar;  
-	struct wmi *wmi = gwmi;
-
-	if ( gwmi == NULL )
-		return 0;
-
-	ar = wmi->parent_dev;
-		
-	if (info == NULL)
-	{
-		printk("%s: no data received\n", __func__);
-    	return 0;
-	}
-	na = info->attrs[ATHEROS_ATTR_MSG];
-    
-	if (na) {
-		params = (struct wmi_set_tx_select_rates32_cmd*)nla_data(na);
-		if (params == NULL)
-			printk("error while receiving data\n");
-		else
-		{
-			skb = ath6kl_wmi_get_new_buf(sizeof(*params));
-			if (!skb)
-				return -ENOMEM;
-
-			memcpy(skb->data, params, sizeof(*params));
-
-			ath6kl_wmi_cmd_send(wmi, 0, skb, WMI_SET_TX_SELECT_RATES_CMDID,
-					    NO_SYNC_WMIFLAG); 
-		}
-	}
-	else
-		printk("%s: no info->attrs %i\n", __func__, ATHEROS_ATTR_MSG);
-
-	return 0;
-}
-
-int	ath6kl_genl_set_ht_cap(struct sk_buff *skb_2, struct genl_info *info)
+int ath6kl_genl_wmi_passthru (struct sk_buff *skb_2, struct genl_info *info)
 {
 	struct nlattr *na;
 	struct sk_buff *skb;
-	struct wmi_set_htcap_cmd * params;
+	void *params;
+	int params_data_len;
+	u32 wmi_cmd;
 	struct ath6kl *ar;  
 	struct wmi *wmi = gwmi;
 
 	if ( gwmi == NULL )
-		return 0;
+		return -EINVAL;
 
 	ar = wmi->parent_dev;
 		
 	if (info == NULL)
 	{
-		printk("%s: no data received\n", __func__);
-    	return 0;
+		ath6kl_err( "%s: no data received\n", __func__);
+    	return -EINVAL;
 	}
+	
 	na = info->attrs[ATHEROS_ATTR_MSG];
-    
 	if (na) {
-		params = (struct wmi_set_htcap_cmd*)nla_data(na);
+		params = nla_data(na);
+		params_data_len = nla_len(na)-4; //(data follows int cmd
 		if (params == NULL)
-			printk("error while receiving data\n");
+			ath6kl_err("error while receiving data\n");
 		else
 		{
-			skb = ath6kl_wmi_get_new_buf(sizeof(*params));
+			skb = ath6kl_wmi_get_new_buf(params_data_len);
 			if (!skb)
 				return -ENOMEM;
 
-			memcpy(skb->data, params, sizeof(*params));
-
-			ath6kl_wmi_cmd_send(wmi, 0, skb, WMI_SET_HT_CAP_CMDID,
-					    NO_SYNC_WMIFLAG); 
+			memcpy(&wmi_cmd, params, sizeof(wmi_cmd));
+			switch(wmi_cmd)
+			{
+				// place holder in case other commands need special treatment
+				case WMI_SET_ROAM_CTRL_CMDID: 
+					{
+					void* p = (u32 *)params+1;
+					struct low_rssi_scan_params *t = (struct low_rssi_scan_params *)p; 
+					ar->lrssi_roam_threshold = t->lrssi_roam_threshold; // place holder 
+					}
+					break;
+				default:
+					break;
+			}
+			memcpy(skb->data, (u32 *)params+1, params_data_len);
+			ath6kl_wmi_cmd_send(wmi, 0, skb, wmi_cmd, NO_SYNC_WMIFLAG);
 		}
 	}
 	else
-		printk("%s: no info->attrs %i\n", __func__, ATHEROS_ATTR_MSG);
+		ath6kl_err("%s: no info->attrs \n", __func__);
 
-	
 	return 0;
 }
 
-int ath6kl_genl_set_channel_params (struct sk_buff *skb_2, struct genl_info *info)
+int ath6kl_genl_set_phy_mode(struct sk_buff *skb_2, struct genl_info *info)
 {
 	struct nlattr *na;
 	struct ath6kl *ar;  
@@ -4430,21 +4393,13 @@ int ath6kl_genl_get_version (struct sk_buff *skb_2, struct genl_info *info)
 	struct sk_buff *skb;
 	int rc;
 	void *msg_head;
-	{
-		struct ath6kl *ar;  // How to get ?  //efb
-		struct wmi *wmi = gwmi;
-		ar = wmi->parent_dev;
-		printk ("ready event mac addr %pM sw_ver 0x%x abi_ver 0x%x\n",
-				ar->mac_addr, 
-				ar->version.wlan_ver,
-				ar->version.abi_ver);
-	}
+
 	/* allocate some memory, since the size is not yet known use NLMSG_GOODSIZE*/	
 	skb = genlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
 	if (skb == NULL)
 		goto out;
 
-	msg_head = genlmsg_put(skb, 0, info->snd_seq+1, &atheros_fam, 0, ATHEROS_CMD_TEST_ECHO);
+	msg_head = genlmsg_put(skb, 0, info->snd_seq+1, &atheros_fam, 0, ATHEROS_CMD_RESPONSE);
 	if (msg_head == NULL) {
 		rc = -ENOMEM;
 		goto out;
@@ -4470,69 +4425,6 @@ int ath6kl_genl_get_version (struct sk_buff *skb_2, struct genl_info *info)
 	return 0;
 }
 
-int ath6kl_genl_set_low_rssi_params (struct sk_buff *skb_2, struct genl_info *info)
-{
-	struct nlattr *na;
-	struct sk_buff *skb;
-	struct low_rssi_scan_params *params;
-	struct roam_ctrl_cmd *cmd;
-	struct ath6kl *ar;  // How to get ?  //efb
-	struct wmi *wmi = gwmi;
-
-	if ( gwmi == NULL )
-		return 0;
-
-	ar = wmi->parent_dev;
-		
-	if (info == NULL)
-	{
-		printk("%s: no data received\n", __func__);
-    	return 0;
-	}
-
-	/*for each attribute there is an index in info->attrs which points to a nlattr structure
-     *in this structure the data is given
-     */
-	na = info->attrs[ATHEROS_ATTR_MSG];
-    
-	if (na) {
-		params = (struct low_rssi_scan_params *)nla_data(na);
-		if (params == NULL)
-			printk("error while receiving data\n");
-		else
-		{
-#if 0
-			printk("received:\n\trssi_scan_period: %d\n", params->lrssi_scan_period);
-			printk("\trssi_scan_threshold: %d\n", params->lrssi_scan_threshold);
-			printk("\trssi_roam_threshold: %d\n", params->lrssi_roam_threshold);
-			printk("\troam_rssi_floor: %d\n", params->roam_rssi_floor);
-#endif
-
-			ar->lrssi_roam_threshold = params->lrssi_roam_threshold; // place holder 
-
-			skb = ath6kl_wmi_get_new_buf(sizeof(*cmd));
-			if (!skb)
-				return -ENOMEM;
-
-			cmd = (struct roam_ctrl_cmd *) skb->data;
-
-			cmd->info.params.lrssi_scan_period = cpu_to_le16(params->lrssi_scan_period);
-			cmd->info.params.lrssi_scan_threshold = a_cpu_to_sle16(params->lrssi_scan_threshold);
-			cmd->info.params.lrssi_roam_threshold = a_cpu_to_sle16(params->lrssi_roam_threshold);
-			cmd->info.params.roam_rssi_floor = params->roam_rssi_floor;
-			cmd->roam_ctrl = WMI_SET_LRSSI_SCAN_PARAMS;
-
-			ath6kl_wmi_cmd_send(wmi, 0, skb, WMI_SET_ROAM_CTRL_CMDID,
-					    NO_SYNC_WMIFLAG);
-			
-		}
-	}
-	else
-		printk("%s: no info->attrs %i\n", __func__, ATHEROS_ATTR_MSG);
-
-	return 0;
-}
-
 int ath6kl_genl_set_dfs_mode(struct sk_buff *skb_2, struct genl_info *info)
 {
 	struct nlattr *na;
@@ -4573,108 +4465,6 @@ int ath6kl_genl_set_dfs_mode(struct sk_buff *skb_2, struct genl_info *info)
 	return 0;
 }
 
-int ath6kl_genl_set_regdomain(struct sk_buff *skb_2, struct genl_info *info)
-{
-	struct nlattr *na;
-	struct sk_buff *skb;
-	struct wmi_set_regdomain_cmd * params;
-	struct ath6kl *ar;  
-	struct wmi *wmi = gwmi;
-
-	if ( gwmi == NULL )
-		return 0;
-
-	ar = wmi->parent_dev;
-		
-	if (info == NULL)
-	{
-		printk("%s: no data received\n", __func__);
-    	return 0;
-	}
-	na = info->attrs[ATHEROS_ATTR_MSG];
-    
-	if (na) {
-		params = (struct wmi_set_regdomain_cmd*)nla_data(na);
-		if (params == NULL)
-			printk("error while receiving data\n");
-		else
-		{
-			skb = ath6kl_wmi_get_new_buf(sizeof(*params));
-			if (!skb)
-				return -ENOMEM;
-
-			memcpy(skb->data, params, sizeof(*params));
-
-			ath6kl_wmi_cmd_send(wmi, 0, skb, WMI_SET_REGDOMAIN_CMDID,
-					    NO_SYNC_WMIFLAG); 
-		}
-	}
-	else
-		printk("%s: no info->attrs %i\n", __func__, ATHEROS_ATTR_MSG);
-
-	
-	return 0;
-}
-
-/* an echo test command, receives a message, prints it and sends another message back */
-int ath6kl_genl_echo(struct sk_buff *skb_2, struct genl_info *info)
-{
-	struct nlattr *na;
-	struct sk_buff *skb;
-	int rc;
-	void *msg_head;
-	char * mydata;
-
-	if (info == NULL)
-    	goto out;
-  
-	/*for each attribute there is an index in info->attrs which points to a nlattr structure
-     *in this structure the data is given
-     */
-	na = info->attrs[ATHEROS_ATTR_MSG];
-    
-	if (na) {
-		mydata = (char *)nla_data(na);
-		if (mydata == NULL)
-			printk("error while receiving data\n");
-		else
-			printk("received: %s\n", mydata);
-		}
-	else
-		printk("no info->attrs %i\n", ATHEROS_ATTR_MSG);
-
-	/* send a message back*/
-	/* allocate some memory, since the size is not yet known use NLMSG_GOODSIZE*/	
-	skb = genlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
-	if (skb == NULL)
-		goto out;
-
-	msg_head = genlmsg_put(skb, 0, info->snd_seq+1, &atheros_fam, 0, ATHEROS_CMD_TEST_ECHO);
-	if (msg_head == NULL) {
-		rc = -ENOMEM;
-		goto out;
-	}
-	
-	/* add a ATHEROS_ATTR_MSG attribute (actual value to be sent) */
-	rc = nla_put_string(skb, ATHEROS_ATTR_MSG, "atheros netlink message to kernel worked");
-	if (rc != 0)
-		goto out;
-	
-	/* finalize the message */
-	genlmsg_end(skb, msg_head);
-
-   	/* send the message back */
-	rc = genlmsg_unicast(genl_info_net(info), skb, info->snd_portid);
-	if (rc != 0)
-		goto out;
-	return 0;
-
- 	out:
-    	ath6kl_err("an error occured in atheros_echo\n");
-  
-	return 0;
-}
-
 static void ath6kl_wmi_event_multicast(enum wmi_cmd_id cmd_id, u8 *datap, int len)
 {
     struct sk_buff *msg;
@@ -4719,58 +4509,28 @@ nla_put_failure:
 /* commands: mapping between the command enumeration and the actual function*/
 struct genl_ops atheros_ops[] = {
 	{
-		.cmd = ATHEROS_CMD_TEST_ECHO,
-		.flags = 0,
-		.policy = atheros_policy,
-		.doit = ath6kl_genl_echo,
-		.dumpit = NULL,
-	},	{
-		.cmd = ATHEROS_CMD_SET_LOW_RSSI_PARAMS,
-		.flags = 0,
-		.policy = atheros_policy,
-		.doit = ath6kl_genl_set_low_rssi_params,
-		.dumpit = NULL,
-	}, {
 		.cmd = ATHEROS_CMD_GET_VERSION,
 		.flags = 0,
 		.policy = atheros_policy,
 		.doit = ath6kl_genl_get_version,
 		.dumpit = NULL,
 	}, {
-		.cmd = ATHEROS_CMD_SET_CHANNEL_PARAMS,
-		.flags = 0,
-		.policy = atheros_policy,
-		.doit = ath6kl_genl_set_channel_params,
-		.dumpit = NULL,
-	}, {
-		.cmd = ATHEROS_CMD_SET_POWER_SAVE,
-		.flags = 0,
-		.policy = atheros_policy,
-		.doit = ath6kl_genl_set_power_save,
-		.dumpit = NULL,
-	}, {
-		.cmd = ATHEROS_CMD_SET_TX_SELECT_RATES,
-		.flags = 0,
-		.policy = atheros_policy,
-		.doit = ath6kl_genl_set_tx_select_rates,
-		.dumpit = NULL,
-	}, {
-		.cmd = ATHEROS_CMD_SET_HT_CAP,
+		.cmd = ATHEROS_CMD_SET_PHY_MODE,
 		.flags = 0,
 		.policy = atheros_policy,
-		.doit = ath6kl_genl_set_ht_cap,
+		.doit = ath6kl_genl_set_phy_mode,
 		.dumpit = NULL,
-	}, {
+	}, { 
 		.cmd = ATHEROS_CMD_SET_DFS_MODE,
 		.flags = 0,
 		.policy = atheros_policy,
 		.doit = ath6kl_genl_set_dfs_mode,
 		.dumpit = NULL,
 	}, {
-		.cmd = ATHEROS_CMD_SET_REGDOMAIN,
+		.cmd = ATHEROS_CMD_SEND_WMI,
 		.flags = 0,
 		.policy = atheros_policy,
-		.doit = ath6kl_genl_set_regdomain,
+		.doit = ath6kl_genl_wmi_passthru,
 		.dumpit = NULL,
 	},
 };
-- 
1.7.9.5

