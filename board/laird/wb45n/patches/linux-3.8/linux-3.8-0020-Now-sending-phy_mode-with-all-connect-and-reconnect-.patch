From 22ad0183f2cd4eddba9ddff6edc659d0baac20f5 Mon Sep 17 00:00:00 2001
From: Dan Kephart <dan.kephart@lairdtech.com>
Date: Mon, 12 Aug 2013 22:10:39 -0400
Subject: [PATCH] Now sending phy_mode with all connect and reconnect requests
 from cfg80211. Also adding in dfs enable/disable.

---
 drivers/net/wireless/ath/ath6kl/core.h |    4 +-
 drivers/net/wireless/ath/ath6kl/wmi.c  |  181 ++++++++++++++++++++++++++------
 drivers/net/wireless/ath/ath6kl/wmi.h  |   18 ++++
 3 files changed, 172 insertions(+), 31 deletions(-)

diff --git a/drivers/net/wireless/ath/ath6kl/core.h b/drivers/net/wireless/ath/ath6kl/core.h
index f77bdf3..a52296a 100644
--- a/drivers/net/wireless/ath/ath6kl/core.h
+++ b/drivers/net/wireless/ath/ath6kl/core.h
@@ -847,7 +847,9 @@ struct ath6kl {
 	//LAIRD
 	struct {
 		enum wmi_mode_phy phy_mode;	 		
-		bool dfs_channels;
+		enum wmi_dfs_mode dfs_mode;
+		u8 num_channels;
+		u16 channel_list[WMI_MAX_CHANNELS];
 	} laird;
 };
 
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index ac7727a..5c07960 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -75,6 +75,8 @@ static const u8 up_to_ac[] = {
 	WMM_AC_VO,
 };
 
+static void __remove_dfs_channels(u8 *num_channels, u16 *channel_list);
+
 void ath6kl_wmi_set_control_ep(struct wmi *wmi, enum htc_endpoint_id ep_id)
 {
 	if (WARN_ON(ep_id == ENDPOINT_UNUSED || ep_id >= ENDPOINT_MAX))
@@ -1225,8 +1227,11 @@ static int ath6kl_wmi_ratemask_reply_rx(struct wmi *wmi, u8 *datap, int len)
 static int ath6kl_wmi_ch_list_reply_rx(struct wmi *wmi, u8 *datap, int len)
 {
 	//LAIRD:  for reply
+	struct ath6kl *ar;  
 	struct wmi_channel_list_reply *reply;
 
+	ar = wmi->parent_dev;
+
 	if (len < sizeof(struct wmi_channel_list_reply))
 		return -EINVAL;
 
@@ -1235,6 +1240,17 @@ static int ath6kl_wmi_ch_list_reply_rx(struct wmi *wmi, u8 *datap, int len)
 #ifdef CONFIG_NL80211_TESTMODE
 	ath6kl_wmicfg_send_channel_list_reply(wmi, reply);
 #endif
+	
+	//check if DFS channels disabled, if so, limit channels to non-DFS and send channel_params
+	if(ar->laird.dfs_mode == DFS_DISABLED) {
+		ar->laird.num_channels = reply->num_ch;
+		memcpy(ar->laird.channel_list, reply->ch_list, sizeof(u16)*WMI_MAX_CHANNELS); 
+
+		__remove_dfs_channels(&ar->laird.num_channels, ar->laird.channel_list);
+		
+		ath6kl_wmi_channel_params_cmd(wmi, 0, 0, ar->laird.phy_mode, ar->laird.num_channels,
+										ar->laird.channel_list);
+	}
 
 	ath6kl_wakeup_event(wmi->parent_dev);
 
@@ -1844,6 +1860,7 @@ int ath6kl_wmi_connect_cmd(struct wmi *wmi, u8 if_idx,
 			   u8 *bssid, u16 channel, u32 ctrl_flags,
 			   u8 nw_subtype)
 {
+	struct ath6kl *ar; 
 	struct sk_buff *skb;
 	struct wmi_connect_cmd *cc;
 	int ret;
@@ -1887,6 +1904,11 @@ int ath6kl_wmi_connect_cmd(struct wmi *wmi, u8 if_idx,
 	if (bssid != NULL)
 		memcpy(cc->bssid, bssid, ETH_ALEN);
 
+	//LAIRD: Need to resend radio modes before all connects
+	ar = wmi->parent_dev;
+	ath6kl_wmi_channel_params_cmd(wmi, if_idx, 0, ar->laird.phy_mode, ar->laird.num_channels,
+								ar->laird.channel_list);
+
 	ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_CONNECT_CMDID,
 				  NO_SYNC_WMIFLAG);
 
@@ -1896,6 +1918,7 @@ int ath6kl_wmi_connect_cmd(struct wmi *wmi, u8 if_idx,
 int ath6kl_wmi_reconnect_cmd(struct wmi *wmi, u8 if_idx, u8 *bssid,
 			     u16 channel)
 {
+	struct ath6kl *ar; 
 	struct sk_buff *skb;
 	struct wmi_reconnect_cmd *cc;
 	int ret;
@@ -1915,6 +1938,11 @@ int ath6kl_wmi_reconnect_cmd(struct wmi *wmi, u8 if_idx, u8 *bssid,
 	if (bssid != NULL)
 		memcpy(cc->bssid, bssid, ETH_ALEN);
 
+	//LAIRD: Need to resend radio modes before all connects
+	ar = wmi->parent_dev;
+	ath6kl_wmi_channel_params_cmd(wmi, if_idx, 0, ar->laird.phy_mode, ar->laird.num_channels,
+								ar->laird.channel_list);
+
 	ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_RECONNECT_CMDID,
 				  NO_SYNC_WMIFLAG);
 
@@ -4134,6 +4162,75 @@ int ath6kl_wmi_control_rx(struct wmi *wmi, struct sk_buff *skb)
 	return ath6kl_wmi_proc_events(wmi, skb);
 }
 
+// LAIRD - function to limit freqs to non-DFS
+static bool __freq_is_dfs(const u16 freq)
+{
+	if((freq >= 5260) && (freq <= 5700))
+		return true;
+	else
+		return false;
+}
+
+static void __remove_dfs_channels(u8 *num_channels, u16 *channel_list)
+{
+	u32 i = 0;
+	u32 lastunused = 0;
+	u32 n_channels = 0;
+
+	//printk(KERN_ERR "Channels before filter (%d):", *num_channels);
+	//for (i = 0; i < *num_channels; i++)
+	//	printk(KERN_ERR " %d",  channel_list[i]);
+	//printk(KERN_ERR "\n");
+	
+
+    // locate any channels that are off band and move others into their 
+	// location.  Adjusting n_channels will prevent any extra values in the list
+	// from being used.  The channels structures are part of the wiphy and 
+	// should not be modified.
+	n_channels = *num_channels;
+	for(i = 0; i < n_channels; i++)
+	{
+		if (__freq_is_dfs(channel_list[i]))
+		{
+			//printk(KERN_ERR "Pruning %d from list\n", channel_list[i]);
+			(*num_channels)--;
+		}
+		else
+		{
+			if (i > lastunused)
+				channel_list[lastunused] = channel_list[i];
+			lastunused++;
+		}
+	}
+
+	//printk(KERN_ERR "Channels after filter (%d):", *num_channels);
+	//for (i = 0; i < *num_channels; i++)
+	//	printk(KERN_ERR " %d",  channel_list[i]);
+	//printk(KERN_ERR "\n");
+}
+
+int ath6kl_wmi_channel_params_cmd(struct wmi *wmi, u8 if_idx, u8 scan_param,
+			    u8 phy_mode, u8 num_channels, u16 *channel_list)
+{
+	struct sk_buff *skb;
+	struct wmi_channel_params_cmd *cmd;
+	int ret;
+
+	skb = ath6kl_wmi_get_new_buf(sizeof(*cmd) + ((num_channels-1)*sizeof(u16)));
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_channel_params_cmd *)skb->data;
+	cmd->scan_param = cpu_to_le16(scan_param);
+	cmd->phy_mode = cpu_to_le16(phy_mode);
+	cmd->num_channels = cpu_to_le16(num_channels);
+	memcpy(cmd->channel_list, channel_list, (num_channels)*sizeof(u16));
+
+	ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_SET_CHANNEL_PARAMS_CMDID,
+				  NO_SYNC_WMIFLAG);
+	return ret;
+}
+
 //LAIRD: structure, definitions, and functions needed for generic netlink events to userspace
 enum {
 	ATHEROS_ATTR_UNSPEC,
@@ -4172,6 +4269,7 @@ enum {
 	ATHEROS_CMD_SET_POWER_SAVE,
 	ATHEROS_CMD_SET_TX_SELECT_RATES,
 	ATHEROS_CMD_SET_HT_CAP,
+	ATHEROS_CMD_SET_DFS_MODE,
 	__ATHEROS_CMD_MAX,
 };
 #define ATHEROS_CMD_MAX (__ATHEROS_CMD_MAX - 1)
@@ -4275,20 +4373,10 @@ int	ath6kl_genl_set_ht_cap(struct sk_buff *skb_2, struct genl_info *info)
 int ath6kl_genl_set_channel_params (struct sk_buff *skb_2, struct genl_info *info)
 {
 	struct nlattr *na;
-	struct sk_buff *skb;
 	struct ath6kl *ar;  
 	struct wmi *wmi = gwmi;
-
-	typedef struct {
-	    u8     reserved1;
-	    u8     scanParam;              /* set if enable scan */
-	    u8     phyMode;                /* see WMI_PHY_MODE */
-	    u8     numChannels;            /* how many channels follow */
-	    u16    channelList[1];         /* channels in Mhz */
-	} WMI_CHANNEL_PARAMS_CMD;
-
-	WMI_CHANNEL_PARAMS_CMD *params;
-	WMI_CHANNEL_PARAMS_CMD *cmd;
+	struct wmi_channel_params_cmd *params;
+	
 	if ( gwmi == NULL )
 		return 0;
 
@@ -4306,28 +4394,15 @@ int ath6kl_genl_set_channel_params (struct sk_buff *skb_2, struct genl_info *inf
 	na = info->attrs[ATHEROS_ATTR_MSG];
     
 	if (na) {
-		params = (WMI_CHANNEL_PARAMS_CMD*)nla_data(na);
+		params = (struct wmi_channel_params_cmd*)nla_data(na);
 		if (params == NULL)
 			printk("error while receiving data\n");
 		else
 		{
-#if 0
-			printk("received:\n\phyMode: %d\n", params->phyMode);
-#endif
-
-			skb = ath6kl_wmi_get_new_buf(sizeof(*cmd));
-			if (!skb)
-				return -ENOMEM;
-
-			cmd = (WMI_CHANNEL_PARAMS_CMD *) skb->data;
+			ar->laird.phy_mode = params->phy_mode;
 
-			memset(cmd, 0, sizeof(*cmd));
-			cmd->phyMode = params->phyMode;
-			// number of channels == 0 means use default channels which is what we want
-
-			ath6kl_wmi_cmd_send(wmi, 0, skb, WMI_SET_CHANNEL_PARAMS_CMDID,
-					    NO_SYNC_WMIFLAG);
-			
+			ath6kl_wmi_channel_params_cmd(wmi, 0, 0, ar->laird.phy_mode, ar->laird.num_channels,
+										ar->laird.channel_list);
 		}
 	}
 	else
@@ -4444,6 +4519,46 @@ int ath6kl_genl_set_low_rssi_params (struct sk_buff *skb_2, struct genl_info *in
 	return 0;
 }
 
+int ath6kl_genl_set_dfs_mode(struct sk_buff *skb_2, struct genl_info *info)
+{
+	struct nlattr *na;
+	struct ath6kl *ar;  // How to get ?  //efb
+	struct wmi *wmi = gwmi;
+	enum wmi_dfs_mode *mode;
+
+	if ( gwmi == NULL )
+		return 0;
+
+	ar = wmi->parent_dev;
+		
+	if (info == NULL)
+	{
+		printk("%s: no data received\n", __func__);
+    	return 0;
+	}
+
+	/*for each attribute there is an index in info->attrs which points to a nlattr structure
+     *in this structure the data is given
+     */
+	na = info->attrs[ATHEROS_ATTR_MSG];
+    
+	if (na) {
+		mode = (enum wmi_dfs_mode*)nla_data(na);
+		if (mode == NULL)
+			printk("error while receiving data\n");
+		else
+		{
+			ar->laird.dfs_mode = *mode; 
+			
+			ath6kl_wmi_simple_cmd(wmi, 0, WMI_GET_CHANNEL_LIST_CMDID);
+		}
+	}
+	else
+		printk("%s: no info->attrs %i\n", __func__, ATHEROS_ATTR_MSG);
+
+	return 0;
+}
+
 /* an echo test command, receives a message, prints it and sends another message back */
 int ath6kl_genl_echo(struct sk_buff *skb_2, struct genl_info *info)
 {
@@ -4588,7 +4703,13 @@ struct genl_ops atheros_ops[] = {
 		.policy = atheros_policy,
 		.doit = ath6kl_genl_set_ht_cap,
 		.dumpit = NULL,
-	}, 
+	}, {
+		.cmd = ATHEROS_CMD_SET_DFS_MODE,
+		.flags = 0,
+		.policy = atheros_policy,
+		.doit = ath6kl_genl_set_dfs_mode,
+		.dumpit = NULL,
+	},
 };
 
 int ath6kl_genl_init(void) 
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.h b/drivers/net/wireless/ath/ath6kl/wmi.h
index 4da12f7..42d2751 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.h
+++ b/drivers/net/wireless/ath/ath6kl/wmi.h
@@ -1107,6 +1107,8 @@ enum wmi_mode_phy {
 	WMI_RATES_MODE_MAX
 };
 
+
+
 /* WMI_SET_TX_SELECT_RATES_CMDID */
 struct wmi_set_tx_select_rates32_cmd {
 	__le32 ratemask[WMI_RATES_MODE_MAX];
@@ -1225,8 +1227,22 @@ enum wmi_phy_mode {
 	WMI_11G_HT20	= 0x6,
 };
 
+/* LAIRD addition to support DFS modes */
+enum wmi_dfs_mode {
+	DFS_DISABLED,
+	DFS_ENABLED,
+};
+
 #define WMI_MAX_CHANNELS        32
 
+struct wmi_channel_params_cmd {
+    u8     reserved1;
+    u8     scan_param;              /* set if enable scan */
+    u8     phy_mode;                /* see WMI_PHY_MODE */
+    u8     num_channels;            /* how many channels follow */
+    u16    channel_list[1];         /* channels in Mhz */
+} __attribute__((__packed__));
+
 /*
  *  WMI_RSSI_THRESHOLD_PARAMS_CMDID
  *  Setting the polltime to 0 would disable polling. Threshold values are
@@ -2669,6 +2685,8 @@ int ath6kl_wmi_sta_bmiss_enhance_cmd(struct wmi *wmi, u8 if_idx, bool enable);
 int ath6kl_wmi_set_txe_notify(struct wmi *wmi, u8 idx,
 			      u32 rate, u32 pkts, u32 intvl);
 int ath6kl_wmi_set_regdomain_cmd(struct wmi *wmi, const char *alpha2);
+int ath6kl_wmi_channel_params_cmd(struct wmi *wmi, u8 if_idx, u8 scan_param,
+			    				u8 phy_mode, u8 num_channels, u16 *channel_list);
 
 /* AP mode uAPSD */
 int ath6kl_wmi_ap_set_apsd(struct wmi *wmi, u8 if_idx, u8 enable);
-- 
1.7.9.5

