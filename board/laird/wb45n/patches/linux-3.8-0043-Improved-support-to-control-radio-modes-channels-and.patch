From a4e637121449fa00ae243151febeb8521a664377 Mon Sep 17 00:00:00 2001
From: Dan Kephart <dan.kephart@lairdtech.com>
Date: Thu, 14 Nov 2013 12:15:51 -0500
Subject: [PATCH] Improved support to control radio modes, channels, and rates
 from the SDK

BZ2240, BZ2241, BZ2243, BZ2247, BZ4503, BZ4508, BZ4507, BZ4527
Also removed DFS logic from driver. Now sending ht_params,
tx_select rates, and radio mode with channels before all connects,
reconnects, scans (when disconnected), after disconnects, and scan complete
(when disconnected), and prunes scan list to match SDK specified.
---
 drivers/net/wireless/ath/ath6kl/core.c |    8 +-
 drivers/net/wireless/ath/ath6kl/core.h |    4 +-
 drivers/net/wireless/ath/ath6kl/wmi.c  |  174 +++++++++++++++-----------------
 drivers/net/wireless/ath/ath6kl/wmi.h  |    9 +-
 4 files changed, 93 insertions(+), 102 deletions(-)

diff --git a/drivers/net/wireless/ath/ath6kl/core.c b/drivers/net/wireless/ath/ath6kl/core.c
index ad83ee0..10ff484 100644
--- a/drivers/net/wireless/ath/ath6kl/core.c
+++ b/drivers/net/wireless/ath/ath6kl/core.c
@@ -305,10 +305,12 @@ struct ath6kl *ath6kl_core_create(struct device *dev)
 	memcpy(ar->ap_country_code, DEF_AP_COUNTRY_CODE, 3);
 	
 	//LAIRD: Initialize specifics
-	ar->laird.phy_mode = WMI_11AG_MODE;
-	ar->laird.dfs_mode = DFS_ENABLED;
+	ar->laird.phy_mode = 0;  //init to zero (invalid) so we can tell if we receive a mode later
 	ar->laird.num_channels = 0;
-	memset(ar->laird.channel_list, 0, sizeof(u16) * WMI_MAX_CHANNELS); 
+	memset(ar->laird.channel_list, 0, sizeof(u16) * WMI_MAX_CHANNELS);
+	memset(&(ar->laird.rates32), 0, sizeof(struct wmi_set_tx_select_rates32_cmd));
+	memset(&(ar->laird.htcap_params_2ghz), 0, sizeof(struct wmi_set_htcap_cmd));
+	memset(&(ar->laird.htcap_params_5ghz), 0, sizeof(struct wmi_set_htcap_cmd));
 
 	return ar;
 }
diff --git a/drivers/net/wireless/ath/ath6kl/core.h b/drivers/net/wireless/ath/ath6kl/core.h
index 3511600..bcf8475 100644
--- a/drivers/net/wireless/ath/ath6kl/core.h
+++ b/drivers/net/wireless/ath/ath6kl/core.h
@@ -847,9 +847,11 @@ struct ath6kl {
 	//LAIRD
 	struct {
 		enum wmi_phy_mode phy_mode;	 		
-		enum wmi_dfs_mode dfs_mode;
 		u8 num_channels;
 		u16 channel_list[WMI_MAX_CHANNELS];
+		struct wmi_set_tx_select_rates32_cmd rates32;
+		struct wmi_set_htcap_cmd htcap_params_2ghz;
+		struct wmi_set_htcap_cmd htcap_params_5ghz;
 	} laird;
 };
 
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.c b/drivers/net/wireless/ath/ath6kl/wmi.c
index a468565..b4a1924 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.c
+++ b/drivers/net/wireless/ath/ath6kl/wmi.c
@@ -75,7 +75,7 @@ static const u8 up_to_ac[] = {
 	WMM_AC_VO,
 };
 
-static void __remove_dfs_channels(u8 *num_channels, u16 *channel_list);
+static void __lrd_remove_channels(struct ath6kl *ar, u8 *num_channels, u16 *channel_list);
 
 void ath6kl_wmi_set_control_ep(struct wmi *wmi, enum htc_endpoint_id ep_id)
 {
@@ -1254,17 +1254,6 @@ static int ath6kl_wmi_ch_list_reply_rx(struct wmi *wmi, u8 *datap, int len)
 	ath6kl_wmicfg_send_channel_list_reply(wmi, reply);
 #endif
 	
-	//check if DFS channels disabled, if so, limit channels to non-DFS and send channel_params
-	if(ar->laird.dfs_mode == DFS_DISABLED) {
-		ar->laird.num_channels = reply->num_ch;
-		memcpy(ar->laird.channel_list, reply->ch_list, sizeof(u16)*WMI_MAX_CHANNELS); 
-
-		__remove_dfs_channels(&ar->laird.num_channels, ar->laird.channel_list);
-		
-		ath6kl_wmi_channel_params_cmd(wmi, 0, 0, ar->laird.phy_mode, ar->laird.num_channels,
-										ar->laird.channel_list);
-	}
-
 	ath6kl_wakeup_event(wmi->parent_dev);
 
 	return 0;
@@ -1873,7 +1862,6 @@ int ath6kl_wmi_connect_cmd(struct wmi *wmi, u8 if_idx,
 			   u8 *bssid, u16 channel, u32 ctrl_flags,
 			   u8 nw_subtype)
 {
-	struct ath6kl *ar; 
 	struct sk_buff *skb;
 	struct wmi_connect_cmd *cc;
 	int ret;
@@ -1917,10 +1905,8 @@ int ath6kl_wmi_connect_cmd(struct wmi *wmi, u8 if_idx,
 	if (bssid != NULL)
 		memcpy(cc->bssid, bssid, ETH_ALEN);
 
-	//LAIRD: Need to resend radio modes before all connects
-	ar = wmi->parent_dev;
-	ath6kl_wmi_channel_params_cmd(wmi, if_idx, 0, ar->laird.phy_mode, ar->laird.num_channels,
-								ar->laird.channel_list);
+	//LAIRD: Need to resend radio modes before all connects, disconnects, and requests
+	ath6kl_wmi_send_radio_mode(wmi, if_idx);
 
 	ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_CONNECT_CMDID,
 				  NO_SYNC_WMIFLAG);
@@ -1931,7 +1917,6 @@ int ath6kl_wmi_connect_cmd(struct wmi *wmi, u8 if_idx,
 int ath6kl_wmi_reconnect_cmd(struct wmi *wmi, u8 if_idx, u8 *bssid,
 			     u16 channel)
 {
-	struct ath6kl *ar; 
 	struct sk_buff *skb;
 	struct wmi_reconnect_cmd *cc;
 	int ret;
@@ -1951,10 +1936,8 @@ int ath6kl_wmi_reconnect_cmd(struct wmi *wmi, u8 if_idx, u8 *bssid,
 	if (bssid != NULL)
 		memcpy(cc->bssid, bssid, ETH_ALEN);
 
-	//LAIRD: Need to resend radio modes before all connects
-	ar = wmi->parent_dev;
-	ath6kl_wmi_channel_params_cmd(wmi, if_idx, 0, ar->laird.phy_mode, ar->laird.num_channels,
-								ar->laird.channel_list);
+	//LAIRD: Need to resend radio modes before all connects, disconnects, and requests
+	ath6kl_wmi_send_radio_mode(wmi, if_idx);
 
 	ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, WMI_RECONNECT_CMDID,
 				  NO_SYNC_WMIFLAG);
@@ -2041,9 +2024,15 @@ int ath6kl_wmi_beginscan_cmd(struct wmi *wmi, u8 if_idx,
 	s8 size, *supp_rates;
 	int i, band, ret;
 	struct ath6kl *ar = wmi->parent_dev;
+	struct ath6kl_vif *vif = ath6kl_get_vif_by_index(ar, if_idx);
 	int num_rates;
 	u32 ratemask;
 
+	__lrd_remove_channels(ar, &num_chan, ch_list);
+
+	if(vif && vif->sme_state != SME_CONNECTED)
+		ath6kl_wmi_send_radio_mode(wmi, if_idx);
+
 	if (!test_bit(ATH6KL_FW_CAPABILITY_STA_P2PDEV_DUPLEX,
 		      ar->fw_capabilities)) {
 		return ath6kl_wmi_startscan_cmd(wmi, if_idx,
@@ -3946,6 +3935,7 @@ static int ath6kl_wmi_proc_events_vif(struct wmi *wmi, u16 if_idx, u16 cmd_id,
 		return ath6kl_wmi_connect_event_rx(wmi, datap, len, vif);
 	case WMI_DISCONNECT_EVENTID:
 		ath6kl_dbg(ATH6KL_DBG_WMI, "WMI_DISCONNECT_EVENTID\n");
+		ath6kl_wmi_send_radio_mode(wmi, if_idx);
 		return ath6kl_wmi_disconnect_event_rx(wmi, datap, len, vif);
 	case WMI_TKIP_MICERR_EVENTID:
 		ath6kl_dbg(ATH6KL_DBG_WMI, "WMI_TKIP_MICERR_EVENTID\n");
@@ -3959,6 +3949,8 @@ static int ath6kl_wmi_proc_events_vif(struct wmi *wmi, u16 if_idx, u16 cmd_id,
 							   vif);
 	case WMI_SCAN_COMPLETE_EVENTID:
 		ath6kl_dbg(ATH6KL_DBG_WMI, "WMI_SCAN_COMPLETE_EVENTID\n");
+		if(vif->sme_state != SME_CONNECTED)
+			ath6kl_wmi_send_radio_mode(wmi, if_idx);
 		return ath6kl_wmi_scan_complete_rx(wmi, datap, len, vif);
 	case WMI_REPORT_STATISTICS_EVENTID:
 		ath6kl_dbg(ATH6KL_DBG_WMI, "WMI_REPORT_STATISTICS_EVENTID\n");
@@ -4175,37 +4167,34 @@ int ath6kl_wmi_control_rx(struct wmi *wmi, struct sk_buff *skb)
 	return ath6kl_wmi_proc_events(wmi, skb);
 }
 
-// LAIRD - function to limit freqs to non-DFS
-static bool __freq_is_dfs(const u16 freq)
+// LAIRD - functions to limit freqs to laird specified
+static bool __freq_is_specified(struct ath6kl *ar, const u16 freq)
 {
-	if((freq >= 5260) && (freq <= 5700))
-		return true;
-	else
-		return false;
+	u32 i;
+	u32 n_channels = ar->laird.num_channels;
+
+	for(i = 0; i < n_channels; i++)
+		if(freq == ar->laird.channel_list[i])
+			return true;
+
+	return false;
 }
 
-static void __remove_dfs_channels(u8 *num_channels, u16 *channel_list)
+static void __lrd_remove_channels(struct ath6kl *ar, u8 *num_channels, u16 *channel_list)
 {
 	u32 i = 0;
 	u32 lastunused = 0;
 	u32 n_channels = 0;
 
-	//printk(KERN_ERR "Channels before filter (%d):", *num_channels);
-	//for (i = 0; i < *num_channels; i++)
-	//	printk(KERN_ERR " %d",  channel_list[i]);
-	//printk(KERN_ERR "\n");
-	
+	//If phy_mode == 0, then we haven't set this information yet so don't prune list
+	if(ar->laird.phy_mode == 0)
+		return;
 
-    // locate any channels that are off band and move others into their 
-	// location.  Adjusting n_channels will prevent any extra values in the list
-	// from being used.  The channels structures are part of the wiphy and 
-	// should not be modified.
 	n_channels = *num_channels;
 	for(i = 0; i < n_channels; i++)
 	{
-		if (__freq_is_dfs(channel_list[i]))
+		if (!__freq_is_specified(ar, channel_list[i]))
 		{
-			//printk(KERN_ERR "Pruning %d from list\n", channel_list[i]);
 			(*num_channels)--;
 		}
 		else
@@ -4215,11 +4204,6 @@ static void __remove_dfs_channels(u8 *num_channels, u16 *channel_list)
 			lastunused++;
 		}
 	}
-
-	//printk(KERN_ERR "Channels after filter (%d):", *num_channels);
-	//for (i = 0; i < *num_channels; i++)
-	//	printk(KERN_ERR " %d",  channel_list[i]);
-	//printk(KERN_ERR "\n");
 }
 
 int ath6kl_wmi_channel_params_cmd(struct wmi *wmi, u8 if_idx, u8 scan_param,
@@ -4244,6 +4228,42 @@ int ath6kl_wmi_channel_params_cmd(struct wmi *wmi, u8 if_idx, u8 scan_param,
 	return ret;
 }
 
+int ath6kl_wmi_send_buf_cmd(struct wmi *wmi, u8 if_idx, enum wmi_cmd_id cmd_id,
+							u32 size, u8 *buf)
+{
+	struct sk_buff *skb;
+	int ret;
+
+	skb = ath6kl_wmi_get_new_buf(size);
+	if (!skb)
+		return -ENOMEM;
+
+	memcpy(skb->data, buf, size);
+
+	ret = ath6kl_wmi_cmd_send(wmi, if_idx, skb, cmd_id, NO_SYNC_WMIFLAG);
+	return ret;
+}
+
+void ath6kl_wmi_send_radio_mode(struct wmi *wmi, u8 if_idx)
+{
+	struct ath6kl *ar;
+
+	ar = wmi->parent_dev;
+
+	//If phy_mode == 0, then we haven't set this information yet so don't send
+	if(ar->laird.phy_mode == 0)
+		return;
+
+	ath6kl_wmi_send_buf_cmd(wmi, if_idx, WMI_SET_TX_SELECT_RATES_CMDID,
+							sizeof(struct wmi_set_tx_select_rates32_cmd), (u8*)&(ar->laird.rates32));
+	ath6kl_wmi_send_buf_cmd(wmi, if_idx, WMI_SET_HT_CAP_CMDID, sizeof(struct wmi_set_htcap_cmd),
+							(u8*)&(ar->laird.htcap_params_2ghz));
+	ath6kl_wmi_send_buf_cmd(wmi, if_idx, WMI_SET_HT_CAP_CMDID, sizeof(struct wmi_set_htcap_cmd),
+							(u8*)&(ar->laird.htcap_params_5ghz));
+	ath6kl_wmi_channel_params_cmd(wmi, if_idx, 0, ar->laird.phy_mode, ar->laird.num_channels,
+								ar->laird.channel_list);
+}
+
 //LAIRD: structure, definitions, and functions needed for generic netlink events to userspace
 enum {
 	ATHEROS_ATTR_UNSPEC,
@@ -4278,7 +4298,6 @@ enum {
 	ATHEROS_CMD_EVENT,
 	ATHEROS_CMD_GET_VALUE,
 	ATHEROS_CMD_SET_PHY_MODE,
-	ATHEROS_CMD_SET_DFS_MODE,
 	ATHEROS_CMD_SEND_WMI,
 	__ATHEROS_CMD_MAX,
 };
@@ -4335,6 +4354,21 @@ int ath6kl_genl_wmi_passthru (struct sk_buff *skb_2, struct genl_info *info)
 					ar->lrssi_roam_threshold = t->lrssi_roam_threshold; // place holder 
 					}
 					break;
+				case WMI_SET_TX_SELECT_RATES_CMDID:
+					{
+					struct wmi_set_tx_select_rates32_cmd *rates = (struct wmi_set_tx_select_rates32_cmd*)p;
+					memcpy(&ar->laird.rates32, rates, sizeof(struct wmi_set_tx_select_rates32_cmd));
+					}
+					break;
+				case WMI_SET_HT_CAP_CMDID:
+					{
+					struct wmi_set_htcap_cmd *htcap = (struct wmi_set_htcap_cmd*)p;
+					if(htcap->band == NL80211_BAND_2GHZ)
+						memcpy(&ar->laird.htcap_params_2ghz, htcap, sizeof(struct wmi_set_htcap_cmd));
+					else if(htcap->band == NL80211_BAND_5GHZ)
+						memcpy(&ar->laird.htcap_params_5ghz, htcap, sizeof(struct wmi_set_htcap_cmd));
+					}
+					break;
 				default:
 					break;
 			}
@@ -4378,6 +4412,8 @@ int ath6kl_genl_set_phy_mode(struct sk_buff *skb_2, struct genl_info *info)
 		else
 		{
 			ar->laird.phy_mode = params->phy_mode;
+			ar->laird.num_channels = params->num_channels;
+			memcpy(&ar->laird.channel_list, params->channel_list, sizeof(uint16_t) * params->num_channels);
 
 			ath6kl_wmi_channel_params_cmd(wmi, 0, 0, ar->laird.phy_mode, ar->laird.num_channels,
 										ar->laird.channel_list);
@@ -4450,46 +4486,6 @@ int ath6kl_genl_get_value (struct sk_buff *skb_2, struct genl_info *info)
 	return 0;
 }
 
-int ath6kl_genl_set_dfs_mode(struct sk_buff *skb_2, struct genl_info *info)
-{
-	struct nlattr *na;
-	struct ath6kl *ar;  
-	struct wmi *wmi = gwmi;
-	enum wmi_dfs_mode *mode;
-
-	if ( gwmi == NULL )
-		return 0;
-
-	ar = wmi->parent_dev;
-		
-	if (info == NULL)
-	{
-		printk("%s: no data received\n", __func__);
-    	return 0;
-	}
-
-	/*for each attribute there is an index in info->attrs which points to a nlattr structure
-     *in this structure the data is given
-     */
-	na = info->attrs[ATHEROS_ATTR_MSG];
-    
-	if (na) {
-		mode = (enum wmi_dfs_mode*)nla_data(na);
-		if (mode == NULL)
-			printk("error while receiving data\n");
-		else
-		{
-			ar->laird.dfs_mode = *mode; 
-			
-			ath6kl_wmi_simple_cmd(wmi, 0, WMI_GET_CHANNEL_LIST_CMDID);
-		}
-	}
-	else
-		printk("%s: no info->attrs %i\n", __func__, ATHEROS_ATTR_MSG);
-
-	return 0;
-}
-
 static void ath6kl_wmi_event_multicast(enum wmi_cmd_id cmd_id, u8 *datap, int len)
 {
     struct sk_buff *msg;
@@ -4545,12 +4541,6 @@ struct genl_ops atheros_ops[] = {
 		.policy = atheros_policy,
 		.doit = ath6kl_genl_set_phy_mode,
 		.dumpit = NULL,
-	}, { 
-		.cmd = ATHEROS_CMD_SET_DFS_MODE,
-		.flags = 0,
-		.policy = atheros_policy,
-		.doit = ath6kl_genl_set_dfs_mode,
-		.dumpit = NULL,
 	}, {
 		.cmd = ATHEROS_CMD_SEND_WMI,
 		.flags = 0,
diff --git a/drivers/net/wireless/ath/ath6kl/wmi.h b/drivers/net/wireless/ath/ath6kl/wmi.h
index 64eafa1..d323291 100644
--- a/drivers/net/wireless/ath/ath6kl/wmi.h
+++ b/drivers/net/wireless/ath/ath6kl/wmi.h
@@ -1227,12 +1227,6 @@ enum wmi_phy_mode {
 	WMI_11G_HT20	= 0x6,
 };
 
-/* LAIRD addition to support DFS modes */
-enum wmi_dfs_mode {
-	DFS_DISABLED,
-	DFS_ENABLED,
-};
-
 #define WMI_MAX_CHANNELS        64
 
 struct wmi_channel_params_cmd {
@@ -2687,6 +2681,9 @@ int ath6kl_wmi_set_txe_notify(struct wmi *wmi, u8 idx,
 int ath6kl_wmi_set_regdomain_cmd(struct wmi *wmi, const char *alpha2);
 int ath6kl_wmi_channel_params_cmd(struct wmi *wmi, u8 if_idx, u8 scan_param,
 			    				u8 phy_mode, u8 num_channels, u16 *channel_list);
+int ath6kl_wmi_send_buf_cmd(struct wmi *wmi, u8 if_idx, enum wmi_cmd_id cmd_id,
+							u32 size, u8 *buf);
+void ath6kl_wmi_send_radio_mode(struct wmi *wmi, u8 if_idx);
 
 /* AP mode uAPSD */
 int ath6kl_wmi_ap_set_apsd(struct wmi *wmi, u8 if_idx, u8 enable);
-- 
1.7.9.5

