From 2e1bfa5be8e493388b4e0667a83dfe1568ff7704 Mon Sep 17 00:00:00 2001
From: Dimitrios Siganos <dimitris@siganos.org>
Date: Tue, 2 Jul 2013 14:39:11 -0400
Subject: [PATCH] Applying patch linux-3.8-0003-ath6kl-wmiconfig.patch

---
 drivers/net/wireless/ath/ath6kl/Makefile    |    1 +
 drivers/net/wireless/ath/ath6kl/main.c      |    5 ++
 drivers/net/wireless/ath/ath6kl/testmode.c  |   28 +++++++++
 drivers/net/wireless/ath/ath6kl/wmiconfig.c |   88 +++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath6kl/wmiconfig.h |   25 ++++++++
 5 files changed, 147 insertions(+)
 create mode 100644 drivers/net/wireless/ath/ath6kl/wmiconfig.c
 create mode 100644 drivers/net/wireless/ath/ath6kl/wmiconfig.h

diff --git a/drivers/net/wireless/ath/ath6kl/Makefile b/drivers/net/wireless/ath/ath6kl/Makefile
index fc26b1f..e292fd4 100644
--- a/drivers/net/wireless/ath/ath6kl/Makefile
+++ b/drivers/net/wireless/ath/ath6kl/Makefile
@@ -35,6 +35,7 @@ ath6kl_core-y += txrx.o
 ath6kl_core-y += wmi.o
 ath6kl_core-y += core.o
 ath6kl_core-y += recovery.o
+ath6kl_core-$(CONFIG_NL80211_TESTMODE) += wmiconfig.o
 ath6kl_core-$(CONFIG_NL80211_TESTMODE) += testmode.o
 
 obj-$(CONFIG_ATH6KL_SDIO) += ath6kl_sdio.o
diff --git a/drivers/net/wireless/ath/ath6kl/main.c b/drivers/net/wireless/ath/ath6kl/main.c
index 728c24c..f8bd844 100644
--- a/drivers/net/wireless/ath/ath6kl/main.c
+++ b/drivers/net/wireless/ath/ath6kl/main.c
@@ -22,6 +22,7 @@
 #include "cfg80211.h"
 #include "target.h"
 #include "debug.h"
+#include "wmiconfig.h"
 #include "laird.h"
 
 struct ath6kl_sta *ath6kl_find_sta(struct ath6kl_vif *vif, u8 *node_addr)
@@ -833,6 +834,10 @@ static void ath6kl_update_target_stats(struct ath6kl_vif *vif, u8 *ptr, u32 len)
 	stats->arp_replied = le32_to_cpu(tgt_stats->arp_stats.arp_replied);
 	stats->arp_matched = le32_to_cpu(tgt_stats->arp_stats.arp_matched);
 
+#ifdef CONFIG_NL80211_TESTMODE
+	ath6kl_wmicfg_send_stats(vif, stats);
+#endif
+
 	if (test_bit(STATS_UPDATE_PEND, &vif->flags)) {
 		clear_bit(STATS_UPDATE_PEND, &vif->flags);
 		wake_up(&ar->event_wq);
diff --git a/drivers/net/wireless/ath/ath6kl/testmode.c b/drivers/net/wireless/ath/ath6kl/testmode.c
index acc9aa8..cbed31f 100644
--- a/drivers/net/wireless/ath/ath6kl/testmode.c
+++ b/drivers/net/wireless/ath/ath6kl/testmode.c
@@ -17,8 +17,10 @@
 
 #include "testmode.h"
 #include "debug.h"
+#include "cfg80211.h"
 
 #include <net/netlink.h>
+#include "wmiconfig.h"
 
 enum ath6kl_tm_attr {
 	__ATH6KL_TM_ATTR_INVALID	= 0,
@@ -33,6 +35,7 @@ enum ath6kl_tm_attr {
 enum ath6kl_tm_cmd {
 	ATH6KL_TM_CMD_TCMD		= 0,
 	ATH6KL_TM_CMD_RX_REPORT		= 1,	/* not used anymore */
+	ATH6KL_TM_CMD_WMI_CMD		= 0xF000,
 };
 
 #define ATH6KL_TM_DATA_MAX_LEN		5000
@@ -72,6 +75,8 @@ int ath6kl_tm_cmd(struct wiphy *wiphy, void *data, int len)
 	struct nlattr *tb[ATH6KL_TM_ATTR_MAX + 1];
 	int err, buf_len;
 	void *buf;
+	u32 wmi_cmd;
+	struct sk_buff *skb;
 
 	err = nla_parse(tb, ATH6KL_TM_ATTR_MAX, data, len,
 			ath6kl_tm_policy);
@@ -82,6 +87,26 @@ int ath6kl_tm_cmd(struct wiphy *wiphy, void *data, int len)
 		return -EINVAL;
 
 	switch (nla_get_u32(tb[ATH6KL_TM_ATTR_CMD])) {
+	case ATH6KL_TM_CMD_WMI_CMD:
+		if (!tb[ATH6KL_TM_ATTR_DATA])
+			return -EINVAL;
+
+		buf = nla_data(tb[ATH6KL_TM_ATTR_DATA]);
+		buf_len = nla_len(tb[ATH6KL_TM_ATTR_DATA]);
+
+		/* First four bytes hold the wmi_cmd and the rest is the data */
+		skb = ath6kl_wmi_get_buf(buf_len-4);
+		if (!skb)
+			return -ENOMEM;
+ath6kl_err("DANKE: in %s at %d\n", __func__, __LINE__);
+
+		memcpy(&wmi_cmd, buf, sizeof(wmi_cmd));
+		memcpy(skb->data, (u32 *)buf + 1, buf_len - 4);
+		ath6kl_wmi_cmd_send(ar->wmi, 0, skb, wmi_cmd, NO_SYNC_WMIFLAG);
+
+		return 0;
+
+		break;
 	case ATH6KL_TM_CMD_TCMD:
 		if (!tb[ATH6KL_TM_ATTR_DATA])
 			return -EINVAL;
@@ -89,6 +114,7 @@ int ath6kl_tm_cmd(struct wiphy *wiphy, void *data, int len)
 		buf = nla_data(tb[ATH6KL_TM_ATTR_DATA]);
 		buf_len = nla_len(tb[ATH6KL_TM_ATTR_DATA]);
 
+ath6kl_err("DANKE: in %s at %d\n", __func__, __LINE__);
 		ath6kl_wmi_test_cmd(ar->wmi, buf, buf_len);
 
 		return 0;
@@ -96,6 +122,8 @@ int ath6kl_tm_cmd(struct wiphy *wiphy, void *data, int len)
 		break;
 	case ATH6KL_TM_CMD_RX_REPORT:
 	default:
+ath6kl_err("DANKE: in %s at %d\n", __func__, __LINE__);
+
 		return -EOPNOTSUPP;
 	}
 }
diff --git a/drivers/net/wireless/ath/ath6kl/wmiconfig.c b/drivers/net/wireless/ath/ath6kl/wmiconfig.c
new file mode 100644
index 0000000..5d96cf6
--- /dev/null
+++ b/drivers/net/wireless/ath/ath6kl/wmiconfig.c
@@ -0,0 +1,88 @@
+/*
+ * Copyright (c) 2010-2011 Atheros Communications Inc.
+ * Copyright (c) 2011 Qualcomm Atheros, Inc.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include "testmode.h"
+#include "debug.h"
+#include "wmi.h"
+
+#include <net/netlink.h>
+
+enum ath6kl_tm_attr {
+	__ATH6KL_TM_ATTR_INVALID	= 0,
+	ATH6KL_TM_ATTR_CMD		= 1,
+	ATH6KL_TM_ATTR_DATA		= 2,
+
+	/* keep last */
+	__ATH6KL_TM_ATTR_AFTER_LAST,
+	ATH6KL_TM_ATTR_MAX		= __ATH6KL_TM_ATTR_AFTER_LAST - 1,
+};
+
+enum ath6kl_tm_cmd {
+	ATH6KL_TM_CMD_TCMD		= 0,
+	ATH6KL_TM_CMD_RX_REPORT		= 1,	/* not used anymore */
+	ATH6KL_TM_CMD_WMI_CMD		= 0xF000,
+};
+
+struct sk_buff *ath6kl_wmi_get_buf(u32 size)
+{
+	struct sk_buff *skb;
+
+	skb = ath6kl_buf_alloc(size);
+	if (!skb)
+		return NULL;
+
+	skb_put(skb, size);
+	if (size)
+		memset(skb->data, 0, size);
+
+	return skb;
+}
+void ath6kl_tm_rx_wmi_event(struct ath6kl *ar, void *buf, size_t buf_len)
+{
+	struct sk_buff *skb;
+
+
+	if (!buf || buf_len == 0)
+		return;
+
+	skb = cfg80211_testmode_alloc_event_skb(ar->wiphy, buf_len, GFP_KERNEL);
+	if (!skb) {
+		ath6kl_warn("failed to allocate testmode rx skb!\n");
+		return;
+	}
+	nla_put_u32(skb, ATH6KL_TM_ATTR_CMD, ATH6KL_TM_CMD_WMI_CMD);
+	nla_put(skb, ATH6KL_TM_ATTR_DATA, buf_len, buf);
+	cfg80211_testmode_event(skb, GFP_KERNEL);
+	return;
+
+nla_put_failure:
+	kfree_skb(skb);
+	ath6kl_warn("nla_put failed on testmode rx skb!\n");
+}
+
+
+void ath6kl_wmicfg_send_stats(struct ath6kl_vif *vif,
+			      struct target_stats *stats)
+{
+	u32 *buff = kzalloc(sizeof(*stats) + 4, GFP_KERNEL);
+
+	buff[0] = WMI_REPORT_STATISTICS_EVENTID;
+	memcpy(buff+1, stats, sizeof(struct target_stats));
+	ath6kl_tm_rx_wmi_event(vif->ar->wmi->parent_dev, buff,
+			       sizeof(struct target_stats)+4);
+	kfree(buff);
+}
diff --git a/drivers/net/wireless/ath/ath6kl/wmiconfig.h b/drivers/net/wireless/ath/ath6kl/wmiconfig.h
new file mode 100644
index 0000000..bcc29ae
--- /dev/null
+++ b/drivers/net/wireless/ath/ath6kl/wmiconfig.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) 2011 Atheros Communications Inc.
+ * Copyright (c) 2011-2012 Qualcomm Atheros, Inc.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#ifndef WMICONFIG_H
+#define WMICONFIG_H
+
+struct sk_buff *ath6kl_wmi_get_buf(u32 size);
+void ath6kl_tm_rx_wmi_event(struct ath6kl *ar, void *buf, size_t buf_len);
+void ath6kl_wmicfg_send_stats(struct ath6kl_vif *vif,
+			      struct target_stats *stats);
+#endif
-- 
1.7.9.5

