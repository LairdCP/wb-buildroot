diff -Naur a/Makefile.am b/Makefile.am
--- a/Makefile.am	2021-10-29 19:03:22.644472361 +0000
+++ b/Makefile.am	2021-10-29 19:05:28.668472361 +0000
@@ -479,7 +479,8 @@
 			drivers/gemaltomodem/gemaltomodem.c \
 			drivers/gemaltomodem/location-reporting.c \
 			drivers/gemaltomodem/voicecall.c \
-			drivers/gemaltomodem/gprs-context-ncm.c
+			drivers/gemaltomodem/gprs-context-ncm.c \
+			drivers/gemaltomodem/lte.c
 
 builtin_modules += xmm7modem
 builtin_sources += drivers/atmodem/atutil.h \
diff -Naur a/drivers/gemaltomodem/gemaltomodem.c b/drivers/gemaltomodem/gemaltomodem.c
--- a/drivers/gemaltomodem/gemaltomodem.c	2021-10-29 19:03:22.644472361 +0000
+++ b/drivers/gemaltomodem/gemaltomodem.c	2021-10-29 19:07:01.336472361 +0000
@@ -38,11 +38,13 @@
 	gemalto_location_reporting_init();
 	gemalto_voicecall_init();
 	gemaltoncm_gprs_context_init();
+	gemalto_lte_init();
 	return 0;
 }
 
 static void gemaltomodem_exit(void)
 {
+	gemalto_lte_exit();
 	gemaltoncm_gprs_context_exit();
 	gemalto_voicecall_exit();
 	gemalto_location_reporting_exit();
diff -Naur a/drivers/gemaltomodem/gemaltomodem.h b/drivers/gemaltomodem/gemaltomodem.h
--- a/drivers/gemaltomodem/gemaltomodem.h	2021-10-29 19:03:22.644472361 +0000
+++ b/drivers/gemaltomodem/gemaltomodem.h	2021-10-29 19:08:13.112472361 +0000
@@ -30,3 +30,6 @@
 
 extern void gemaltoncm_gprs_context_init(void);
 extern void gemaltoncm_gprs_context_exit(void);
+
+extern void gemalto_lte_init(void);
+extern void gemalto_lte_exit(void);
diff -Naur a/drivers/gemaltomodem/lte.c b/drivers/gemaltomodem/lte.c
--- a/drivers/gemaltomodem/lte.c	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/gemaltomodem/lte.c	2021-11-01 15:16:08.376472361 +0000
@@ -0,0 +1,169 @@
+/*
+ * (c) Copyright 2021 Laird Connectivity, Inc.
+ *
+ */
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <errno.h>
+
+#include <glib.h>
+
+#include <ofono/modem.h>
+#include <ofono/gprs-context.h>
+#include <ofono/log.h>
+#include <ofono/lte.h>
+
+#include "gatchat.h"
+#include "gatresult.h"
+
+#include "gemaltomodem.h"
+
+static const char *none_prefix[] = { NULL };
+
+struct lte_driver_data {
+	GAtChat *chat;
+	struct ofono_lte_default_attach_info pending_info;
+};
+
+static void at_lte_set_auth_cb(gboolean ok, GAtResult *result,
+							gpointer user_data)
+{
+	struct cb_data *cbd = user_data;
+	ofono_lte_cb_t cb = cbd->cb;
+	struct ofono_error error;
+
+	decode_at_error(&error, g_at_result_final_response(result));
+	cb(&error, cbd->data);
+}
+
+static void at_lte_set_default_attach_info_cb(gboolean ok, GAtResult *result,
+							gpointer user_data)
+{
+	struct cb_data *cbd = user_data;
+	ofono_lte_cb_t cb = cbd->cb;
+	void *data = cbd->data;
+	struct lte_driver_data *ldd = cbd->user;
+	struct ofono_error error;
+	char buf[32 + OFONO_GPRS_MAX_USERNAME_LENGTH +
+					OFONO_GPRS_MAX_PASSWORD_LENGTH  + 1];
+	enum ofono_gprs_auth_method auth_method;
+
+	if (!ok) {
+		decode_at_error(&error, g_at_result_final_response(result));
+		cb(&error, data);
+		return;
+	}
+
+	auth_method = ldd->pending_info.auth_method;
+
+	if (auth_method != OFONO_GPRS_AUTH_METHOD_NONE &&
+			ldd->pending_info.username[0] &&
+			ldd->pending_info.password[0]) {
+		snprintf(buf, sizeof(buf), "AT^SGAUTH=1,%u,\"%s\",\"%s\"",
+				at_util_gprs_auth_method_to_auth_prot(auth_method),
+				ldd->pending_info.username,
+				ldd->pending_info.password);
+	} else {
+		snprintf(buf, sizeof(buf), "AT^SGAUTH=1,0");
+	}
+
+	cbd = cb_data_ref(cbd);
+	if (g_at_chat_send(ldd->chat, buf, none_prefix,
+			at_lte_set_auth_cb, cbd, cb_data_unref) > 0)
+		return;
+
+out:
+	cb_data_unref(cbd);
+	CALLBACK_WITH_FAILURE(cb, data);
+}
+
+static void gemalto_lte_set_default_attach_info(const struct ofono_lte *lte,
+			const struct ofono_lte_default_attach_info *info,
+			ofono_lte_cb_t cb, void *data)
+{
+	struct lte_driver_data *ldd = ofono_lte_get_data(lte);
+	char buf[32 + OFONO_GPRS_MAX_APN_LENGTH + 1];
+	struct cb_data *cbd = cb_data_new(cb, data);
+
+	DBG("LTE config with APN: %s", info->apn);
+
+	cbd->user = ldd;
+	memcpy(&ldd->pending_info, info, sizeof(ldd->pending_info));
+
+	snprintf(buf, sizeof(buf), "AT+CGDCONT=1,\"%s\",\"%s\"",
+		at_util_gprs_proto_to_pdp_type(info->proto),
+		info->apn);
+
+	if (g_at_chat_send(ldd->chat, buf, none_prefix,
+			at_lte_set_default_attach_info_cb,
+			cbd, cb_data_unref) > 0)
+		return;
+
+	cb_data_unref(cbd);
+	CALLBACK_WITH_FAILURE(cb, data);
+}
+
+static gboolean lte_delayed_register(gpointer user_data)
+{
+	struct ofono_lte *lte = user_data;
+
+	ofono_lte_register(lte);
+
+	return FALSE;
+}
+
+static int gemalto_lte_probe(struct ofono_lte *lte,
+					unsigned int model_id, void *data)
+{
+	GAtChat *chat = data;
+	struct lte_driver_data *ldd;
+
+	DBG("lte probe");
+
+	ldd = g_try_new0(struct lte_driver_data, 1);
+	if (!ldd)
+		return -ENOMEM;
+
+	ldd->chat = g_at_chat_clone(chat);
+
+	ofono_lte_set_data(lte, ldd);
+
+	g_idle_add(lte_delayed_register, lte);
+
+	return 0;
+}
+
+static void gemalto_lte_remove(struct ofono_lte *lte)
+{
+	struct lte_driver_data *ldd = ofono_lte_get_data(lte);
+
+	DBG("lte remove");
+
+	g_at_chat_unref(ldd->chat);
+
+	ofono_lte_set_data(lte, NULL);
+
+	g_free(ldd);
+}
+
+static const struct ofono_lte_driver driver = {
+	.name				= "gemalto",
+	.probe				= gemalto_lte_probe,
+	.remove				= gemalto_lte_remove,
+	.set_default_attach_info	= gemalto_lte_set_default_attach_info,
+};
+
+void gemalto_lte_init(void)
+{
+	ofono_lte_driver_register(&driver);
+}
+
+void gemalto_lte_exit(void)
+{
+	ofono_lte_driver_unregister(&driver);
+}
diff -Naur a/plugins/gemalto.c b/plugins/gemalto.c
--- a/plugins/gemalto.c	2021-10-29 19:03:22.656472361 +0000
+++ b/plugins/gemalto.c	2021-10-30 17:23:58.796472361 +0000
@@ -632,9 +632,13 @@
 
 	ofono_ussd_create(modem, 0, "atmodem", data->app);
 
-	if (!g_strcmp0(model, GEMALTO_MODEL_ALS3_PLS8x))
+	if (!g_strcmp0(model, GEMALTO_MODEL_ALS3_PLS8x)) {
 		ofono_lte_create(modem, OFONO_VENDOR_GEMALTO,
 						"atmodem", data->app);
+	} else if (!g_strcmp0(model, GEMALTO_MODEL_PLS62W)) {
+		ofono_lte_create(modem, OFONO_VENDOR_GEMALTO,
+						"gemalto", data->app);
+	}
 }
 
 static void gemalto_post_online(struct ofono_modem *modem)
diff -Naur p/src/lte.c b/src/lte.c
--- a/src/lte.c	2018-10-31 22:55:14.000000000 +0000
+++ b/src/lte.c	2021-11-01 15:15:06.792472361 +0000
@@ -92,11 +92,11 @@
 		strcpy(lte->info.apn, apn);
 
 	if (proto_str == NULL)
-		proto_str = g_strdup("ip");
+		proto_str = g_strdup("dual");
 
 	/* this must have a valid default */
 	if (!gprs_proto_from_string(proto_str, &lte->info.proto))
-		lte->info.proto = OFONO_GPRS_PROTO_IP;
+		lte->info.proto = OFONO_GPRS_PROTO_IPV4V6;
 
 	if (auth_method_str == NULL)
 		auth_method_str = g_strdup("none");
