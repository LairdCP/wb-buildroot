diff -Naur a/Makefile.am b/Makefile.am
--- a/Makefile.am	2019-07-29 17:33:11.835224160 +0000
+++ b/Makefile.am	2019-08-01 19:15:46.585273870 +0000
@@ -478,7 +478,8 @@
 			drivers/gemaltomodem/gemaltomodem.h \
 			drivers/gemaltomodem/gemaltomodem.c \
 			drivers/gemaltomodem/location-reporting.c \
-			drivers/gemaltomodem/voicecall.c
+			drivers/gemaltomodem/voicecall.c \
+			drivers/gemaltomodem/gprs-context-ncm.c
 
 builtin_modules += xmm7modem
 builtin_sources += drivers/atmodem/atutil.h \
diff -Naur a/drivers/gemaltomodem/gemaltomodem.c b/drivers/gemaltomodem/gemaltomodem.c
--- a/drivers/gemaltomodem/gemaltomodem.c	2019-07-29 17:33:11.847224159 +0000
+++ b/drivers/gemaltomodem/gemaltomodem.c	2019-08-01 19:15:46.585273870 +0000
@@ -37,12 +37,13 @@
 {
 	gemalto_location_reporting_init();
 	gemalto_voicecall_init();
-
+	gemaltoncm_gprs_context_init();
 	return 0;
 }
 
 static void gemaltomodem_exit(void)
 {
+	gemaltoncm_gprs_context_exit();
 	gemalto_voicecall_exit();
 	gemalto_location_reporting_exit();
 }
diff -Naur a/drivers/gemaltomodem/gemaltomodem.h b/drivers/gemaltomodem/gemaltomodem.h
--- a/drivers/gemaltomodem/gemaltomodem.h	2019-07-29 17:33:11.847224159 +0000
+++ b/drivers/gemaltomodem/gemaltomodem.h	2019-08-01 19:15:46.585273870 +0000
@@ -27,3 +27,6 @@
 
 extern void gemalto_voicecall_init();
 extern void gemalto_voicecall_exit();
+
+extern void gemaltoncm_gprs_context_init(void);
+extern void gemaltoncm_gprs_context_exit(void);
diff -Naur a/drivers/gemaltomodem/gprs-context-ncm.c b/drivers/gemaltomodem/gprs-context-ncm.c
--- a/drivers/gemaltomodem/gprs-context-ncm.c	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/gemaltomodem/gprs-context-ncm.c	2019-08-01 19:42:39.454489105 +0000
@@ -0,0 +1,570 @@
+/*
+ *
+ *  oFono - Open Source Telephony
+ *
+ *  Copyright (C) 2017 Piotr Haber. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <errno.h>
+#include <sys/stat.h>
+#include <arpa/inet.h>
+#include <sys/socket.h>
+#include <netdb.h>
+#include <ifaddrs.h>
+#include <unistd.h>
+#include <linux/if_link.h>
+
+#include <glib.h>
+
+#include <ofono/log.h>
+#include <ofono/modem.h>
+#include <ofono/gprs-context.h>
+
+#include "gatchat.h"
+#include "gatresult.h"
+
+#include "gemaltomodem.h"
+
+static const char *none_prefix[] = { NULL };
+static const char *cgpaddr_prefix[] = { "+CGPADDR:", NULL };
+static const char *cgcontrdp_prefix[] = { "+CGCONTRDP:", NULL };
+
+enum state {
+	STATE_IDLE,
+	STATE_ENABLING,
+	STATE_DISABLING,
+	STATE_ACTIVE,
+};
+
+enum auth_method {
+	AUTH_METHOD_NONE,
+	AUTH_METHOD_PAP,
+	AUTH_METHOD_CHAP,
+};
+
+struct gprs_context_data {
+	GAtChat *chat;
+	unsigned int active_context;
+	char username[OFONO_GPRS_MAX_USERNAME_LENGTH + 1];
+	char password[OFONO_GPRS_MAX_PASSWORD_LENGTH + 1];
+	enum auth_method auth_method;
+	enum state state;
+	enum ofono_gprs_proto proto;
+	ofono_gprs_context_cb_t cb;
+	void *cb_data;
+};
+
+static void failed_setup(struct ofono_gprs_context *gc,
+				GAtResult *result, gboolean deactivate)
+{
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	struct ofono_error error;
+	char buf[64];
+
+	DBG("deactivate %d", deactivate);
+
+	if (deactivate == TRUE) {
+		snprintf(buf, sizeof(buf), "AT^SWWAN=0,%u", gcd->active_context);
+		g_at_chat_send(gcd->chat, buf, none_prefix, NULL, NULL, NULL);
+	}
+
+	gcd->active_context = 0;
+	gcd->state = STATE_IDLE;
+
+	if (result == NULL) {
+		CALLBACK_WITH_FAILURE(gcd->cb, gcd->cb_data);
+		return;
+	}
+
+	decode_at_error(&error, g_at_result_final_response(result));
+	gcd->cb(&error, gcd->cb_data);
+}
+
+/*
+ * Gemalto AT commands do not completely describe the IPv6 address,
+ * so get it from the device interface.
+ */
+static void v6addr_from_device(struct ofono_gprs_context *gc, char *addr,
+	int count)
+{
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	struct ofono_modem *modem;
+	const char *interface;
+	struct ifaddrs *ifaddr, *ifa;
+
+	modem = ofono_gprs_context_get_modem(gc);
+	interface = ofono_modem_get_string(modem, "NetworkInterface");
+
+	if (getifaddrs(&ifaddr) == -1) {
+		return;
+	}
+
+	for (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next) {
+		/* Look for the IPV6 address on our device interface */
+		if (ifa->ifa_addr == NULL ||
+		    ifa->ifa_addr->sa_family != AF_INET6 ||
+		    g_strcmp0(interface, ifa->ifa_name) != 0)
+			continue;
+
+		if (getnameinfo(ifa->ifa_addr, sizeof(struct sockaddr_in6),
+			addr, count,
+			NULL, 0, NI_NUMERICHOST) == 0) {
+				break;
+		}
+	}
+	freeifaddrs(ifaddr);
+}
+
+static gboolean dec_string_to_addr_mask(const char *str,
+	unsigned char *addr_bytes, int addr_count,
+	unsigned char *mask_bytes, int mask_count)
+{
+	gchar **list;
+	int n = 0, d;
+
+	list = g_strsplit(str, ".", 17);
+	while (list && list[n] && n < addr_count) {
+		if (addr_bytes) addr_bytes[n] = (unsigned char)atoi(list[n]);
+		n++;
+	}
+	while (list && list[n] && n - addr_count < mask_count) {
+		if (mask_bytes) mask_bytes[n - addr_count] = (unsigned char)atoi(list[n]);
+		n++;
+	}
+	g_strfreev(list);
+	if (n == addr_count + mask_count) {
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
+static int prefix_length_from_mask(unsigned char *mask, int mask_count)
+{
+	int i;
+	int n = 0;
+	int prefix_length = 0;
+
+	while (n < mask_count) {
+		if (mask[n] == 255) {
+			prefix_length += 8;
+		} else {
+			for (i = 7; i >= 8; i++) {
+				if (mask[n] & (1 << i)) {
+					prefix_length++;
+				} else {
+					break;
+				}
+			}
+		}
+		n++;
+	}
+	return prefix_length;
+}
+
+static void contrdp_cb(gboolean ok, GAtResult *result, gpointer user_data)
+{
+	struct ofono_gprs_context *gc = user_data;
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	struct ofono_modem *modem;
+	const char *interface;
+	int cid, bearer_id;
+	const char *s_apn, *s_ip_mask, *s_gw;
+	const char *s_dns1, *s_dns2;
+	const char *dns[3];
+	unsigned char ipbytes[16], maskbytes[16];
+	char addr[64], netmask[64], gw[64];
+	char dns1[64], dns2[64];
+	int dns_count;
+	int prefix_len;
+	GAtResultIter iter;
+
+	DBG("ok %d", ok);
+
+	if (!ok) {
+		ofono_error("Unable to get context dynamic parameters");
+		failed_setup(gc, result, TRUE);
+		return;
+	}
+
+	modem = ofono_gprs_context_get_modem(gc);
+	interface = ofono_modem_get_string(modem, "NetworkInterface");
+	ofono_info("Interface: %s", interface);
+	ofono_gprs_context_set_interface(gc, interface);
+
+	g_at_result_iter_init(&iter, result);
+
+	if (!g_at_result_iter_next(&iter, "+CGCONTRDP:"))
+		goto error;
+
+	/* First response is IPv4 parameters */
+	if (g_at_result_iter_next_number(&iter, &cid) &&
+	    g_at_result_iter_next_number(&iter, &bearer_id) &&
+	    g_at_result_iter_next_string(&iter, &s_apn) &&
+	    g_at_result_iter_next_string(&iter, &s_ip_mask) &&
+	    g_at_result_iter_next_string(&iter, &s_gw) &&
+	    g_at_result_iter_next_string(&iter, &s_dns1) &&
+	    g_at_result_iter_next_string(&iter, &s_dns2)) {
+		if (dec_string_to_addr_mask(s_ip_mask, ipbytes, 4, maskbytes, 4)) {
+			inet_ntop(AF_INET, ipbytes, addr, sizeof(addr));
+			inet_ntop(AF_INET, maskbytes, netmask, sizeof(netmask));
+			ofono_gprs_context_set_ipv4_address(gc, addr, TRUE);
+			ofono_gprs_context_set_ipv4_netmask(gc, netmask);
+			ofono_info("IPv4, mask: %s, %s", addr, netmask);
+		}
+		if (dec_string_to_addr_mask(s_gw, ipbytes, 4, NULL, 0)) {
+			inet_ntop(AF_INET, ipbytes, gw, sizeof(gw));
+			ofono_gprs_context_set_ipv4_gateway(gc, gw);
+			ofono_info("GW[v4]: %s", gw);
+		}
+		dns_count = 0;
+		if (dec_string_to_addr_mask(s_dns1, ipbytes, 4, NULL, 0)) {
+			inet_ntop(AF_INET, ipbytes, dns1, sizeof(dns1));
+			dns[dns_count++] = dns1;
+			ofono_info("DNS1[v4]: %s", dns1);
+		}
+		if (dec_string_to_addr_mask(s_dns2, ipbytes, 4, NULL, 0)) {
+			inet_ntop(AF_INET, ipbytes, dns2, sizeof(dns2));
+			ofono_info("DNS2[v4]: %s", dns2);
+		}
+		if (dns_count > 0) {
+			dns[dns_count] = NULL;
+			ofono_gprs_context_set_ipv4_dns_servers(gc, dns);
+		}
+	} else {
+		goto error;
+	}
+
+	/* Second response is IPv6 parameters */
+	if (g_at_result_iter_next(&iter, "+CGCONTRDP:") &&
+	    g_at_result_iter_next_number(&iter, &cid) &&
+	    g_at_result_iter_next_number(&iter, &bearer_id) &&
+	    g_at_result_iter_next_string(&iter, &s_apn) &&
+	    g_at_result_iter_next_string(&iter, &s_ip_mask) &&
+	    g_at_result_iter_next_string(&iter, &s_gw) &&
+	    g_at_result_iter_next_string(&iter, &s_dns1) &&
+	    g_at_result_iter_next_string(&iter, &s_dns2)) {
+		if (dec_string_to_addr_mask(s_ip_mask, ipbytes, 16, maskbytes, 16)) {
+			v6addr_from_device(gc, addr, sizeof(addr));
+			ofono_gprs_context_set_ipv6_address(gc, addr);
+			prefix_len = prefix_length_from_mask(maskbytes, 16);
+			ofono_gprs_context_set_ipv6_prefix_length(gc, prefix_len);
+			ofono_info("IPv6, prefix len: %s, %s", addr, prefix_len);
+		}
+		if (dec_string_to_addr_mask(s_gw, ipbytes, 16, NULL, 0)) {
+			inet_ntop(AF_INET6, ipbytes, gw, sizeof(gw));
+			ofono_gprs_context_set_ipv6_gateway(gc, gw);
+			ofono_info("GW[v6]: %s", gw);
+		}
+		dns_count = 0;
+		if (dec_string_to_addr_mask(s_dns1, ipbytes, 16, NULL, 0)) {
+			inet_ntop(AF_INET6, ipbytes, dns1, sizeof(dns1));
+			dns[dns_count++] = dns1;
+			ofono_info("DNS1[v6]: %s", dns1);
+		}
+		if (dec_string_to_addr_mask(s_dns2, ipbytes, 16, NULL, 0)) {
+			inet_ntop(AF_INET6, ipbytes, dns2, sizeof(dns2));
+			dns[dns_count++] = dns2;
+			ofono_info("DNS2[v6]: %s", dns2);
+		}
+		if (dns_count > 0) {
+			dns[dns_count] = NULL;
+			ofono_gprs_context_set_ipv6_dns_servers(gc, dns);
+		}
+	}
+
+	gcd->state = STATE_ACTIVE;
+	CALLBACK_WITH_SUCCESS(gcd->cb, gcd->cb_data);
+	return;
+
+error:
+	failed_setup(gc, NULL, TRUE);
+}
+
+static void swwan_cb(gboolean ok, GAtResult *result, gpointer user_data)
+{
+	struct ofono_gprs_context *gc = user_data;
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	char buf[64];
+
+	DBG("ok %d", ok);
+
+	if (!ok) {
+		ofono_error("Unable to activate context");
+		failed_setup(gc, result, FALSE);
+		return;
+	}
+
+	snprintf(buf, sizeof(buf), "AT+CGCONTRDP=%d", gcd->active_context);
+	if (g_at_chat_send(gcd->chat, buf, cgcontrdp_prefix,
+					contrdp_cb, gc, NULL) > 0)
+		return;
+
+	failed_setup(gc, NULL, TRUE);
+}
+
+static void setup_cb(gboolean ok, GAtResult *result, gpointer user_data)
+{
+	struct ofono_gprs_context *gc = user_data;
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	char buf[384];
+
+	DBG("ok %d", ok);
+
+	if (!ok) {
+		ofono_error("Failed to setup context");
+		failed_setup(gc, result, FALSE);
+		return;
+	}
+
+	if (gcd->auth_method != AUTH_METHOD_NONE &&
+					gcd->username[0] && gcd->password[0])
+		snprintf(buf, sizeof(buf), "AT^SGAUTH=%u,%u,\"%s\",\"%s\"",
+			gcd->active_context, gcd->auth_method,
+			gcd->password, gcd->username);
+	else
+		snprintf(buf, sizeof(buf), "AT^SGAUTH=%u,0", gcd->active_context);
+
+	if (g_at_chat_send(gcd->chat, buf, none_prefix, NULL, NULL, NULL) == 0)
+		goto error;
+
+	snprintf(buf, sizeof(buf), "AT^SWWAN=1,%u", gcd->active_context);
+
+	if (g_at_chat_send(gcd->chat, buf, none_prefix,
+				swwan_cb, gc, NULL) > 0)
+		return;
+
+error:
+	failed_setup(gc, NULL, FALSE);
+}
+
+static void gemaltoncm_read_settings(struct ofono_gprs_context *gc)
+{
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	char buf[64];
+
+	snprintf(buf, sizeof(buf), "AT^SWWAN=1,%u", gcd->active_context);
+
+	if (g_at_chat_send(gcd->chat, buf, none_prefix,
+				swwan_cb, gc, NULL) > 0)
+		return;
+
+
+	failed_setup(gc, NULL, TRUE);
+}
+
+static void gemaltoncm_gprs_read_settings(struct ofono_gprs_context *gc,
+					unsigned int cid,
+					ofono_gprs_context_cb_t cb, void *data)
+{
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	DBG("cid %u", cid);
+
+	gcd->active_context = cid;
+	gcd->cb = cb;
+	gcd->cb_data = data;
+
+	gemaltoncm_read_settings(gc);
+}
+
+static void gemaltoncm_gprs_activate_primary(struct ofono_gprs_context *gc,
+				const struct ofono_gprs_primary_context *ctx,
+				ofono_gprs_context_cb_t cb, void *data)
+{
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	char buf[OFONO_GPRS_MAX_APN_LENGTH + 128];
+	int len = 0;
+
+	DBG("cid %u", ctx->cid);
+
+	gcd->active_context = ctx->cid;
+	gcd->cb = cb;
+	gcd->cb_data = data;
+	memcpy(gcd->username, ctx->username, sizeof(ctx->username));
+	memcpy(gcd->password, ctx->password, sizeof(ctx->password));
+	gcd->state = STATE_ENABLING;
+	gcd->proto = ctx->proto;
+
+	/* We support CHAP, PAP and NONE */
+	switch (ctx->auth_method) {
+	case OFONO_GPRS_AUTH_METHOD_CHAP:
+		gcd->auth_method = AUTH_METHOD_CHAP;
+		break;
+	case OFONO_GPRS_AUTH_METHOD_PAP:
+		gcd->auth_method = AUTH_METHOD_PAP;
+		break;
+	case OFONO_GPRS_AUTH_METHOD_NONE:
+		gcd->auth_method = AUTH_METHOD_NONE;
+		gcd->username[0] = 0;
+		gcd->password[0] = 0;
+		break;
+	default:
+		goto error;
+	}
+
+	switch (ctx->proto) {
+	case OFONO_GPRS_PROTO_IP:
+		len = snprintf(buf, sizeof(buf), "AT+CGDCONT=%u,\"IP\"",
+								ctx->cid);
+		break;
+	case OFONO_GPRS_PROTO_IPV6:
+		len = snprintf(buf, sizeof(buf), "AT+CGDCONT=%u,\"IPV6\"",
+								ctx->cid);
+		break;
+	case OFONO_GPRS_PROTO_IPV4V6:
+		len = snprintf(buf, sizeof(buf), "AT+CGDCONT=%u,\"IPV4V6\"",
+								ctx->cid);
+		break;
+	}
+
+	if (ctx->apn)
+		snprintf(buf + len, sizeof(buf) - len - 3,
+					",\"%s\"", ctx->apn);
+
+	if (g_at_chat_send(gcd->chat, buf, none_prefix,
+				setup_cb, gc, NULL) > 0)
+		return;
+
+error:
+	CALLBACK_WITH_FAILURE(cb, data);
+}
+
+static void deactivate_cb(gboolean ok, GAtResult *result, gpointer user_data)
+{
+	struct ofono_gprs_context *gc = user_data;
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+
+	DBG("ok %d", ok);
+
+	gcd->active_context = 0;
+	gcd->state = STATE_IDLE;
+
+	CALLBACK_WITH_SUCCESS(gcd->cb, gcd->cb_data);
+}
+
+static void gemaltoncm_gprs_deactivate_primary(struct ofono_gprs_context *gc,
+					unsigned int cid,
+					ofono_gprs_context_cb_t cb, void *data)
+{
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	char buf[64];
+
+	DBG("cid %u", cid);
+
+	gcd->state = STATE_DISABLING;
+	gcd->cb = cb;
+	gcd->cb_data = data;
+
+	snprintf(buf, sizeof(buf), "AT^SWWAN=0,%u", gcd->active_context);
+
+	if (g_at_chat_send(gcd->chat, buf, none_prefix,
+				deactivate_cb, gc, NULL) > 0)
+		return;
+
+	CALLBACK_WITH_SUCCESS(cb, data);
+}
+
+static void cgev_notify(GAtResult *result, gpointer user_data)
+{
+	struct ofono_gprs_context *gc = user_data;
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+	const char *event;
+	int cid;
+	GAtResultIter iter;
+
+	g_at_result_iter_init(&iter, result);
+
+	if (!g_at_result_iter_next(&iter, "+CGEV:"))
+		return;
+
+	if (!g_at_result_iter_next_unquoted_string(&iter, &event))
+		return;
+
+	if (sscanf(event, "NW DEACT %d", &cid) < 1 &&
+	    sscanf(event, "NW PDN DEACT %d", &cid) < 1)
+		return;
+
+	DBG("cid %d", cid);
+
+	if ((unsigned int) cid != gcd->active_context)
+		return;
+
+	ofono_gprs_context_deactivated(gc, gcd->active_context);
+
+	gcd->active_context = 0;
+	gcd->state = STATE_IDLE;
+}
+
+static int gemaltoncm_gprs_context_probe(struct ofono_gprs_context *gc,
+					unsigned int vendor, void *data)
+{
+	GAtChat *chat = data;
+	struct gprs_context_data *gcd;
+
+	DBG("");
+
+	gcd = g_try_new0(struct gprs_context_data, 1);
+	if (gcd == NULL)
+		return -ENOMEM;
+
+	gcd->chat = g_at_chat_clone(chat);
+
+	ofono_gprs_context_set_data(gc, gcd);
+
+	/* Enable NW auto-attach, recommended by vendor for 3G sunset issue */
+	g_at_chat_send(chat, "AT^SCFG=\"GPRS/AutoAttach\",\"enabled\"", none_prefix,
+			NULL, NULL, NULL);
+	g_at_chat_send(chat, "AT+CGATT=0", none_prefix, NULL, NULL, NULL);
+
+	g_at_chat_register(chat, "+CGEV:", cgev_notify, FALSE, gc, NULL);
+
+	return 0;
+}
+
+static void gemaltoncm_gprs_context_remove(struct ofono_gprs_context *gc)
+{
+	struct gprs_context_data *gcd = ofono_gprs_context_get_data(gc);
+
+	DBG("");
+
+	ofono_gprs_context_set_data(gc, NULL);
+
+	g_at_chat_unref(gcd->chat);
+	g_free(gcd);
+}
+
+static const struct ofono_gprs_context_driver driver = {
+	.name			= "gemaltoncmmodem",
+	.probe			= gemaltoncm_gprs_context_probe,
+	.remove			= gemaltoncm_gprs_context_remove,
+	.read_settings		= gemaltoncm_gprs_read_settings,
+	.activate_primary	= gemaltoncm_gprs_activate_primary,
+	.deactivate_primary	= gemaltoncm_gprs_deactivate_primary,
+};
+
+void gemaltoncm_gprs_context_init(void)
+{
+	ofono_gprs_context_driver_register(&driver);
+}
+
+void gemaltoncm_gprs_context_exit(void)
+{
+	ofono_gprs_context_driver_unregister(&driver);
+}
diff -Naur a/plugins/gemalto.c b/plugins/gemalto.c
--- a/plugins/gemalto.c	2019-07-29 17:33:11.855224158 +0000
+++ b/plugins/gemalto.c	2019-08-01 19:15:46.589273870 +0000
@@ -58,6 +58,8 @@
 #define GEMALTO_MODEL_PHS8P	"0053"
 /* ALS3, PLS8-E, and PLS8-X family */
 #define GEMALTO_MODEL_ALS3_PLS8x	"0061"
+/* PLS62-W */
+#define GEMALTO_MODEL_PLS62W	"005b"
 
 static const char *none_prefix[] = { NULL };
 static const char *sctm_prefix[] = { "^SCTM:", NULL };
@@ -594,8 +596,11 @@
 	ofono_sms_create(modem, OFONO_VENDOR_GEMALTO, "atmodem", data->app);
 
 	gprs = ofono_gprs_create(modem, 0, "atmodem", data->app);
-	gc = ofono_gprs_context_create(modem, 0, "atmodem", data->mdm);
-
+	if (!g_strcmp0(model, GEMALTO_MODEL_PLS62W)) {
+		gc = ofono_gprs_context_create(modem, 0, "gemaltoncmmodem", data->mdm);
+	} else {
+		gc = ofono_gprs_context_create(modem, 0, "atmodem", data->mdm);
+	}
 	if (gprs && gc)
 		ofono_gprs_add_context(gprs, gc);
 
