diff --git a/include/ModemManager-enums.h b/include/ModemManager-enums.h
index bf068bdc..30a232c7 100644
--- a/include/ModemManager-enums.h
+++ b/include/ModemManager-enums.h
@@ -998,6 +998,7 @@ typedef enum { /*< underscore_name=mm_modem_location_source >*/
 typedef enum { /*< underscore_name=mm_modem_location_assistance_data_type >*/
     MM_MODEM_LOCATION_ASSISTANCE_DATA_TYPE_NONE = 0,
     MM_MODEM_LOCATION_ASSISTANCE_DATA_TYPE_XTRA = 1 << 0,
+    MM_MODEM_LOCATION_ASSISTANCE_DATA_TYPE_TOKEN = 1 << 1,
 } MMModemLocationAssistanceDataType;

 /**
diff --git a/plugins/ublox/mm-broadband-modem-ublox.c b/plugins/ublox/mm-broadband-modem-ublox.c
index 2fbf57e7..6a2c6724 100644
--- a/plugins/ublox/mm-broadband-modem-ublox.c
+++ b/plugins/ublox/mm-broadband-modem-ublox.c
@@ -27,6 +27,7 @@
 #include "mm-iface-modem-3gpp.h"
 #include "mm-iface-modem-voice.h"
 #include "mm-iface-modem-signal.h"
+#include "mm-iface-modem-location.h"
 #include "mm-base-modem-at.h"
 #include "mm-broadband-bearer.h"
 #include "mm-broadband-modem-ublox.h"
@@ -39,15 +40,18 @@ static void iface_modem_init (MMIfaceModem *iface);
 static void iface_modem_3gpp_init (MMIfaceModem3gpp *iface);
 static void iface_modem_voice_init (MMIfaceModemVoice *iface);
 static void iface_modem_signal_init (MMIfaceModemSignal *iface);
+static void iface_modem_location_init (MMIfaceModemLocation *iface);

 static MMIfaceModemVoice *iface_modem_voice_parent;
+static MMIfaceModemLocation *iface_modem_location_parent;

 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemUblox, mm_broadband_modem_ublox, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP, iface_modem_3gpp_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_SIGNAL, iface_modem_signal_init)
+                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_LOCATION, iface_modem_location_init)
                         //G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_VOICE, iface_modem_voice_init)
-						)
+                       )


 struct _MMBroadbandModemUbloxPrivate {
@@ -70,11 +74,22 @@ struct _MMBroadbandModemUbloxPrivate {
     /* Operator ID for manual registration */
     gchar *operator_id;

+    MMModemLocationSource enabled_sources;
+
     /* Voice +UCALLSTAT support */
     GRegex *ucallstat_regex;

+    /* AssistNow offline +UGIND support */
+    GRegex *uugind_regex;
+
+    /* CellLocate support */
+    GRegex *uuloc_regex;
+    GRegex *uulocind_regex;
+
     /* Regex to ignore */
     GRegex *pbready_regex;
+    GRegex *uupsdd_regex;
+    guint internal_connection_open_count;
 };

 /*****************************************************************************/
@@ -795,6 +810,38 @@ common_modem_power_operation (MMBroadbandModemUblox  *self,
                               task);
 }

+static void
+modem_reset (MMIfaceModem        *self,
+             GAsyncReadyCallback  callback,
+             gpointer             user_data)
+{
+    common_modem_power_operation (MM_BROADBAND_MODEM_UBLOX (self), "+CFUN=16", callback, user_data);
+}
+
+static void
+modem_power_off (MMIfaceModem        *self,
+                 GAsyncReadyCallback  callback,
+                 gpointer             user_data)
+{
+    common_modem_power_operation (MM_BROADBAND_MODEM_UBLOX (self), "+CPWROFF", callback, user_data);
+}
+
+static void
+modem_power_down (MMIfaceModem        *self,
+                  GAsyncReadyCallback  callback,
+                  gpointer             user_data)
+{
+    common_modem_power_operation (MM_BROADBAND_MODEM_UBLOX (self), "+CFUN=4", callback, user_data);
+}
+
+static void
+modem_power_up (MMIfaceModem        *self,
+                GAsyncReadyCallback  callback,
+                gpointer             user_data)
+{
+    common_modem_power_operation (MM_BROADBAND_MODEM_UBLOX (self), "+CFUN=1", callback, user_data);
+}
+
 /*****************************************************************************/
 /* Register in network (3GPP interface) */

@@ -855,38 +902,6 @@ register_in_network (MMIfaceModem3gpp    *self,
     g_free (command);
 }

-static void
-modem_reset (MMIfaceModem        *self,
-             GAsyncReadyCallback  callback,
-             gpointer             user_data)
-{
-    common_modem_power_operation (MM_BROADBAND_MODEM_UBLOX (self), "+CFUN=16", callback, user_data);
-}
-
-static void
-modem_power_off (MMIfaceModem        *self,
-                 GAsyncReadyCallback  callback,
-                 gpointer             user_data)
-{
-    common_modem_power_operation (MM_BROADBAND_MODEM_UBLOX (self), "+CPWROFF", callback, user_data);
-}
-
-static void
-modem_power_down (MMIfaceModem        *self,
-                  GAsyncReadyCallback  callback,
-                  gpointer             user_data)
-{
-    common_modem_power_operation (MM_BROADBAND_MODEM_UBLOX (self), "+CFUN=4", callback, user_data);
-}
-
-static void
-modem_power_up (MMIfaceModem        *self,
-                GAsyncReadyCallback  callback,
-                gpointer             user_data)
-{
-    common_modem_power_operation (MM_BROADBAND_MODEM_UBLOX (self), "+CFUN=1", callback, user_data);
-}
-
 /*****************************************************************************/
 /* Load unlock retries (Modem interface) */

@@ -1535,13 +1550,100 @@ modem_create_sim (MMIfaceModem        *self,
 }

 /*****************************************************************************/
+
+static void
+uuloc_received (MMPortSerialAt        *port,
+                GMatchInfo            *match_info,
+                MMIfaceModemLocation *_self)
+{
+    gchar trace[256];
+    GDateTime * now = g_date_time_new_now_utc();
+
+    gchar *res = g_match_info_fetch (match_info, 0);
+    gchar **tokens = g_strsplit(res, ",", 5);
+
+    gdouble longitude = g_strtod(tokens[2], NULL);
+    gdouble latitude = g_strtod(tokens[3], NULL);
+
+    gchar dir[2] = {'E', 'N'};
+
+    if(tokens[2][0] == '-') {
+        dir[0] = 'W';
+        longitude = -longitude;
+    }
+
+    if(tokens[3][0] == '-') {
+        dir[1] = 'S';
+        latitude = -latitude;
+    }
+
+    g_snprintf(trace, 256, "$GNGGA,%02d%02d%02d.00,%.4f,%c,%.4f,%c,1,0,1.0,0.00,M,0.00,M,00,0*00", g_date_time_get_hour(now), g_date_time_get_minute(now), g_date_time_get_second(now),
+                                                                                            (int)longitude * 100 + 60 * (longitude - (int)longitude), dir[0],
+                                                                                            (int)latitude * 100  + 60 * (latitude  - (int)latitude), dir[1]);
+    mm_iface_modem_location_gps_update (_self, trace);
+
+    g_free(res);
+    g_strfreev(tokens);
+    g_date_time_unref(now);
+}
+
+static void
+uulocind_received (MMPortSerialAt        *port,
+                   GMatchInfo            *match_info,
+                   MMIfaceModemLocation *_self)
+{
+    guint      aux1, aux2;
+
+    if (!mm_get_uint_from_match_info (match_info, 1, &aux1)) {
+        mm_warn ("couldn't parse aux 1 from +UULOCIND");
+        return;
+    }
+
+    if (!mm_get_uint_from_match_info (match_info, 2, &aux2)) {
+        mm_warn ("couldn't parse aux 2 from +UULOCIND");
+        return;
+    }
+
+    mm_dbg ("+UULOCIND: %d %d", aux1, aux2);
+}
+
+static void
+uugind_received (MMPortSerialAt        *port,
+                 GMatchInfo            *match_info,
+                 MMIfaceModemLocation *_self)
+{
+    guint      aux1, aux2;
+
+    if (!mm_get_uint_from_match_info (match_info, 1, &aux1)) {
+        mm_warn ("couldn't parse aux 1 from +UUGIND");
+        return;
+    }
+
+    if (!mm_get_uint_from_match_info (match_info, 2, &aux2)) {
+        mm_warn ("couldn't parse aux 2 from +UUGIND");
+        return;
+    }
+
+    mm_dbg ("+UUGIND: %d %d", aux1, aux2);
+
+}
+
+static void
+trace_received (MMPortSerialGps *port,
+                const gchar *trace,
+                MMIfaceModemLocation *self)
+{
+    mm_iface_modem_location_gps_update (self, trace);
+}
+
 /* Setup ports (Broadband modem class) */

 static void
 setup_ports (MMBroadbandModem *_self)
 {
     MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (_self);
-    MMPortSerialAt        *ports[2];
+    MMPortSerialAt        *ports[3];
+    MMPortSerialGps       *gps_data_port;
     guint                  i;

     /* Call parent's setup ports first always */
@@ -1549,6 +1651,7 @@ setup_ports (MMBroadbandModem *_self)

     ports[0] = mm_base_modem_peek_port_primary   (MM_BASE_MODEM (self));
     ports[1] = mm_base_modem_peek_port_secondary (MM_BASE_MODEM (self));
+    ports[2] = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM (self));

     /* Configure AT ports */
     for (i = 0; i < G_N_ELEMENTS (ports); i++) {
@@ -1563,7 +1666,35 @@ setup_ports (MMBroadbandModem *_self)
             ports[i],
             self->priv->pbready_regex,
             NULL, NULL, NULL);
+
+        mm_port_serial_at_add_unsolicited_msg_handler (
+            ports[i],
+            self->priv->uupsdd_regex,
+            NULL, NULL, NULL);
     }
+
+    if(ports[2]) {
+
+        mm_port_serial_at_add_unsolicited_msg_handler ( ports[2], self->priv->uuloc_regex,
+                                                        (MMPortSerialAtUnsolicitedMsgFn)uuloc_received, self, NULL);
+
+        mm_port_serial_at_add_unsolicited_msg_handler ( ports[2], self->priv->uulocind_regex,
+                                                        (MMPortSerialAtUnsolicitedMsgFn)uulocind_received, self, NULL);
+
+        mm_port_serial_at_add_unsolicited_msg_handler ( ports[2], self->priv->uugind_regex,
+                                                        (MMPortSerialAtUnsolicitedMsgFn)uugind_received, self, NULL);
+    }
+
+    gps_data_port = mm_base_modem_peek_port_gps (MM_BASE_MODEM (self));
+    if(gps_data_port) {
+
+        /* Add handler for the NMEA traces */
+        mm_port_serial_gps_add_trace_handler (gps_data_port,
+                                              (MMPortSerialGpsTraceFn)trace_received,
+                                              self,
+                                              NULL);
+	}
+
 }

 /*****************************************************************************/
@@ -1598,8 +1729,23 @@ mm_broadband_modem_ublox_init (MMBroadbandModemUblox *self)
     self->priv->support_config.method   = SETTINGS_UPDATE_METHOD_UNKNOWN;
     self->priv->support_config.uact     = FEATURE_SUPPORT_UNKNOWN;
     self->priv->support_config.ubandsel = FEATURE_SUPPORT_UNKNOWN;
+
     self->priv->pbready_regex = g_regex_new ("\\r\\n\\+PBREADY\\r\\n",
                                              G_REGEX_RAW | G_REGEX_OPTIMIZE, 0, NULL);
+
+    self->priv->uupsdd_regex = g_regex_new ("\\r\\n\\+UUPSDD:(.*)\\r\\n",
+                                             G_REGEX_RAW | G_REGEX_OPTIMIZE, 0, NULL);
+
+    self->priv->uulocind_regex = g_regex_new ("\\r\\n\\+UULOCIND:\\s*(\\d+),(\\d+)\\r\\n",
+                                              G_REGEX_RAW | G_REGEX_OPTIMIZE, 0, NULL);
+
+    self->priv->uuloc_regex = g_regex_new ("\\r\\n\\+UULOC:(.*)\\r\\n",
+                                           G_REGEX_RAW | G_REGEX_OPTIMIZE, 0, NULL);
+
+    self->priv->uugind_regex = g_regex_new ("\\r\\n\\+UUGIND:\\s*(\\d+),(\\d+)\\r\\n",
+                                            G_REGEX_RAW | G_REGEX_OPTIMIZE, 0, NULL);
+
+    self->priv->internal_connection_open_count = 0;
 }

 static void
@@ -1967,15 +2113,626 @@ iface_modem_signal_init (MMIfaceModemSignal *iface)
     iface->load_values_finish   = modem_signal_load_values_finish;
 }

+
+/*****************************************************************************/
+/* Location capabilities loading (Location interface) */
+
+static MMModemLocationSource
+location_load_capabilities_finish (MMIfaceModemLocation *_self,
+                                   GAsyncResult *res,
+                                   GError **error)
+{
+    GError *inner_error = NULL;
+    gssize value;
+
+    value = g_task_propagate_int (G_TASK (res), &inner_error);
+    if (inner_error) {
+        g_propagate_error (error, inner_error);
+        return MM_MODEM_LOCATION_SOURCE_NONE;
+    }
+    return (MMModemLocationSource)value;
+}
+
+static void
+parent_load_capabilities_ready (MMIfaceModemLocation *_self,
+                                GAsyncResult *res,
+                                GTask *task)
+{
+    MMModemLocationSource sources;
+    GError *error = NULL;
+
+    sources = iface_modem_location_parent->load_capabilities_finish (_self, res, &error);
+    if (error) {
+        g_task_return_error (task, error);
+        g_object_unref (task);
+        return;
+    }
+
+    /* not sure how to check if GPS is supported, just allow it */
+    sources |= MM_MODEM_LOCATION_SOURCE_GPS_NMEA | MM_MODEM_LOCATION_SOURCE_GPS_RAW;
+
+    /* So we're done, complete */
+    g_task_return_int (task, sources);
+    g_object_unref (task);
+}
+
+static void
+location_load_capabilities (MMIfaceModemLocation *_self,
+                            GAsyncReadyCallback callback,
+                            gpointer user_data)
+{
+    GTask *task;
+
+    task = g_task_new (_self, NULL, callback, user_data);
+
+    /* Chain up parent's setup */
+    iface_modem_location_parent->load_capabilities (_self,
+                                                    (GAsyncReadyCallback)parent_load_capabilities_ready,
+                                                    task);
+}
+
+/*****************************************************************************/
+/* Enable/Disable location gathering (Location interface) */
+
+typedef struct {
+    MMModemLocationSource source;
+    int idx;
+} LocationGatheringContext;
+
+static gboolean
+location_disable_gathering_finish (MMIfaceModemLocation *_self,
+                                   GAsyncResult *res,
+                                   GError **error)
+{
+    return g_task_propagate_boolean (G_TASK (res), error);
+}
+
+static void
+gps_disable_finish (MMIfaceModemLocation *_self,
+                    GAsyncResult *res,
+                    GTask *task)
+{
+    GError *error = NULL;
+    LocationGatheringContext *ctx = g_task_get_task_data (task);
+    MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (_self);
+    MMPortSerialGps *gps_port = mm_base_modem_peek_port_gps (MM_BASE_MODEM(_self));
+    MMPortSerialAt *gps_ctrl_port = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM(_self));
+
+    /* Even if we get an error here, we try to close the GPS port */
+    mm_base_modem_at_command_full_finish (MM_BASE_MODEM(_self), res, &error);
+
+    --self->priv->internal_connection_open_count;
+    if(!self->priv->internal_connection_open_count)
+        mm_port_serial_close (MM_PORT_SERIAL (gps_ctrl_port));
+
+    mm_port_serial_close (MM_PORT_SERIAL (gps_port));
+
+    self->priv->enabled_sources &= ~(MM_MODEM_LOCATION_SOURCE_GPS_NMEA);
+
+    if (error)
+        g_task_return_error (task, error);
+    else
+        g_task_return_boolean (task, TRUE);
+
+    g_object_unref (task);
+}
+
+static void
+gps_disable_start (MMIfaceModemLocation *_self,
+                    GAsyncResult *res,
+                    GTask *task)
+{
+
+    LocationGatheringContext *ctx = g_task_get_task_data (task);
+    MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (_self);
+    MMPortSerialAt *gps_ctrl_port = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM(_self));
+
+    if(res)
+        mm_base_modem_at_command_full_finish (MM_BASE_MODEM(_self), res, NULL);
+
+    /* Only stop GPS engine if no GPS-related sources enabled */
+    mm_base_modem_at_command_full (MM_BASE_MODEM (_self),
+                                       gps_ctrl_port,
+                                       "+UGPS=0",
+                                       10,
+                                       FALSE,
+                                       FALSE, /* raw */
+                                       NULL, /* cancellable */
+                                       (GAsyncReadyCallback)gps_disable_finish,
+                                       task);
+}
+
+static void
+celllocate_disable_finish (MMIfaceModemLocation *_self,
+                    GAsyncResult *res,
+                    GTask *task)
+{
+    GError *error = NULL;
+    LocationGatheringContext *ctx = g_task_get_task_data (task);
+    MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (_self);
+    MMPortSerialAt *gps_ctrl_port = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM(_self));
+
+    if(res)
+        mm_base_modem_at_command_full_finish (MM_BASE_MODEM(_self), res, &error);
+
+    --self->priv->internal_connection_open_count;
+    if(!self->priv->internal_connection_open_count)
+        mm_port_serial_close (MM_PORT_SERIAL (gps_ctrl_port));
+
+    self->priv->enabled_sources &= ~(MM_MODEM_LOCATION_SOURCE_GPS_RAW);
+
+    if(error)
+        g_task_return_error (task, error);
+    else
+        g_task_return_boolean (task, TRUE);
+
+    g_object_unref (task);
+}
+
+static void
+location_disable_gathering (MMIfaceModemLocation *_self,
+                            MMModemLocationSource source,
+                            GAsyncReadyCallback callback,
+                            gpointer user_data)
+{
+    MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (_self);
+    LocationGatheringContext *ctx;
+    GTask *task;
+
+    ctx = g_new (LocationGatheringContext, 1);
+    ctx->source = source;
+
+    task = g_task_new (self, NULL, callback, user_data);
+    g_task_set_task_data (task, ctx, g_free);
+
+    if(source & self->priv->enabled_sources) {
+        if(self->priv->internal_connection_open_count == 1) {
+            mm_base_modem_at_command_full (MM_BASE_MODEM (_self),
+                                   mm_base_modem_peek_port_gps_control (MM_BASE_MODEM (_self)),
+                                   "+UPSDA=0,4",
+                                   10,
+                                   FALSE,
+                                   FALSE, /* raw */
+                                   NULL, /* cancellable */
+                                   (GAsyncReadyCallback) (source & MM_MODEM_LOCATION_SOURCE_GPS_NMEA ? gps_disable_start : celllocate_disable_finish),
+                                   task);
+        }
+        else if(source & MM_MODEM_LOCATION_SOURCE_GPS_NMEA)
+            gps_disable_start(_self, NULL, task);
+        else
+            celllocate_disable_finish(_self, NULL, task);
+
+        return;
+    }
+
+	/* For any other location (e.g. CellLocate), or if still some GPS needed, just return */
+    g_task_return_boolean (task, TRUE);
+    g_object_unref (task);
+}
+
+/*****************************************************************************/
+/* Enable location gathering (Location interface) */
+
+static gboolean
+location_enable_gathering_finish (MMIfaceModemLocation *_self,
+                                  GAsyncResult *res,
+                                  GError **error)
+{
+    return g_task_propagate_boolean (G_TASK (res), error);
+}
+
+static char *celllocate_startup[] = {
+    "+UPSD=0,0,2",   //Map to PDP#1 so internal stack and lte connection can coexist
+    "+UPSD=0,100,1",
+    "+UPSDA=0,3",    //Activate internal stack
+    "AT+ULOCCELL=1", //Deep network scan
+    "AT+ULOCIND=1",  //localization information request status
+    "AT+ULOC=2,2,1,60,1000",
+    NULL
+};
+
+static char *gps_startup[] = {
+    "+UPSD=0,0,2",
+    "+UPSD=0,100,1",
+    "+UPSDA=0,3",
+    "AT+UGRMC=1",
+    "+UGPRF=2",	//NMEA data flow to multiplexer
+    "+UGGLL=1", //$GPGLL format
+    "+UGPS=1,3,71", //Power on, Local + AsistNow offline, GPS + SBAS + Galileo + GLONASS;
+    NULL
+};
+
+static void
+gps_enabled_ready (MMIfaceModemLocation *_self,
+                   GAsyncResult *res,
+                   GTask *task)
+{
+    MMPortSerialGps *gps_port;
+    LocationGatheringContext *ctx = g_task_get_task_data (task);
+    MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (_self);
+    MMPortSerialAt *gps_ctrl_port = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM (_self));
+
+    //If GPS shall work whether internal stack can be activated or not
+    mm_base_modem_at_command_full_finish (MM_BASE_MODEM (_self), res, NULL);
+
+    ctx = g_task_get_task_data (task);
+
+    /* ctx->idx++; make sure ctx->idx is a valid command */
+    if (gps_startup[ctx->idx++] && gps_startup[ctx->idx]) {
+       mm_base_modem_at_command_full (MM_BASE_MODEM (_self),
+                                      gps_ctrl_port,
+                                      gps_startup[ctx->idx],
+                                      30,
+                                      FALSE,
+                                      FALSE, /* raw */
+                                      NULL, /* cancellable */
+                                      (GAsyncReadyCallback)gps_enabled_ready,
+                                      task);
+       return;
+    }
+
+    self->priv->enabled_sources |= MM_MODEM_LOCATION_SOURCE_GPS_NMEA;
+    self->priv->internal_connection_open_count++;
+
+    gps_port = mm_base_modem_peek_port_gps (MM_BASE_MODEM (_self));
+    mm_port_serial_open (MM_PORT_SERIAL (gps_port), NULL);
+
+    mm_port_serial_open (MM_PORT_SERIAL (gps_ctrl_port), NULL);
+
+    g_task_return_boolean (task, TRUE);
+    g_object_unref (task);
+}
+
+static void
+celllocate_enabled_ready (MMIfaceModemLocation *_self,
+                   GAsyncResult *res,
+                   GTask *task)
+{
+    GError *error = NULL;
+    LocationGatheringContext *ctx = g_task_get_task_data (task);
+    MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (_self);
+    MMPortSerialAt *gps_ctrl_port = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM (_self));
+
+    //If internal stack can't be activated, celllocate won't work
+    if(!mm_base_modem_at_command_full_finish (MM_BASE_MODEM (_self), res, &error)) {
+        g_task_return_error (task, error);
+        g_object_unref (task);
+        return;
+    }
+
+    /*make sure ctx->idx is a valid command */
+    if (celllocate_startup[ctx->idx++] && celllocate_startup[ctx->idx]) {
+       mm_base_modem_at_command_full (MM_BASE_MODEM (_self),
+                                      gps_ctrl_port,
+                                      celllocate_startup[ctx->idx],
+                                      30,
+                                      FALSE,
+                                      FALSE, /* raw */
+                                      NULL, /* cancellable */
+                                      (GAsyncReadyCallback)celllocate_enabled_ready,
+                                      task);
+       return;
+    }
+
+    self->priv->enabled_sources |= MM_MODEM_LOCATION_SOURCE_GPS_RAW;
+    self->priv->internal_connection_open_count++;
+
+    mm_port_serial_open (MM_PORT_SERIAL (gps_ctrl_port), NULL);
+
+    g_task_return_boolean (task, TRUE);
+    g_object_unref (task);
+}
+
+static void
+parent_enable_location_gathering_ready (MMIfaceModemLocation *_self,
+                                        GAsyncResult *res,
+                                        GTask *task)
+{
+    GError *error = NULL;
+
+    MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (_self);
+    LocationGatheringContext *ctx = g_task_get_task_data (task);
+    MMPortSerialAt *gps_ctrl_port = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM (_self));
+
+    if (!iface_modem_location_parent->enable_location_gathering_finish (_self, res, &error)) {
+        g_task_return_error (task, error);
+        g_object_unref (task);
+        return;
+    }
+
+    if (ctx->source & MM_MODEM_LOCATION_SOURCE_GPS_NMEA) {
+
+        ctx->idx = self->priv->internal_connection_open_count ? 3 : 0;
+
+        /* Only start GPS engine if not done already */
+        if (!(self->priv->enabled_sources & MM_MODEM_LOCATION_SOURCE_GPS_NMEA)) {
+            mm_base_modem_at_command_full (MM_BASE_MODEM (self),
+                                       gps_ctrl_port,
+                                       gps_startup[ctx->idx],
+                                       10,
+                                       FALSE,
+                                       FALSE, /* raw */
+                                       NULL, /* cancellable */
+                                       (GAsyncReadyCallback)gps_enabled_ready,
+                                       task);
+            return;
+        }
+    }
+    else if (ctx->source & MM_MODEM_LOCATION_SOURCE_GPS_RAW) {
+
+        ctx->idx = self->priv->internal_connection_open_count ? 3 : 0;
+
+        /* Only start CellLocate engine if not done already */
+        if (!(self->priv->enabled_sources & MM_MODEM_LOCATION_SOURCE_GPS_RAW)) {
+            mm_base_modem_at_command_full (MM_BASE_MODEM (self),
+                                       gps_ctrl_port,
+                                       celllocate_startup[ctx->idx],
+                                       10,
+                                       FALSE,
+                                       FALSE, /* raw */
+                                       NULL, /* cancellable */
+                                       (GAsyncReadyCallback)celllocate_enabled_ready,
+                                       task);
+            return;
+        }
+    }
+
+    /* For any other location (e.g. 3GPP), or if GPS already running just return */
+    g_task_return_boolean (task, TRUE);
+    g_object_unref (task);
+}
+
+static void
+get_mga_file_list (MMIfaceModemLocation *_self,
+                          GAsyncResult *res,
+                          GTask *task);
+
+/*
+Delete 1 mga file per time.
+*/
+static void
+delete_invalid_mga_file (MMIfaceModemLocation *_self,
+                          GAsyncResult *res,
+                          GTask *task)
+{
+    gchar cmd[256];
+    GError *error = NULL;
+    const gchar *response;
+    LocationGatheringContext *ctx;
+
+    cmd[0] = 0;
+
+    response = mm_base_modem_at_command_full_finish (MM_BASE_MODEM (_self), res, &error);
+    if(g_strstr_len(response, strlen(response), "+ULSTFILE:")) {
+        gchar **files, **file;
+        gchar valid_since_file[20];
+        GDateTime *now = g_date_time_new_now_local();
+        GDateTime *valid_since = g_date_time_add_weeks(now, -5); //mga data can be valid for up to 5 weeks
+
+        g_snprintf(valid_since_file, 20, "\"%04d%02d%02d%02d%02d%02d.mga\"", g_date_time_get_year(valid_since),
+                                                                       g_date_time_get_month(valid_since),
+                                                                       g_date_time_get_day_of_month(valid_since),
+                                                                       g_date_time_get_hour(valid_since),
+                                                                       g_date_time_get_minute(valid_since),
+                                                                       g_date_time_get_second(valid_since) );
+        files = g_strsplit(response + strlen("+ULSTFILE: "), ",", 0);
+        for(file = files; *file; file += 1) {
+            if(g_strrstr(*file, ".mga")) {
+                if(g_strcmp0(valid_since_file, *file) > 0) {
+                    mm_dbg("ublox: delete invalid mga files %s", *file);
+                    g_snprintf(cmd, 256, "AT+UDELFILE=\"%s\",\"USER\"", g_strstrip(*file));
+                    break;
+                }
+            }
+        }
+
+        g_date_time_unref(valid_since);
+        g_date_time_unref(now);
+    }
+    else if (error) {
+        mm_err("ublox: delete invalid mga file failed due to error %s", error->message);
+        g_error_free (error);
+    }
+
+    if(cmd[0]) {
+        MMPortSerialAt *gps_ctrl_port = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM (_self));
+        mm_base_modem_at_command_full (MM_BASE_MODEM (_self),
+                                    gps_ctrl_port,
+                                    cmd,
+                                    10,
+                                    FALSE,
+                                    FALSE, /* raw */
+                                    NULL, /* cancellable */
+                                    (GAsyncReadyCallback)get_mga_file_list,
+                                    task);
+       return;
+    }
+
+    ctx = g_task_get_task_data (task);
+    /* Chain up parent's gathering enable */
+    iface_modem_location_parent->enable_location_gathering (_self,
+                                                        ctx->source,
+                                                        (GAsyncReadyCallback)parent_enable_location_gathering_ready,
+                                                        task);
+}
+
+static void
+get_mga_file_list (MMIfaceModemLocation *_self,
+                          GAsyncResult *res,
+                          GTask *task)
+{
+    GError *error = NULL;
+    MMPortSerialAt *gps_ctrl_port;
+
+    if(res) {
+        mm_base_modem_at_command_full_finish (MM_BASE_MODEM (_self), res, &error);
+        if(error) {
+            mm_err("ublox: delete invalid mga file failed due to error %s", error->message);
+            g_task_return_error (task, error);
+            g_object_unref (task);
+            return;
+        }
+    }
+
+    gps_ctrl_port = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM (_self));
+    mm_base_modem_at_command_full (MM_BASE_MODEM (_self),
+                                    gps_ctrl_port,
+                                    "AT+ULSTFILE=0",
+                                    10,
+                                    FALSE,
+                                    FALSE, /* raw */
+                                    NULL, /* cancellable */
+                                    (GAsyncReadyCallback)delete_invalid_mga_file,
+                                    task);
+}
+
+
+static void
+location_enable_gathering (MMIfaceModemLocation *_self,
+                           MMModemLocationSource source,
+                           GAsyncReadyCallback callback,
+                           gpointer user_data)
+{
+    GTask *task;
+    LocationGatheringContext *ctx;
+    MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (_self);
+
+    ctx = g_new (LocationGatheringContext, 1);
+    ctx->source = source;
+    ctx->idx = 0;
+
+    task = g_task_new (_self, NULL, callback, user_data);
+    g_task_set_task_data (task, ctx, g_free);
+
+    if(source & MM_MODEM_LOCATION_SOURCE_GPS_NMEA) {
+        get_mga_file_list(_self, NULL, task);
+        return;
+    }
+
+    /* Chain up parent's gathering enable */
+    iface_modem_location_parent->enable_location_gathering (_self,
+                                                    ctx->source,
+                                                    (GAsyncReadyCallback)parent_enable_location_gathering_ready,
+                                                    task);
+}
+
+static void
+location_inject_assistance_data_ready (MMIfaceModemLocation *_self,
+                                       GAsyncResult *res,
+                                       GTask *task)
+{
+    GError *error = NULL;
+
+    if(!mm_base_modem_at_command_full_finish (MM_BASE_MODEM (_self), res, &error))
+        g_task_return_error (task, error);
+    else
+        g_task_return_boolean (task, TRUE);
+    g_object_unref (task);
+}
+
+static void
+location_inject_assistance_data (MMIfaceModemLocation  *_self,
+                                 const guint8          *data,
+                                 gsize                  data_size,
+                                 GAsyncReadyCallback    callback,
+                                 gpointer               user_data)
+{
+    int len;
+    GTask *task;
+    gchar cmd[256];
+    MMPortSerialAt *gps_ctrl_port = mm_base_modem_peek_port_gps_control (MM_BASE_MODEM(_self));
+
+    len = g_snprintf(cmd, 256, "AT+UGSRV=\"cell-live1.services.u-blox.com\",\"cell-live2.services.u-blox.com\",\"");
+
+    if(data_size > 0) {
+        memcpy(cmd + len, data, data_size - 1);
+        len += data_size - 1;
+    }
+
+    g_snprintf(cmd + len, 256 - len, "\",14,5,1,65,2,15");
+
+    task = g_task_new (_self, NULL, callback, user_data);
+    mm_base_modem_at_command_full (MM_BASE_MODEM (_self),
+                                   gps_ctrl_port,
+                                   cmd,
+                                   10,
+                                   FALSE,
+                                   FALSE, /* raw */
+                                   NULL, /* cancellable */
+                                   (GAsyncReadyCallback) location_inject_assistance_data_ready,
+                                   task);
+}
+
+static gboolean
+location_inject_assistance_data_finish (MMIfaceModemLocation  *_self,
+                                        GAsyncResult          *res,
+                                        GError               **error)
+{
+    return g_task_propagate_boolean (G_TASK (res), error);
+}
+
+static void
+location_load_supported_assistance_data (MMIfaceModemLocation  *_self,
+                                         GAsyncReadyCallback    callback,
+                                         gpointer               user_data)
+{
+    GTask *task;
+
+    task = g_task_new (_self, NULL, callback, user_data);
+
+    g_task_return_int (task, MM_MODEM_LOCATION_ASSISTANCE_DATA_TYPE_TOKEN);
+    g_object_unref (task);
+}
+
+static MMModemLocationAssistanceDataType
+location_load_supported_assistance_data_finish (MMIfaceModemLocation  *_self,
+                                                GAsyncResult          *res,
+                                                GError               **error)
+{
+    GError *inner_error = NULL;
+    gssize value;
+
+    value = g_task_propagate_int (G_TASK (res), &inner_error);
+    if (inner_error) {
+        g_propagate_error (error, inner_error);
+        return MM_MODEM_LOCATION_ASSISTANCE_DATA_TYPE_NONE;
+    }
+
+    return (MMModemLocationAssistanceDataType)value;
+}
+
+static void
+iface_modem_location_init (MMIfaceModemLocation *iface)
+{
+
+    iface_modem_location_parent = g_type_interface_peek_parent (iface);
+
+    iface->load_capabilities = location_load_capabilities;
+    iface->load_capabilities_finish = location_load_capabilities_finish;
+    iface->enable_location_gathering = location_enable_gathering;
+    iface->enable_location_gathering_finish = location_enable_gathering_finish;
+    iface->disable_location_gathering = location_disable_gathering;
+    iface->disable_location_gathering_finish = location_disable_gathering_finish;
+
+    iface->inject_assistance_data = location_inject_assistance_data;
+    iface->inject_assistance_data_finish = location_inject_assistance_data_finish;
+    iface->load_supported_assistance_data = location_load_supported_assistance_data;
+    iface->load_supported_assistance_data_finish = location_load_supported_assistance_data_finish;
+}
+
 static void
 finalize (GObject *object)
 {
     MMBroadbandModemUblox *self = MM_BROADBAND_MODEM_UBLOX (object);

     g_regex_unref (self->priv->pbready_regex);
+    g_regex_unref (self->priv->uugind_regex);
+    g_regex_unref (self->priv->uuloc_regex);
+    g_regex_unref (self->priv->uulocind_regex);

     if (self->priv->ucallstat_regex)
         g_regex_unref (self->priv->ucallstat_regex);
+
     g_free (self->priv->operator_id);

     G_OBJECT_CLASS (mm_broadband_modem_ublox_parent_class)->finalize (object);
diff --git a/plugins/ublox/mm-plugin-ublox.c b/plugins/ublox/mm-plugin-ublox.c
index db7b8be7..7f7a5211 100644
--- a/plugins/ublox/mm-plugin-ublox.c
+++ b/plugins/ublox/mm-plugin-ublox.c
@@ -66,14 +66,14 @@ ublox_grab_port (MMPlugin *self,
             mm_port_probe_get_port_name (probe));
         pflags = MM_PORT_SERIAL_AT_FLAG_SECONDARY;
     } else if (g_strcmp0 ("gsmtty3", mm_port_probe_get_port_name (probe)) == 0) {
-        mm_dbg ("ublox: port '%s/%s' flagged as GSP control",
+        mm_dbg ("ublox: AT port '%s/%s type %d' flagged as GPS control",
             mm_port_probe_get_port_subsys (probe),
-            mm_port_probe_get_port_name (probe));
+            mm_port_probe_get_port_name (probe), ptype);
         pflags = MM_PORT_SERIAL_AT_FLAG_GPS_CONTROL;
-    } else {
-        mm_dbg ("ublox: AT port '%s/%s' flagged as NMEA",
+    } else if (g_strcmp0 ("gsmtty4", mm_port_probe_get_port_name (probe)) == 0) {
+        mm_dbg ("ublox: AT port '%s/%s type %d' flagged as NMEA",
             mm_port_probe_get_port_subsys (probe),
-            mm_port_probe_get_port_name (probe));
+            mm_port_probe_get_port_name (probe), ptype);
         ptype = MM_PORT_TYPE_GPS;
     }
 out:
@@ -305,7 +305,7 @@ mm_plugin_create (void)
     static const gchar *subsystems[] = { "tty", "net", NULL };
     static const guint16 vendor_ids[] = { 0x1546, 0 };
     static const gchar *vendor_strings[] = { "u-blox", NULL };
-    static const gchar *drivers[] = { "gsmtty", "atmel_usart", NULL };
+    static const gchar *drivers[] = { "gsmtty", NULL };
     static const MMAsyncMethod custom_init = {
         .async  = G_CALLBACK (ublox_custom_init),
         .finish = G_CALLBACK (ublox_custom_init_finish),
--
2.17.1

