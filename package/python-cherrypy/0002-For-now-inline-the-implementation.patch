From 3bcefda0a5e397e12a6122fd8004cbbbce6a2b15 Mon Sep 17 00:00:00 2001
From: "Jason R. Coombs" <jaraco@jaraco.com>
Date: Sun, 17 Dec 2017 11:31:44 -0500
Subject: [PATCH] For now inline the implementation until it can be linked. Ref
 #1673.

---
 cherrypy/lib/httputil.py | 65 ++++++++++++++++++++++++++++++++++++++--
 setup.py                 |  1 -
 2 files changed, 62 insertions(+), 4 deletions(-)

diff --git a/cherrypy/lib/httputil.py b/cherrypy/lib/httputil.py
index 0458e543..cb8591ac 100644
--- a/cherrypy/lib/httputil.py
+++ b/cherrypy/lib/httputil.py
@@ -17,8 +17,6 @@
 from http.server import BaseHTTPRequestHandler
 from urllib.parse import unquote_plus
 
-import jaraco.collections
-
 import cherrypy
 from cherrypy._cpcompat import ntob, ntou
 
@@ -387,7 +385,68 @@ def parse_query_string(query_string, keep_blank_values=True, encoding='utf-8'):
     return pm
 
 
-class CaseInsensitiveDict(jaraco.collections.KeyTransformingDict):
+####
+# Inlined from jaraco.collections 1.5.2
+# Ref #1673
+class KeyTransformingDict(dict):
+    """
+    A dict subclass that transforms the keys before they're used.
+    Subclasses may override the default transform_key to customize behavior.
+    """
+    @staticmethod
+    def transform_key(key):
+        return key
+
+    def __init__(self, *args, **kargs):
+        super(KeyTransformingDict, self).__init__()
+        # build a dictionary using the default constructs
+        d = dict(*args, **kargs)
+        # build this dictionary using transformed keys.
+        for item in d.items():
+            self.__setitem__(*item)
+
+    def __setitem__(self, key, val):
+        key = self.transform_key(key)
+        super(KeyTransformingDict, self).__setitem__(key, val)
+
+    def __getitem__(self, key):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).__getitem__(key)
+
+    def __contains__(self, key):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).__contains__(key)
+
+    def __delitem__(self, key):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).__delitem__(key)
+
+    def get(self, key, *args, **kwargs):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).get(key, *args, **kwargs)
+
+    def setdefault(self, key, *args, **kwargs):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).setdefault(
+            key, *args, **kwargs)
+
+    def pop(self, key, *args, **kwargs):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).pop(key, *args, **kwargs)
+
+    def matching_key_for(self, key):
+        """
+        Given a key, return the actual key stored in self that matches.
+        Raise KeyError if the key isn't found.
+        """
+        try:
+            return next(e_key for e_key in self.keys() if e_key == key)
+        except StopIteration:
+            raise KeyError(key)
+####
+
+
+class CaseInsensitiveDict(KeyTransformingDict):
 
     """A case-insensitive dict subclass.
 
diff --git a/setup.py b/setup.py
index bd989b4e..87ae3489 100755
--- a/setup.py
+++ b/setup.py
@@ -64,7 +64,6 @@
         'portend>=2.1.1',
         'more_itertools',
         'zc.lockfile',
-        'jaraco.collections',
     ],
     extras_require={
         'docs': [
