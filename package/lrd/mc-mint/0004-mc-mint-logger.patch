diff --git a/src/ipv4_net.c b/src/ipv4_net.c
--- a/src/ipv4_net.c
+++ b/src/ipv4_net.c
@@ -25,14 +25,14 @@ static int host2addr(char *host, struct in_addr *group_addr)
 	
 	if (inet_aton("224.0.0.1", &all_group_addr) == 0)
 		{
-		log( "Unable to assign 224.0.0.1 address to interface: %s.\n",
+		logger( "Unable to assign 224.0.0.1 address to interface: %s.\n",
 				strerror(errno));
 		return -ENETWORK;
 		}
 	
 	if (host == NULL)
 		{
-		log( "Hostname is not presented. Using 224.0.0.1.\n");
+		logger( "Hostname is not presented. Using 224.0.0.1.\n");
 		*group_addr = all_group_addr;
 		return 0;
 		}
@@ -40,7 +40,7 @@ static int host2addr(char *host, struct in_addr *group_addr)
 		{
 		if (inet_aton(host, group_addr) == 0)
 			{
-			log( "Unable to assign %s address "
+			logger( "Unable to assign %s address "
 					"to interface. Using 224.0.0.1\n",
 					host);
 			*group_addr = all_group_addr;
@@ -48,7 +48,7 @@ static int host2addr(char *host, struct in_addr *group_addr)
 			}
 /*		if (!IN_MULTICAST(group_addr->s_addr))
 			{
-			log( "%s address is not a multicast address.\n"
+			logger( "%s address is not a multicast address.\n"
 					"Using 224.0.0.1 instead.\n", host);
 			*group_addr = all_group_addr;
 			return 0;
diff --git a/src/ipv6_net.c b/src/ipv6_net.c
--- a/src/ipv6_net.c
+++ b/src/ipv6_net.c
@@ -30,7 +30,7 @@ static int host2addr(char *ip6_host, struct in6_addr *group6_addr)
 		hp = gethostbyname2(ip6_host, AF_INET6);
 		if (hp == NULL)
 			{
-			log( "IPv6: Unknown host %s.\n", ip6_host);
+			logger( "IPv6: Unknown host %s.\n", ip6_host);
 			return -ENETWORK;
 			}
 
@@ -39,7 +39,7 @@ static int host2addr(char *ip6_host, struct in6_addr *group6_addr)
 	
 	if (!IN6_IS_ADDR_MULTICAST(group6_addr))
 		{
-		log( "IPv6: %s address is not a multicast IPv6 address.\n", ip6_host);
+		logger( "IPv6: %s address is not a multicast IPv6 address.\n", ip6_host);
 		return -ENOMULTI;
 		}
 	
@@ -64,14 +64,14 @@ int mc6_sender(char *ip6_host, int port, int ttl_val,
 	s = socket(AF_INET6, SOCK_DGRAM, 0);
 	if (s == -1)
 		{
-		log( "IPv6: socket error: %s.\n", strerror(errno));
+		logger( "IPv6: socket error: %s.\n", strerror(errno));
 		return -ENETWORK;
 		}
 	
 	if (setsockopt(s, IPPROTO_IPV6, IPV6_MULTICAST_LOOP, 
 				&loop, sizeof(loop)) == -1) 
 		{
-    		log( "Unable to %s loopback: %s.\n",
+    		logger( "Unable to %s loopback: %s.\n",
 				loop?"set":"unset", strerror(errno));
 		close(s);
 		return -ENETWORK;
@@ -80,7 +80,7 @@ int mc6_sender(char *ip6_host, int port, int ttl_val,
 	if (setsockopt(s, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, 
 				&ttl_val, sizeof(ttl_val)) == -1) 
 		{
-		log( "Unable to set %d hop limit: %s.\n",
+		logger( "Unable to set %d hop limit: %s.\n",
 				ttl_val, strerror(errno));
 		close(s);
 		return -ENETWORK;
@@ -128,7 +128,7 @@ int mc6_receiver(char *ip6_host, int port, int delay)
 	s = socket(AF_INET6, SOCK_DGRAM, 0);
 	if (s == -1)
 		{
-		log( "IPv6: socket error: %s.\n", strerror(errno));
+		logger( "IPv6: socket error: %s.\n", strerror(errno));
 		return -ENETWORK;
 		}
 	
@@ -151,7 +151,7 @@ int mc6_receiver(char *ip6_host, int port, int delay)
 				&mreq, sizeof(struct ipv6_mreq));
 	if (err < 0)
 		{
-		log( "Unable to join %s multicast group: %s.\n",
+		logger( "Unable to join %s multicast group: %s.\n",
 				ip6_host, strerror(errno));
 		close(s);
 		return -ENETWORK;
@@ -172,7 +172,7 @@ int mc6_receiver(char *ip6_host, int port, int delay)
 	err = setsockopt(s, IPPROTO_IPV6, IPV6_DROP_MEMBERSHIP, 
 				&mreq, sizeof(struct ipv6_mreq));
 	if (err < 0)
-		log( "Unable to join %s multicast group: %s.\n",
+		logger( "Unable to join %s multicast group: %s.\n",
 				ip6_host, strerror(errno));
 	
 	close(s);
diff --git a/src/log.c b/src/log.c
--- a/src/log.c
+++ b/src/log.c
@@ -7,15 +7,15 @@
 
 #include "errors.h"
 
-extern FILE *logf;
+extern FILE *loggerf;
 extern int not_logging;
 
 void log_open(char *logfile)
 	{
 	if (not_logging)
 		return;
-	logf = fopen(logfile, "a");
-	if (logf == NULL)
+	loggerf = fopen(logfile, "a");
+	if (loggerf == NULL)
 		{
 		fprintf(stderr, "Unable to open %s file for writing: %s.\n",
 				logfile, strerror(errno));
@@ -26,7 +26,7 @@ void log_open(char *logfile)
 	return;
 	}
 
-void log(const char *fmt, ...)
+void logger(const char *fmt, ...)
 	{
 	va_list ap;
 	time_t t;
@@ -39,19 +39,19 @@ void log(const char *fmt, ...)
 	tzset();
 	strftime(datestr, sizeof(datestr) - 1, "%a %b %d %T %Z %Y",
 	    localtime(&t));
-	fprintf(logf, "%s [%d] ", datestr, getpid());
+	fprintf(loggerf, "%s [%d] ", datestr, getpid());
 	va_start(ap, fmt);
-	vfprintf(logf, fmt, ap);
+	vfprintf(loggerf, fmt, ap);
 	va_end(ap);
-	fprintf(logf, "\n");
-	fflush(logf);
+	fprintf(loggerf, "\n");
+	fflush(loggerf);
 	}
 
 void log_close()
 	{
-	log("MINT exiting.\n");
+	logger("MINT exiting.\n");
 	if (!not_logging)
-		fclose(logf);
+		fclose(loggerf);
 	not_logging = 1;
 	}
 
diff --git a/src/mint.c b/src/mint.c
index 4b2a029..e5ebc30 100644
--- a/src/mint.c
+++ b/src/mint.c
@@ -65,7 +65,7 @@ int delay = 1, ttl_val = 1, send_mcast = 1, is_loop = 0,
 	port_num = 4321, num_send = -1, 
 	qos_val = IPTOS_PREC_ROUTINE, ipv6_sup = 0,
 	not_logging = 0, send_bytes=64;
-FILE *logf;
+FILE *loggerf;
 
 /* 
  * Filename path may not be more than PATH_LEN.
@@ -190,7 +190,7 @@ int main(int argc, char *argv[])
 		{
 		if (argc < 1)
 			{
-			log ("You should enter a multicast IPv4 address. \n");
+			logger("You should enter a multicast IPv4 address. \n");
 			usage();
 			return -ENOMULTI;
 			}
@@ -200,7 +200,7 @@ int main(int argc, char *argv[])
 		{
 		if (argc < 1)
 			{
-			log("You should enter multicast IPv6 address.\n");
+			logger("You should enter multicast IPv6 address.\n");
 			usage();
 			return -ENOMULTI;
 			}
@@ -213,7 +213,7 @@ int main(int argc, char *argv[])
 	signal(SIGALRM, sigalrm_handler);
 	
 	if (!not_logging)
-		log("%s multicast packets on interface %s:%d.\n", 
+		logger("%s multicast packets on interface %s:%d.\n", 
 			(send_mcast != 0)?"Sending":"Receiving",
 			host, 
 			port_num);
diff --git a/src/mint.h b/src/mint.h
--- a/src/mint.h
+++ b/src/mint.h
@@ -15,7 +15,7 @@ int mc_receiver(char *, int, int);
 int mc6_sender(char *, int, int, unsigned int, int);
 int mc6_receiver(char *, int, int);
 
-void log(const char *, ...);
+void logger(const char *, ...);
 void log_open(char *);
 void log_close();
 
diff --git a/src/transmit.c b/src/transmit.c
--- a/src/transmit.c
+++ b/src/transmit.c
@@ -31,12 +31,12 @@ int recv_data(int s, void *buf, int size, struct sockaddr *from,
 		switch (poll(&pfd, 1, (delay < 0)?-1:delay*1000)) 
 			{
 			case 0:
-				log( "error: idle time exceeded.\n");
+				logger( "error: idle time exceeded.\n");
 				return -ETIMEOUT;
 			case -1:
 				if (errno != EINTR) 
 					{
-					log( "Unable to work with "
+					logger( "Unable to work with "
 							 "POLLIN.\n");
 					perror("poll");
 					return -EFILEIO;
@@ -48,12 +48,12 @@ int recv_data(int s, void *buf, int size, struct sockaddr *from,
 		switch (nbytes) 
 			{
 			case 0:
-				log( "Connection reset by peer");
+				logger( "Connection reset by peer");
 				return -ENETWORK;
 			case -1:
 				if (errno != EINTR) 
 					{
-					log( "Unable to receive "
+					logger( "Unable to receive "
 							"%d bytes.\n", size);
 				    	perror("recv");
 					return -ENETWORK;
@@ -84,11 +84,11 @@ int send_data(int s, void *buf, int size, struct sockaddr *to, int ipv6_sup)
 		switch (nbytes) 
 			{
 			case 0:
-				log( "Connection reset by peer\n");
+				logger( "Connection reset by peer\n");
 				return -ENETWORK;
 			case -1:
 				if (errno != EINTR) 
-					log( "Unable to send %d "
+					logger( "Unable to send %d "
 					"bytes: %s.\n", size, strerror(errno));
 				return -ENETWORK;
 			continue;
