--- a/uvicorn/config.py	2020-02-01 19:00:00.000000000 -0500
+++ b/uvicorn/config.py	2024-01-11 11:13:48.492675156 -0500
@@ -271,6 +271,7 @@
         self.callback_notify = callback_notify
         self.ssl_keyfile = ssl_keyfile
         self.ssl_certfile = ssl_certfile
+        self.ssl_cert_pem: Optional[str] = None
         self.ssl_keyfile_password = ssl_keyfile_password
         self.ssl_version = ssl_version
         self.ssl_cert_reqs = ssl_cert_reqs
@@ -436,6 +437,8 @@
                 ca_certs=self.ssl_ca_certs,
                 ciphers=self.ssl_ciphers,
             )
+            with open(self.ssl_certfile) as file:
+                self.ssl_cert_pem = file.read()
         else:
             self.ssl = None
 
--- a/uvicorn/protocols/http/h11_impl.py	2020-02-01 19:00:00.000000000 -0500
+++ b/uvicorn/protocols/http/h11_impl.py	2024-01-11 11:18:08.215795183 -0500
@@ -38,6 +38,7 @@
     get_local_addr,
     get_path_with_query_string,
     get_remote_addr,
+    get_tls_info,
     is_ssl,
 )
 from uvicorn.server import ServerState
@@ -98,6 +99,7 @@
         self.server: Optional[Tuple[str, int]] = None
         self.client: Optional[Tuple[str, int]] = None
         self.scheme: Optional[Literal["http", "https"]] = None
+        self.tls: Optional[Dict] = None
 
         # Per-request state
         self.scope: HTTPScope = None  # type: ignore[assignment]
@@ -116,6 +118,11 @@
         self.client = get_remote_addr(transport)
         self.scheme = "https" if is_ssl(transport) else "http"
 
+        if self.config.is_ssl:
+            self.tls = get_tls_info(transport)
+            if self.tls:
+                self.tls["server_cert"] = self.config.ssl_cert_pem
+
         if self.logger.level <= TRACE_LOG_LEVEL:
             prefix = "%s:%d - " % self.client if self.client else ""
             self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection made", prefix)
@@ -222,8 +229,12 @@
                     "query_string": query_string,
                     "headers": self.headers,
                     "state": self.app_state.copy(),
+                    "extensions": {},
                 }
 
+                if self.config.is_ssl:
+                    self.scope["extensions"]["tls"] = self.tls  # type: ignore[index, assignment] # noqa: E501
+
                 upgrade = self._get_upgrade()
                 if upgrade == b"websocket" and self._should_upgrade_to_ws():
                     self.handle_websocket_upgrade(event)
--- a/uvicorn/protocols/http/httptools_impl.py	2020-02-01 19:00:00.000000000 -0500
+++ b/uvicorn/protocols/http/httptools_impl.py	2024-01-11 11:19:39.992806768 -0500
@@ -43,6 +43,7 @@
     get_local_addr,
     get_path_with_query_string,
     get_remote_addr,
+    get_tls_info,
     is_ssl,
 )
 from uvicorn.server import ServerState
@@ -103,6 +104,7 @@
         self.client: Optional[Tuple[str, int]] = None
         self.scheme: Optional[Literal["http", "https"]] = None
         self.pipeline: Deque[Tuple[RequestResponseCycle, ASGI3Application]] = deque()
+        self.tls: Optional[Dict] = None
 
         # Per-request state
         self.scope: HTTPScope = None  # type: ignore[assignment]
@@ -122,6 +124,11 @@
         self.client = get_remote_addr(transport)
         self.scheme = "https" if is_ssl(transport) else "http"
 
+        if self.config.is_ssl:
+            self.tls = get_tls_info(transport)
+            if self.tls:
+                self.tls["server_cert"] = self.config.ssl_cert_pem
+
         if self.logger.level <= TRACE_LOG_LEVEL:
             prefix = "%s:%d - " % self.client if self.client else ""
             self.logger.log(TRACE_LOG_LEVEL, "%sHTTP connection made", prefix)
@@ -244,8 +251,12 @@
             "root_path": self.root_path,
             "headers": self.headers,
             "state": self.app_state.copy(),
+            "extensions": {},
         }
 
+        if self.config.is_ssl:
+            self.scope["extensions"]["tls"] = self.tls  # type: ignore[index, assignment] # noqa: E501
+
     # Parser callbacks
     def on_url(self, url: bytes) -> None:
         self.url += url
--- a/uvicorn/protocols/utils.py	2020-02-01 19:00:00.000000000 -0500
+++ b/uvicorn/protocols/utils.py	2024-01-11 11:22:51.886814641 -0500
@@ -1,9 +1,28 @@
 import asyncio
+import ssl
 import urllib.parse
-from typing import Optional, Tuple
+from typing import Any, Dict, Optional, Tuple
 
 from uvicorn._types import WWWScope
 
+RDNS_MAPPING: Dict[str, str] = {
+    "commonName": "CN",
+    "localityName": "L",
+    "stateOrProvinceName": "ST",
+    "organizationName": "O",
+    "organizationalUnitName": "OU",
+    "countryName": "C",
+    "streetAddress": "STREET",
+    "domainComponent": "DC",
+    "userId": "UID",
+}
+
+TLS_VERSION_MAP: Dict[str, int] = {
+    "TLSv1": 0x0301,
+    "TLSv1.1": 0x0302,
+    "TLSv1.2": 0x0303,
+    "TLSv1.3": 0x0304,
+}
 
 def get_remote_addr(transport: asyncio.Transport) -> Optional[Tuple[str, int]]:
     socket_info = transport.get_extra_info("socket")
@@ -52,3 +71,54 @@
             path_with_query_string, scope["query_string"].decode("ascii")
         )
     return path_with_query_string
+
+def get_tls_info(transport: asyncio.Transport) -> Optional[Dict]:
+
+    ###
+    # server_cert: Unable to set from transport information
+    # client_cert_chain: Just the peercert, currently no access to the full cert chain
+    # client_cert_name:
+    # client_cert_error: No access to this
+    # tls_version:
+    # cipher_suite: Too hard to convert without direct access to openssl
+    ###
+
+    ssl_info: Dict[str, Any] = {
+        "server_cert": None,
+        "client_cert_chain": [],
+        "client_cert_name": None,
+        "client_cert_error": None,
+        "tls_version": None,
+        "cipher_suite": None,
+    }
+
+    ssl_object = transport.get_extra_info("ssl_object", default=None)
+    peercert = ssl_object.getpeercert()
+
+    if peercert:
+        rdn_strings = []
+        for rdn in peercert["subject"]:
+            rdn_strings.append(
+                "+".join(
+                    [
+                        "%s = %s" % (RDNS_MAPPING[entry[0]], entry[1])
+                        for entry in reversed(rdn)
+                        if entry[0] in RDNS_MAPPING
+                    ]
+                )
+            )
+
+        ssl_info["client_cert_chain"] = [
+            ssl.DER_cert_to_PEM_cert(ssl_object.getpeercert(binary_form=True))
+        ]
+        ssl_info["client_cert_name"] = ", ".join(rdn_strings) if rdn_strings else ""
+        ssl_info["tls_version"] = (
+            TLS_VERSION_MAP[ssl_object.version()]
+            if ssl_object.version() in TLS_VERSION_MAP
+            else None
+        )
+        ssl_info["cipher_suite"] = list(ssl_object.cipher())
+
+        return ssl_info
+
+    return None
