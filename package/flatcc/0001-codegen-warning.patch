--- a/src/compiler/codegen_c_builder.c	2019-08-17 07:20:07.000000000 
+++ b/src/compiler/codegen_c_builder.c	2022-03-17 16:25:08.000000000 
@@ -287,7 +287,7 @@
         "  _uvref.type = flatcc_builder_refmap_find(B, vec.type); _uvref.value = flatcc_builder_refmap_find(B, vec.value);\\\n"
         "  _len = N ## _union_vec_len(vec); if (_uvref.type == 0) {\\\n"
         "  _uvref.type = flatcc_builder_refmap_insert(B, vec.type, (flatcc_builder_create_type_vector(B, vec.type, _len))); }\\\n"
-        "  if (_uvref.type == 0) return _ret; if (_uvref.value == 0) {\\\n"
+        "  if (_uvref.type == 0) { return _ret; } if (_uvref.value == 0) {\\\n"
         "  if (flatcc_builder_start_offset_vector(B)) return _ret;\\\n"
         "  for (_i = 0; _i < _len; ++_i) { _uref = N ## _clone(B, N ## _union_vec_at(vec, _i));\\\n"
         "    if (!_uref.value || !(flatcc_builder_offset_vector_push(B, _uref.value))) return _ret; }\\\n"
@@ -417,10 +417,10 @@
         "{ memcpy(p, p2, n * sizeof(T)); return p; }\\\n"
         "static inline T *N ## _array_copy_from_pe(T *p, const T *p2, size_t n)\\\n"
         "{ size_t i; if (NS ## is_native_pe()) memcpy(p, p2, n * sizeof(T)); else\\\n"
-        "  for (i = 0; i < n; ++i) N ## _copy_from_pe(&p[i], &p2[i]); return p; }\\\n"
+        "  { for (i = 0; i < n; ++i) N ## _copy_from_pe(&p[i], &p2[i]); } return p; }\\\n"
         "static inline T *N ## _array_copy_to_pe(T *p, const T *p2, size_t n)\\\n"
         "{ size_t i; if (NS ## is_native_pe()) memcpy(p, p2, n * sizeof(T)); else\\\n"
-        "  for (i = 0; i < n; ++i) N ## _copy_to_pe(&p[i], &p2[i]); return p; }\n",
+        "  { for (i = 0; i < n; ++i) N ## _copy_to_pe(&p[i], &p2[i]); } return p; }\n",
         nsc);
     fprintf(out->fp,
         "#define __%sdefine_scalar_primitives(NS, N, T)\\\n"
@@ -531,7 +531,7 @@
         "static inline int N ## _add(NS ## builder_t *B, TN ## _union_ref_t uref)\\\n"
         "{ NS ## ref_t *_p; TN ## _union_type_t *_pt; if (uref.type == TN ## _NONE) return 0; if (uref.value == 0) return -1;\\\n"
         "  if (!(_pt = (TN ## _union_type_t *)flatcc_builder_table_add(B, ID - 1, sizeof(*_pt), sizeof(*_pt))) ||\\\n"
-        "  !(_p = flatcc_builder_table_add_offset(B, ID))) return -1; *_pt = uref.type; *_p = uref.value; return 0; }\\\n"
+        "  !(_p = flatcc_builder_table_add_offset(B, ID))) { return -1; } *_pt = uref.type; *_p = uref.value; return 0; }\\\n"
         "static inline int N ## _add_type(NS ## builder_t *B, TN ## _union_type_t type)\\\n"
         "{ TN ## _union_type_t *_pt; if (type == TN ## _NONE) return 0; return (_pt = (TN ## _union_type_t *)flatcc_builder_table_add(B, ID - 1,\\\n"
         "  sizeof(*_pt), sizeof(*_pt))) ? ((*_pt = type), 0) : -1; }\\\n"
@@ -717,8 +717,8 @@
         "#define __%sbuild_union_vector_field(ID, NS, N, TN, TT)\\\n"
         "static inline int N ## _add(NS ## builder_t *B, TN ## _union_vec_ref_t uvref)\\\n"
         "{ NS ## vec_ref_t *_p; if (!uvref.type || !uvref.value) return uvref.type == uvref.value ? 0 : -1;\\\n"
-        "  if (!(_p = flatcc_builder_table_add_offset(B, ID - 1))) return -1; *_p = uvref.type;\\\n"
-        "  if (!(_p = flatcc_builder_table_add_offset(B, ID))) return -1; *_p = uvref.value; return 0; }\\\n"
+        "  if (!(_p = flatcc_builder_table_add_offset(B, ID - 1))) { return -1; } *_p = uvref.type;\\\n"
+        "  if (!(_p = flatcc_builder_table_add_offset(B, ID))) { return -1; } *_p = uvref.value; return 0; }\\\n"
         "static inline int N ## _start(NS ## builder_t *B)\\\n"
         "{ return flatcc_builder_start_union_vector(B); }\\\n"
         "static inline int N ## _end(NS ## builder_t *B)\\\n"--- a/src/compiler/codegen_c_reader.c	2019-08-17 07:20:07.000000000 
+++ b/src/compiler/codegen_c_reader.c	2022-03-17 19:53:22.000000000 
@@ -226,7 +226,7 @@
         "__## NS ## field_present(ID, t__tmp)\\\n"
         "static inline T ## _union_t N ## _ ## NK ## _union(N ## _table_t t__tmp)\\\n"
         "{ T ## _union_t u__tmp = { 0, 0 }; u__tmp.type = N ## _ ## NK ## _type_get(t__tmp);\\\n"
-        "  if (u__tmp.type == 0) return u__tmp; u__tmp.value = N ## _ ## NK ## _get(t__tmp); return u__tmp; }\\\n"
+        "  if (u__tmp.type == 0) { return u__tmp; } u__tmp.value = N ## _ ## NK ## _get(t__tmp); return u__tmp; }\\\n"
         "static inline NS ## string_t N ## _ ## NK ## _as_string(N ## _table_t t__tmp)\\\n"
         "{ return NS ## string_cast_from_generic(N ## _ ## NK ## _get(t__tmp)); }\\\n"
         "\n");
