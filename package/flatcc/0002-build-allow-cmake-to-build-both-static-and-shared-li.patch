From bad274137c7cd8bd356b65ae4e3fcbd60b072b5d Mon Sep 17 00:00:00 2001
From: Steve deRosier <steve.derosier@lairdtech.com>
Date: Fri, 29 Apr 2016 16:25:29 -0700
Subject: [PATCH 2/2] build: allow cmake to build both static and shared
 libraries

By default, cmake can only build one of static or shared libraries, not
both. Systems like Buildroot have the ability to configure the build to
build both static and shared libraries, and the current behavior gets in
the way of that. This patch makes it possible to do both on the same build.

Signed-off-by: Steve deRosier <steve.derosier@lairdtech.com>

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b9f5bc3..da30854 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,6 +12,11 @@ project (FlatCC C)
 #   scripts/cleanall.sh
 #
 
+# Options to control if we build static or shared libraries. Needed because
+# cmake has us explicitly do both versions if we want both versions.
+option(FLATCC_WITH_STATIC "Build the static version of the library" ON)
+option(FLATCC_WITH_SHARED "Build the shared version of the library" ON)
+
 # Disable if cross compiling or if experiencing build issues with certain
 # custom CMake configurations - suspect dependency issue on flatcc tool
 # in custom build steps used by tests and samples.
@@ -66,6 +71,10 @@ option (FLATCC_ALLOW_WERROR "allow -Werror to be configured" ON)
 # try using this option.
 option (FLATCC_IGNORE_CONST_COND "silence const condition warnings" OFF)
 
+if (NOT (FLATCC_WITH_STATIC OR FLATCC_WITH_SHARED))
+	message(FATAL_ERROR "Makes no sense to compile with neither static nor shared libraries.")
+endif()
+
 if (FLATCC_TEST)
     enable_testing()
 endif()
@@ -99,9 +108,17 @@ set (dist_dir "${PROJECT_SOURCE_DIR}")
 # set (dist_dir "${CMAKE_BINARY_DIR}")
 
 # The targets we copy to bin and lib directories, i.e. not tests.
+if (FLATCC_WITH_STATIC)
+    set(static_libs flatcc flatccrt)
+endif()
+
+if (FLATCC_WITH_SHARED)
+    set(static_libs flatcc_shared flatccrt_shared)
+endif()
+
 set(dist_targets
-    flatcc
-    flatccrt
+    ${static_libs}
+    ${shared_libs}
     flatcc_cli
 )
 
diff --git a/src/cli/CMakeLists.txt b/src/cli/CMakeLists.txt
index e4baf28..58df256 100644
--- a/src/cli/CMakeLists.txt
+++ b/src/cli/CMakeLists.txt
@@ -7,9 +7,15 @@ add_executable(flatcc_cli
     flatcc_cli.c
 )
 
-target_link_libraries(flatcc_cli
-    flatcc
-)
+if (FLATCC_WITH_SHARED)
+    target_link_libraries(flatcc_cli
+        flatcc_shared
+    )
+elseif (FLATCC_WITH_STATIC)
+    target_link_libraries(flatcc_cli
+        flatcc
+    )
+endif()
 
 # Rename because the libflatcc library and the flatcc executable would
 # conflict if they had the same target name `flatcc`.
diff --git a/src/compiler/CMakeLists.txt b/src/compiler/CMakeLists.txt
index 9bf6b13..6b41289 100644
--- a/src/compiler/CMakeLists.txt
+++ b/src/compiler/CMakeLists.txt
@@ -34,5 +34,26 @@ if (FLATCC_REFLECTION)
     set (SOURCES ${SOURCES} codegen_schema.c)
 endif(FLATCC_REFLECTION)
 
-add_library(flatcc ${SOURCES})
+if (FLATCC_WITH_STATIC)
+    add_library(flatcc STATIC ${SOURCES})
+    list(APPEND FLATCC_LIBRARIES flatcc)
 
+    if (WIN32)
+        # Windows uses the same .lib ending for static libraries and shared
+        # library linker files, so rename the static library.
+        set_target_properties(flatcc
+            PROPERTIES
+            OUTPUT_NAME flatcc_static)
+    endif()
+endif()
+
+if (FLATCC_WITH_SHARED)
+     add_library(flatcc_shared SHARED ${SOURCES})
+     list(APPEND FLATCC_LIBRARIES flatcc_shared)
+
+     # We want the shared lib to be named "libflatcc"
+     # not "libflatcc_shared".
+     set_target_properties(flatcc_shared
+         PROPERTIES
+         OUTPUT_NAME flatcc)
+endif()
diff --git a/src/runtime/CMakeLists.txt b/src/runtime/CMakeLists.txt
index 8fe6fef..652dd14 100644
--- a/src/runtime/CMakeLists.txt
+++ b/src/runtime/CMakeLists.txt
@@ -2,10 +2,34 @@ include_directories (
     "${PROJECT_SOURCE_DIR}/include"
 )
 
-add_library(flatccrt
+set (FLATCCRT_SOURCES
     builder.c
     emitter.c
     verifier.c
     json_parser.c
     json_printer.c
 )
+
+if (FLATCC_WITH_STATIC)
+    add_library(flatccrt STATIC ${FLATCCRT_SOURCES})
+    list(APPEND FLATCC_LIBRARIES flatccrt)
+
+    if (WIN32)
+        # Windows uses the same .lib ending for static libraries and shared
+        # library linker files, so rename the static library.
+        set_target_properties(flatccrt
+            PROPERTIES
+            OUTPUT_NAME flatccrt_static)
+    endif()
+endif()
+
+if (FLATCC_WITH_SHARED)
+    add_library(flatccrt_shared SHARED ${FLATCCRT_SOURCES})
+    list(APPEND FLATCC_LIBRARIES flatccrt_shared)
+
+    # We want the shared lib to be named "libflatccrt"
+    # not "libflatccrt_shared".
+    set_target_properties(flatccrt_shared
+        PROPERTIES
+        OUTPUT_NAME flatccrt)
+endif()
-- 
1.9.1

