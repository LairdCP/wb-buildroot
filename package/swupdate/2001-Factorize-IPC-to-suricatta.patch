From bebf8b9aafff0a47d7871024d0ab465330ac6d68 Mon Sep 17 00:00:00 2001
From: Stefano Babic <sbabic@denx.de>
Date: Sun, 26 Jan 2020 18:54:06 +0100
Subject: [PATCH 1/1] Factorize IPC to suricatta

The IPC for Suricatta daemon should be extended with further commands.
Move code from Hawkbit connector to suricatta and factorize code that
does not depend from the specific implementation.

Signed-off-by: Stefano Babic <sbabic@denx.de>
---
 include/suricatta/server.h |  6 ++++--
 suricatta/server_general.c |  4 ++--
 suricatta/server_hawkbit.c | 28 ++++++++--------------------
 suricatta/suricatta.c      | 30 +++++++++++++++++++++++++++++-
 4 files changed, 43 insertions(+), 25 deletions(-)

diff --git a/include/suricatta/server.h b/include/suricatta/server.h
index fc65543..e8d4926 100644
--- a/include/suricatta/server.h
+++ b/include/suricatta/server.h
@@ -7,6 +7,8 @@
 
 #pragma once
 
+#include <network_ipc.h>
+
 /* Suricatta Server Interface.
  *
  * Each suricatta server has to implement this interface.
@@ -20,7 +22,7 @@ extern server_op_res_t server_send_target_data(void);
 extern unsigned int server_get_polling_interval(void);
 extern server_op_res_t server_start(const char *cfgfname, int argc, char *argv[]);
 extern server_op_res_t server_stop(void);
-extern server_op_res_t server_ipc(int fd);
+extern server_op_res_t server_ipc(ipc_message *msg);
 extern void server_print_help(void);
 
 static struct server_t {
@@ -30,7 +32,7 @@ static struct server_t {
 	unsigned int (*get_polling_interval)(void);
 	server_op_res_t (*start)(const char *fname, int argc, char *argv[]);
 	server_op_res_t (*stop)(void);
-	server_op_res_t (*ipc)(int fd);
+	server_op_res_t (*ipc)(ipc_message *msg);
 	void (*help)(void);
 } server = {.has_pending_action = &server_has_pending_action,
 	    .install_update = &server_install_update,
diff --git a/suricatta/server_general.c b/suricatta/server_general.c
index 6318224..12943db 100644
--- a/suricatta/server_general.c
+++ b/suricatta/server_general.c
@@ -42,7 +42,7 @@
 void server_print_help(void);
 server_op_res_t server_has_pending_action(int *action_id);
 server_op_res_t server_stop(void);
-server_op_res_t server_ipc(int fd);
+server_op_res_t server_ipc(ipc_message *msg);
 server_op_res_t server_start(char *fname, int argc, char *argv[]);
 server_op_res_t server_install_update(void);
 server_op_res_t server_send_target_data(void);
@@ -668,7 +668,7 @@ server_op_res_t server_stop(void)
 	return SERVER_OK;
 }
 
-server_op_res_t server_ipc(int __attribute__ ((__unused__)) fd)
+server_op_res_t server_ipc(ipc_message __attribute__ ((__unused__)) *msg)
 {
 	return SERVER_OK;
 }
diff --git a/suricatta/server_hawkbit.c b/suricatta/server_hawkbit.c
index c617b80..16517d2 100644
--- a/suricatta/server_hawkbit.c
+++ b/suricatta/server_hawkbit.c
@@ -128,7 +128,7 @@ static struct timeval server_time;
 /* Prototypes for "public" functions */
 server_op_res_t server_has_pending_action(int *action_id);
 server_op_res_t server_stop(void);
-server_op_res_t server_ipc(int fd);
+server_op_res_t server_ipc(ipc_message *msg);
 server_op_res_t server_start(char *fname, int argc, char *argv[]);
 server_op_res_t server_install_update(void);
 server_op_res_t server_send_target_data(void);
@@ -1827,22 +1827,16 @@ static server_op_res_t server_configuration_ipc(ipc_message *msg)
 	return SERVER_OK;
 }
 
-server_op_res_t server_ipc(int fd)
+server_op_res_t server_ipc(ipc_message *msg)
 {
-	ipc_message msg;
 	server_op_res_t result = SERVER_OK;
-	int ret;
 
-	ret = read(fd, &msg, sizeof(msg));
-	if (ret != sizeof(msg))
-		return SERVER_EERR;
-
-	switch (msg.data.instmsg.cmd) {
+	switch (msg->data.instmsg.cmd) {
 	case CMD_ACTIVATION:
-		result = server_activation_ipc(&msg);
+		result = server_activation_ipc(msg);
 		break;
 	case CMD_CONFIG:
-		result = server_configuration_ipc(&msg);
+		result = server_configuration_ipc(msg);
 		break;
 	default:
 		result = SERVER_EERR;
@@ -1850,17 +1844,11 @@ server_op_res_t server_ipc(int fd)
 	}
 
 	if (result == SERVER_EERR) {
-		msg.type = NACK;
+		msg->type = NACK;
 	} else
-		msg.type = ACK;
-
-	msg.data.instmsg.len = 0;
+		msg->type = ACK;
 
-	if (write(fd, &msg, sizeof(msg)) != sizeof(msg)) {
-		TRACE("IPC ERROR: sending back msg");
-	}
-
-	/* Send ipc back */
+	msg->data.instmsg.len = 0;
 
 	return SERVER_OK;
 }
diff --git a/suricatta/suricatta.c b/suricatta/suricatta.c
index e7d90a3..1f1182c 100644
--- a/suricatta/suricatta.c
+++ b/suricatta/suricatta.c
@@ -16,12 +16,40 @@
 #include "pctl.h"
 #include "suricatta/suricatta.h"
 #include "suricatta/server.h"
+#include <network_ipc.h>
 
 void suricatta_print_help(void)
 {
 	server.help();
 }
 
+static server_op_res_t suricatta_ipc(int fd)
+{
+	ipc_message msg;
+	server_op_res_t result = SERVER_OK;
+	int ret;
+
+	ret = read(fd, &msg, sizeof(msg));
+	if (ret != sizeof(msg))
+		return SERVER_EERR;
+
+	switch (msg.data.instmsg.cmd) {
+	case CMD_CONFIG:
+		//result = server_configuration_ipc(&msg);
+		break;
+	default:
+		result = server.ipc(&msg);
+		break;
+	}
+
+	if (write(fd, &msg, sizeof(msg)) != sizeof(msg)) {
+		TRACE("IPC ERROR: sending back msg");
+	}
+
+	/* Send ipc back */
+	return SERVER_OK;
+}
+
 int suricatta_wait(int seconds)
 {
 	fd_set readfds;
@@ -40,7 +68,7 @@ int suricatta_wait(int seconds)
 	}
 	if (retval && FD_ISSET(sw_sockfd, &readfds)) {
 		TRACE("Suricatta woke up for IPC at %ld seconds", tv.tv_sec);
-		if (server.ipc(sw_sockfd) != SERVER_OK){
+		if (suricatta_ipc(sw_sockfd) != SERVER_OK){
 			DEBUG("Handling IPC failed!");
 		}
 		return (int)tv.tv_sec;
-- 
2.17.1

