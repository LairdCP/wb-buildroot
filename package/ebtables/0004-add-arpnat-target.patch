diff -urN a/extensions/ebt_nat.c b/extensions/ebt_nat.c
--- a/extensions/ebt_nat.c	2011-08-11 14:56:16.000000000 -0400
+++ b/extensions/ebt_nat.c	2011-09-17 12:59:35.497511502 -0400
@@ -21,6 +21,7 @@
 #define NAT_S_TARGET '2'
 #define NAT_D_TARGET '2'
 #define NAT_S_ARP '3'
+#define NAT_ARP_TARGET '2'
 static const struct option opts_s[] =
 {
 	{ "to-source"     , required_argument, 0, NAT_S },
@@ -30,6 +31,12 @@
 	{ 0 }
 };
 
+static struct option opts_arpnat[] =
+{
+	{ "arpnat-target" , required_argument, 0, NAT_ARP_TARGET },
+	{ 0 }
+};
+
 static const struct option opts_d[] =
 {
 	{ "to-destination", required_argument, 0, NAT_D },
@@ -47,6 +54,13 @@
 	" --snat-arp             : also change src address in arp msg\n");
 }
 
+static void print_help_arpnat()
+{
+	printf(
+	"arpnat options:\n"
+	" --arpnat-target target   : ACCEPT, DROP, RETURN or CONTINUE\n");
+}
+
 static void print_help_d()
 {
 	printf(
@@ -55,6 +69,57 @@
 	" --dnat-target target   : ACCEPT, DROP, RETURN or CONTINUE\n");
 }
 
+static void init_arpnat(struct ebt_entry_target *target)
+{
+	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target->data;
+
+	natinfo->target = EBT_ACCEPT;
+	return;
+}
+
+#define OPT_ARPNAT_TARGET 0x2
+static int parse_arpnat(int c, char **argv, int argc,
+	const struct ebt_u_entry *entry, unsigned int *flags,
+	struct ebt_entry_target **target)
+{
+	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)(*target)->data;
+
+	switch (c) {
+	case NAT_ARP_TARGET:
+		ebt_check_option2(flags, OPT_ARPNAT_TARGET);
+		if (FILL_TARGET(optarg, natinfo->target))
+			ebt_print_error2("Illegal --arpnat-target target");
+		break;
+	default:
+		return 0;
+	}
+	return 1;
+}
+
+static void final_check_arpnat(const struct ebt_u_entry *entry,
+	const struct ebt_entry_target *target, const char *name,
+	unsigned int hookmask, unsigned int time)
+{
+	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target->data;
+
+	if (BASE_CHAIN && natinfo->target == EBT_RETURN)
+		ebt_print_error("--arpnat-target RETURN not allowed on base chain");
+
+	CLEAR_BASE_CHAIN_BIT;
+
+	if (((hookmask & ~((1 << NF_BR_PRE_ROUTING) | (1 << NF_BR_POST_ROUTING)))
+		|| strcmp(name, "nat")))
+		ebt_print_error("Wrong chain for arpnat");
+}
+
+static void print_arpnat(const struct ebt_u_entry *entry,
+   const struct ebt_entry_target *target)
+{
+	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target->data;
+
+	printf(" --arpnat-target %s", TARGET_NAME(natinfo->target));
+}
+
 static void init_s(struct ebt_entry_target *target)
 {
 	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target->data;
@@ -231,8 +296,22 @@
 	.extra_ops	= opts_d,
 };
 
+static struct ebt_u_target arpnat_target =
+{
+	.name       = "arpnat",
+	.size       = sizeof(struct ebt_nat_info),
+	.help       = print_help_arpnat,
+	.init       = init_arpnat,
+	.parse      = parse_arpnat,
+	.final_check    = final_check_arpnat,
+	.print      = print_arpnat,
+	.compare    = compare,
+	.extra_ops  = opts_arpnat,
+};
+
 static void _INIT(void)
 {
 	ebt_register_target(&snat_target);
 	ebt_register_target(&dnat_target);
+	ebt_register_target(&arpnat_target);
 }
