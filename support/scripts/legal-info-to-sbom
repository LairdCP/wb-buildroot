#!/usr/bin/env bash

LEGAL_INFO_DIR=${1}
SBOM_TARGET=${2}
LRD_EXTERNALS=${PWD}/package/lrd/externals
LRD_CLOSED_SRC_EXTERNALS=${PWD}/package/lrd-closed-source/externals
TARGET_NAME=${BASE_DIR##*/}

# Kernel version
kernel_ver() {
	local KVER_FILE=${LRD_EXTERNALS}/kernel/Makefile
	local KVER=$(awk '/^VERSION/ {print $3}' ${KVER_FILE})
	local KPATCH=$(awk '/^PATCHLEVEL/ {if ($3!="") print "."$3 }' ${KVER_FILE})
	local KSUB=$(awk '/^SUBLEVEL/ {if($3!="") print "."$3}' ${KVER_FILE})
	local KERNEL_VER="|linux|"${KVER}${KPATCH}${KSUB}
	echo ${KERNEL_VER} >> ${SBOM_TARGET}
}

# at91bootstrap3
at91bootstrap3_ver() {
	local AT91VER_FILE=${LRD_EXTERNALS}/at91bootstrap3/Makefile
	local AT91BOOT_VER=$(awk '/^VERSION/ {if ($3!="") print $3}' ${AT91VER_FILE})
	local AT91BOOTSTRAP3_VER="|at91bootstrap3|"${AT91BOOT_VER}
	echo ${AT91BOOTSTRAP3_VER} >> ${SBOM_TARGET}
}

# U-Boot - Gets version info from build directory unless externals
uboot_ver() {
	local UBOOT_DIR

	case "${TARGET_NAME}" in
		*_legacy)   UBOOT_DIR="u-boot" ;;
		wb40n_*)    UBOOT_DIR="u-boot" ;;
		wb50n_rdvk) UBOOT_DIR="u-boot" ;;
		*)          UBOOT_DIR="u-boot-som60" ;;
	esac

	local UVER_FILE=${LRD_EXTERNALS}/${UBOOT_DIR}/Makefile
	local UBOOTVER=$(awk '/^VERSION/ {print $3}' ${UVER_FILE})
	local UBOOTPATCH=$(awk '/^PATCHLEVEL/ {if ($3 !="") print "."$3}' ${UVER_FILE})
	local UBOOTSUB=$(awk '/^SUBLEVEL/ {if ($3 !="") print "."$3}' ${UVER_FILE})
	local UBOOT_VER="|uboot|"${UBOOTVER}${UBOOTPATCH}${UBOOTSUB}
	echo ${UBOOT_VER} >> ${SBOM_TARGET}
}

# DCAS
dcas_ver() {
	local DVER_FILE=${LRD_EXTERNALS}/dcas/Makefile
	local DCASVER=$(awk '/^VERSION/ {print $3}' ${DVER_FILE})
	local DCASPATCH=$(awk '/^PATCHLEVEL/ {if ($3 != "")print "."$3}' ${DVER_FILE})
	local DCASSUB=$(awk '/^SUBLEVEL/ {if ($3 != "") print "."$3}' ${DVER_FILE})
	local DCAS_VER="|dcas|"${DCASVER}${DCASPATCH}${DCASSUB}
	echo ${DCAS_VER} >> ${SBOM_TARGET}
}

# Eventmon
eventmon_ver() {
	local EVER_FILE=${LRD_EXTERNALS}/eventmon/event_mon.c
	local EVER=$(awk '/define LRD_EVENT_MON_VERSION_MAJOR/ {print $3}' $EVER_FILE )
	local EPATCH=$(awk '/define LRD_EVENT_MON_VERSION_MINOR/ {if ($3 != "") print "."$3}' ${EVER_FILE})
	local ESUB=$(awk '/define LRD_EVENT_MON_VERSION_REVISION/ {if ($3 != "") print "."$3}' ${EVER_FILE})
	local ESUBRV=$(awk '/define LRD_EVENT_MON_VERSION_SUB_REVISION/ {if ($3 != "") print "."$3}' ${EVER_FILE})
	local EVENTMON_VER="|eventmon|"${EVER}${EPATCH}${ESUB}${ESUBRV}
	echo ${EVENTMON_VER} >> ${SBOM_TARGET}
}

# php_sdk
php_sdk_ver() {
	local PVER_FILE=${LRD_EXTERNALS}/php_sdk/php_sdk.i
	local PHVER=$(awk '/define LRD_PHP_SDK_VERSION_MAJOR/ {print $3}' ${PVER_FILE} )
	local PHPATCH=$(awk '/define LRD_PHP_SDK_VERSION_MINOR/ {if ($3 != "") print "."$3}' ${PVER_FILE})
	local PHSUB=$(awk '/define LRD_PHP_SDK_VERSION_REVISION/ {if ($3 != "") print "."$3}' ${PVER_FILE})
	local PHSUBRV=$(awk '/define LRD_PHP_VERSION_SUB_REVISION/ {if ($3 != "") print "."$3}' ${PVER_FILE})
	local PHP_SDK_VER="|php_sdk|"${PHVER}${PHPATCH}${PHSUB}${PHSUBRV}
	echo ${PHP_SDK_VER} >> ${SBOM_TARGET}
}

# Sterling Supplicant
sterling_supplicant_ver() {
	local SSVER_FILE=${LRD_EXTERNALS}/sterling_supplicant/src/common/version.h
	local SSVER=$(awk '/define VERSION_STR / {if ($3 != "") print $3}' ${SSVER_FILE} | sed -e 's|["]||g')
	local STERLING_SUPP_VER="|wpa_supplicant|"${SSVER}
	echo ${STERLING_SUPP_VER} >> ${SBOM_TARGET}
}

# wpa_supplicant
sdcsupp_ver() {
	local WSVER_FILE=${LRD_CLOSED_SRC_EXTERNALS}/wpa_supplicant/src/common/version.h
	local WSVER=$(awk '/define VERSION_STR / {if ($3 != "") print $3}' ${WSVER_FILE} | sed -e 's|["]||g')
	local WPA_SUPP_VER="|sdcsupp|"${WSVER}
	echo ${WPA_SUPP_VER} >> ${SBOM_TARGET}
}

# Network Manager
network_manager_ver() {
	local NMVER_FILE=${LRD_EXTERNALS}/lrd-network-manager/configure.ac
	local NMVER=$(awk '/nm_major_version/ {print $2}' ${NMVER_FILE} | sed 's/)//g' | sed 's/\[//g' | sed 's/\]//g')
	local NMPATCH=$(awk '/nm_minor_version/ {if ($2!="")print "."$2}' ${NMVER_FILE} | sed 's/)//g' | sed 's/\[//g' | sed 's/\]//g')
	local NMSUB=$(awk '/nm_micro_version/ {if ($2!="")print "."$2}' ${NMVER_FILE} | sed 's/)//g' | sed 's/\[//g' | sed 's/\]//g')
	local LRD_NETWORK_VER="|networkmanager|"${NMVER}${NMPATCH}${NMSUB}
	echo ${LRD_NETWORK_VER} >> ${SBOM_TARGET}
}

# mfg60n
mfg60n_ver() {
	local MFGVER_FILE=${LRD_CLOSED_SRC_EXTERNALS}/mfg60n/lru/src/version.h
	local MFGVER=$(awk '/define LRU_BUILD_MAJOR/ {print $3}' ${MFGVER_FILE} )
	local MFGPATCH=$(awk '/define LRU_BUILD_MINOR/ {if ($3 != "") print "."$3}' ${MFGVER_FILE})
	local MFGSUB=$(awk '/define LRU_BUILD_REVISION/ {if ($3 != "") print "."$3}' ${MFGVER_FILE})
	local MFGSUBRV=$(awk '/define LRU_BUILD_SUB_REVISION/ {if ($3 != "") print "."$3}' ${MFGVER_FILE})
	local MFG_TOOLS_VER="|mfg60n|"${MFGVER}${MFGPATCH}${MFGSUB}${MFGSUBRV}
	echo ${MFG_TOOLS_VER} >> ${SBOM_TARGET}
}

# AWM
awm_ver() {
	local AWMVER_FILE=${LRD_CLOSED_SRC_EXTERNALS}/adaptive_ww/common/version.h
	local AWMVER=$(awk '/define WW_BUILD_MAJOR/ {print $3}' ${AWMVER_FILE} )
	local AWMPATCH=$(awk '/define WW_BUILD_MINOR/ {if ($3 != "") print "."$3}' ${AWMVER_FILE})
	local AWMSUB=$(awk '/define WW_BUILD_REVISION/ {if ($3 != "") print "."$3}' ${AWMVER_FILE})
	local AWMSUBRV=$(awk '/define WW_BUILD_SUB_REVISION/ {if ($3 != "") print "."$3}' ${AWMVER_FILE})
	local AWM_VER="|adaptive_ww|"${AWMVER}${AWMPATCH}${AWMSUB}${AWMSUBRV}
	echo ${AWM_VER} >> ${SBOM_TARGET}
}

# Reads Warning generated from make legal-info and fix those packages

##### Main body of script
echo
echo "Generating SBOM for ${TARGET_NAME} [ Started ]"

PACKAGES=$(awk '/WARNING/ {print $2}' ${LEGAL_INFO_DIR}/README | sed 's/://' | sort -u)
for i in ${PACKAGES}; do
	case "$i" in
		linux)               kernel_ver ;;
		at91bootstrap3)      at91bootstrap3_ver ;;
		eventmon)            eventmon_ver ;;
		uboot)               uboot_ver ;;
		dcas)                dcas_ver ;;
		lrd-network-manager) network_manager_ver ;;
		php_sdk)             php_sdk_ver ;;
		wpa_supplicant)      sterling_supplicant_ver ;;
		sdcsupp)             sdcsupp_ver ;;
		adaptive_ww)         awm_ver ;;
		mfg60n)              mfg60n_ver ;;
	esac
done

echo "SBOM Generated ${BINARIES_DIR} [ Done ]"
